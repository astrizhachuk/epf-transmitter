# This CI/CD configuration provides a standard pipeline for
# * building services (docker-compose),
# * running code quality analysis,
# * creating a review app for tag "review-*",
# * and continuous deployment to production.

default:
  tags:
    - udocker02

variables:
  #CI_DEBUG_TRACE: "true"

  # Checking an already installed service may be disabled by setting environment variable
  # 'CHECK_NEW_INSTANCE: "false"' (enabled by default).
  #
  # If you want to use only a standalone server to update the configuration, then set
  # 'FLAG_USE_ONLY_IBCMD: "true"' (disabled by default).
  CHECK_NEW_INSTANCE: "true"
  FLAG_USE_ONLY_IBCMD: "false"

  # Compose configuration files (docker-compose -f) and
  # project name (docker-compose -p) for containers, volumes, and network prefix
  DEPLOY_CONFIG: "production.yml"

  DEPLOY_NAME: "$CI_PROJECT_NAME-production"
  DEPLOY_NETWORK: "$CI_PROJECT_NAME-production"

  # production and review app endpoints
  DEPLOY_SERVER: "http://127.0.0.1"
  DEPLOY_PORT: "8090"
  REVIEW_PORT: "8091"

  EDT_PROJECT_DIR: "Transmitter" # EDT src

  # docker-compose services (1C and DB)
  IB_SERVER: "srv"
  IB_NAME: "transmitter"
  DB_SERVER: "db"
  DB_NAME: "transmitter"

  BACKUP_PATH: "/var/backups" # backup before update

  # init ib (users, roles)
  INIT_DB_PATH: "https://github.com/astrizhachuk/Init-db-1c/releases/download"
  INIT_DB_VERSION: "2.0.0"

workflow:
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./ || $CI_COMMIT_TAG =~ /^review-/
    - if: $CI_MERGE_REQUEST_IID

stages:
  - build
  - test
  - srv
  - db
  - dump
  - import
  - apply
  - update
  - init
  - ws

include:
  - remote: 'https://raw.githubusercontent.com/astrizhachuk/onec-gitlab-ci/master/.ibcmd-ci.yml'
  - remote: 'https://raw.githubusercontent.com/astrizhachuk/onec-gitlab-ci/master/.sonarqube-ci.yml'

.start_services: &start_services
  - docker-compose -f $DEPLOY_CONFIG -p $DEPLOY_NAME up --no-start
  - docker cp $DEPLOY_NETHASP ${DEPLOY_NAME}_${IB_SERVER}_1:/opt/1cv8/current/conf/nethasp.ini
  - docker cp $DEPLOY_ONEC_CONFIG ${DEPLOY_NAME}_${IB_SERVER}_1:/opt/1cv8/current/conf/conf.cfg
  - docker-compose -f $DEPLOY_CONFIG -p $DEPLOY_NAME start

.get_deploy_env: &get_deploy_env
  - TAG_REGEX="^review-"
  - if [[ $CI_COMMIT_TAG =~ $TAG_REGEX ]];
    then
      DEPLOY_NETWORK=$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG;
      DEPLOY_NAME=$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG;
      DEPLOY_PORT=$REVIEW_PORT;
    fi

.rac_register_ib: &rac_register_ib
  - docker-compose -f $DEPLOY_CONFIG -p $DEPLOY_NAME
    exec -T
    $IB_SERVER bash -c "/opt/1cv8/current/ras cluster --daemon &&
      sleep 10s &&
      /opt/1cv8/current/rac cluster list $IB_SERVER &&
      /opt/1cv8/current/rac infobase
        --cluster=\$(/opt/1cv8/current/rac cluster list $IB_SERVER | grep cluster | awk '{print \$3}')
      create
        --name=$IB_NAME
        --dbms=PostgreSQL
        --db-server=$DB_SERVER
        --db-name=$DB_NAME
        --locale=ru
        --db-user=postgres
        --license-distribution=allow
      $IB_SERVER"

.update_ib: &update_ib
  - docker run
    --rm
    --network=$DEPLOY_NETWORK
    -v $CI_PROJECT_DIR:/build
    -v $DEPLOY_NETHASP:/opt/1cv8/current/conf/nethasp.ini
    -v $DEPLOY_ONEC_CONFIG:/opt/1cv8/current/conf/conf.cfg
    $CI_REGISTRY/devops/onec-docker/client-vnc:$ONEC_VERSION
    bash -c "/opt/1cv8/current/1cv8 DESIGNER
      /IBConnectionString \"Srvr=$IB_SERVER;Ref=$IB_NAME;\"
      $PARAMS_ADMIN_USER
      /LoadConfigFromFiles /build/xml -Format Hierarchical /UpdateDBCfg
      /DisableStartupMessages /DisableStartupDialogs
      /out /build/load.log"

.init_ib: &init_ib
  - docker run
    --rm
    --network=$DEPLOY_NETWORK
    -v $CI_PROJECT_DIR:/build
    -v $DEPLOY_NETHASP:/opt/1cv8/current/conf/nethasp.ini
    -v $DEPLOY_ONEC_CONFIG:/opt/1cv8/current/conf/conf.cfg
    -e WS_USER=$WS_USER
    -e WS_PASSWORD=$WS_PASSWORD
    $CI_REGISTRY/devops/onec-docker/client-vnc:$ONEC_VERSION
    bash -c "/opt/1cv8/current/1cv8 ENTERPRISE
      /IBConnectionString \"Srvr=$IB_SERVER;Ref=$IB_NAME;\"
      $PARAMS_ADMIN_USER
      /Execute /build/tools/init-db.epf /C\"file=/build/tools/users.json\""

docker login:
  stage: .pre
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./ || $CI_COMMIT_TAG =~ /^review-/

export xml:
  stage: build
  script:
    - docker run
      --rm
      -v $CI_PROJECT_DIR:/build
      $CI_REGISTRY/devops/onec-docker/edt:$ONEC_VERSION
      bash -c "ring edt workspace export
        --project /build/$EDT_PROJECT_DIR
        --workspace-location tmp/w
        --configuration-files /build/xml"
    - sudo chown -R $USER $CI_PROJECT_DIR/xml #говорят, в api 1.41+ докер есть лучшее решение, чем chown
    - sudo chown -R $USER $CI_PROJECT_DIR/$EDT_PROJECT_DIR/.settings
  artifacts:
    name: "xml-$CI_COMMIT_SHORT_SHA"
    paths:
      - xml
    expire_in: 7 hours
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./ || $CI_COMMIT_TAG =~ /^review-/

download tools:
  stage: build
  script:
    - docker run
      --rm
      -u $USER
      -v $CI_PROJECT_DIR:/build
      curlimages/curl:latest
      -Lv -o /build/tools/init-db.epf $INIT_DB_PATH/$INIT_DB_VERSION/InitDB.epf
  cache:
    key: "init-$CI_COMMIT_SHORT_SHA"
    paths:
      - tools/init-db.epf
    policy: push
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./ || $CI_COMMIT_TAG =~ /^review-/

srv up:
  stage: srv
  environment:
    name: production
    url: $DEPLOY_SERVER:$DEPLOY_PORT/api/hs/gitlab/services
    on_stop: stop_production
  script:
    - if [[ $CHECK_NEW_INSTANCE == "true" ]]; then
        if [[ ! -n $(docker volume ls -f name=$DEPLOY_NAME --format "{{.Name}}") ]]; then
          FLAG_NEW_INSTANCE="true";
          PARAMS_ADMIN_USER="";
        else
          FLAG_NEW_INSTANCE="false";
          PARAMS_ADMIN_USER="/NАдминистратор";
        fi
      else
        FLAG_NEW_INSTANCE="false";
        PARAMS_ADMIN_USER="/NАдминистратор";     
      fi
    - echo "FLAG_NEW_INSTANCE=$FLAG_NEW_INSTANCE" >> deploy.env
    - echo "PARAMS_ADMIN_USER=$PARAMS_ADMIN_USER" >> deploy.env
    - *start_services
  artifacts:
    reports:
      dotenv: deploy.env
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./

review srv up:
  stage: srv
  variables:
    DEPLOY_NETWORK: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    DEPLOY_NAME: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    DEPLOY_PORT: $REVIEW_PORT
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: $DEPLOY_SERVER:$DEPLOY_PORT/api/hs/gitlab/services
    on_stop: stop_review
  script:
    - docker-compose -f $DEPLOY_CONFIG -p $DEPLOY_NAME down -v
    - *start_services
  rules:
    - if: $CI_COMMIT_TAG =~ /^review-/

create db:
  stage: db
  script:
    - *get_deploy_env
    - !reference [.ibcmd_create_ib, script]
  dependencies: []
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./ || $CI_COMMIT_TAG =~ /^review-/
      when: delayed
      start_in: 5 seconds

register ib:
  stage: db
  script:
    - *get_deploy_env
    - *rac_register_ib
  needs: ["create db"]
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./ || $CI_COMMIT_TAG =~ /^review-/

dump:
  stage: dump
  script:
    - docker-compose -f $DEPLOY_CONFIG -p $DEPLOY_NAME stop ws
    - !reference [.ibcmd_dump_ib, script]
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./

import config:
  stage: import
  script:
    - *get_deploy_env
    - !reference [.ibcmd_config_import, script]
  rules:
    - if: ($CI_COMMIT_TAG =~ /^v\d+./ || $CI_COMMIT_TAG =~ /^review-/) && $FLAG_USE_ONLY_IBCMD == "true"

apply config:
  stage: apply
  script:
    - *get_deploy_env
    - !reference [.ibcmd_config_apply, script]
  rules:
    - if: ($CI_COMMIT_TAG =~ /^v\d+./ || $CI_COMMIT_TAG =~ /^review-/) && $FLAG_USE_ONLY_IBCMD == "true"

update:
  stage: update
  environment:
    name: production
  script:
    - touch $CI_PROJECT_DIR/load.log
    - *update_ib
    - sudo chown -R $USER $CI_PROJECT_DIR/load.log
  artifacts:
    name: "log-$CI_COMMIT_SHORT_SHA"
    paths:
      - load.log
    expire_in: 7 day
    when: on_failure
  rules:
    - if: '$FLAG_USE_ONLY_IBCMD == "true"'
      when: never
    - if: $CI_COMMIT_TAG =~ /^v\d+./

review update:
  stage: update
  variables:
    DEPLOY_NETWORK: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    DEPLOY_NAME: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    DEPLOY_PORT: $REVIEW_PORT
  environment:
    name: review/$CI_COMMIT_REF_SLUG
  script:
    - touch $CI_PROJECT_DIR/load.log
    - *update_ib
    - sudo chown -R $USER $CI_PROJECT_DIR/load.log
  artifacts:
    name: "log-$CI_COMMIT_SHORT_SHA"
    paths:
      - load.log
    expire_in: 7 day
    when: on_failure
  dependencies: ["export xml"]
  rules:
    - if: '$FLAG_USE_ONLY_IBCMD == "true"'
      when: never
    - if: $CI_COMMIT_TAG =~ /^review-/

init db:
  stage: init
  environment:
    name: production
  script:
    - if [[ $FLAG_NEW_INSTANCE == "false" ]]; then
        exit 0;
      fi
    - *init_ib
  cache:
    key: "init-$CI_COMMIT_SHORT_SHA"
    paths:
      - tools/init-db.epf
    policy: pull
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./

review init db:
  stage: init
  variables:
    DEPLOY_NETWORK: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    DEPLOY_NAME: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    DEPLOY_PORT: $REVIEW_PORT
  environment:
    name: review/$CI_COMMIT_REF_SLUG
  script:
    - *init_ib
  cache:
    key: "init-$CI_COMMIT_SHORT_SHA"
    paths:
      - tools/init-db.epf
    policy: pull
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG =~ /^review-/

ws:
  stage: ws
  script:
    - *get_deploy_env
    - docker-compose -f $DEPLOY_CONFIG -p $DEPLOY_NAME restart ws
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./ || $CI_COMMIT_TAG =~ /^review-/

stop_production:
  stage: .post
  variables:
    GIT_STRATEGY: none
  script:
    - docker-compose -f $DEPLOY_CONFIG -p $DEPLOY_NAME stop
  environment:
    name: production
    action: stop
  needs: ["srv up"]
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./
      when: manual

stop_review:
  stage: .post
  variables:
    GIT_STRATEGY: none
    DEPLOY_NETWORK: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    DEPLOY_NAME: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    DEPLOY_PORT: $REVIEW_PORT
  script:
    - docker-compose -f $DEPLOY_CONFIG -p $DEPLOY_NAME down -v
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  needs: ["review srv up"]
  rules:
    - if: $CI_COMMIT_TAG =~ /^review-/
      when: manual

sonarqube on merge request:
  extends: .sonarqube
  script:
    - PROJECT_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" $EDT_PROJECT_DIR/src/Configuration/Configuration.mdo)
    - !reference [.on_merge_request, script]
  rules:
    - if: $CI_MERGE_REQUEST_IID

sonarqube on tag:
  extends:
    - .sonarqube
    - .on_tag
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+./ || $CI_COMMIT_TAG =~ /^review-/
