variables:
  #CI_DEBUG_TRACE: "true"
  FLAG_NEW_INSTANCE: "false"
  FLAG_USE_ONLY_IBCMD: "false"

  PROJECT_NAME: $CI_PROJECT_NAME
  EDT_PROJECT_DIR: "GitlabServices"
  IB_NAME: "gitlabServices"
  DB_NAME: "gitlabServices"

  BACKUP_PATH: "/var/backups"

  INIT_DB_PATH: "https://github.com/astrizhachuk/Init-db-1c/releases/download"
  INIT_DB_VERSION: "2.0.0"

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $FLAG_NEW_INSTANCE
    - if: $CI_MERGE_REQUEST_IID

stages:
  - prepare
  - create
  - register
  - import
  - dump
  - apply
  - update
  - init
  - test
  - up

.runner:
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  tags:
    - udocker02

conf:
  stage: .pre
  script:
    - mkdir .conf
    - echo -e "$DEPLOY_ONEC_CONFIG" > .conf/conf.cfg
    - echo -e "$DEPLOY_NETHASP" > .conf/nethasp.ini
  cache:
    key: "conf-$CI_COMMIT_SHORT_SHA"
    paths:
      - .conf
    policy: push
  tags:
    - udocker02

srv up:
  extends: .runner
  stage: prepare
  script:
    - docker-compose -f "production.yml" -p $PROJECT_NAME up -d srv
  rules:
    - if: '$CI_COMMIT_TAG && $FLAG_NEW_INSTANCE == "true"'

export xml:
  extends: .runner
  stage: prepare
  script:
    - docker run
      --rm
      -v $CI_PROJECT_DIR:/build
      $CI_REGISTRY/devops/onec-docker/edt:$ONEC_VERSION
      bash -c "ring edt workspace export
        --project /build/$EDT_PROJECT_DIR
        --workspace-location tmp/w
        --configuration-files /build/xml"
    - sudo chown -R $USER $CI_PROJECT_DIR/xml #говорят, в api 1.41+ докер есть лучшее решение, чем chown
    - sudo chown -R $USER $CI_PROJECT_DIR/$EDT_PROJECT_DIR/.settings
  cache:
    key: "xml-$CI_COMMIT_SHORT_SHA"
    paths:
      - xml
    policy: push
  artifacts:
    name: "xml-$CI_COMMIT_SHORT_SHA"
    paths:
      - xml
    expire_in: 7 hours
  rules:
    - if: $CI_COMMIT_TAG

download tools:
  extends: .runner
  stage: prepare
  script:
      - docker run
        --rm
        -u $USER
        -v $CI_PROJECT_DIR:/build
        curlimages/curl:latest
        -Lv -o /build/tools/init-db.epf $INIT_DB_PATH/$INIT_DB_VERSION/InitDB.epf
  cache:
    key: "init-$CI_COMMIT_SHORT_SHA"
    paths:
      - tools/init-db.epf
    policy: push
  rules:
    - if: '$CI_COMMIT_TAG && $FLAG_NEW_INSTANCE == "true"'

# compile epf:
#   extends: .runner
#   stage: prepare
#   script:
#     - docker run
#       --rm
#       -v $CI_PROJECT_DIR:/build
#       -v $CI_PROJECT_DIR/nethasp.ini:/opt/1cv8/current/conf/nethasp.ini
#       $CI_REGISTRY/devops/onec-docker/oscript-1.6.0:$ONEC_VERSION
#       bash -c "oscript build/tools/onescript/Compile.os /build/tools/users/"
#     - sudo chown -R $USER $CI_PROJECT_DIR/tools/users
#   cache:
#     key: "epf-$CI_COMMIT_SHORT_SHA"
#     paths:
#       - tools/users
#     policy: push
#   rules:
#     - if: '$CI_COMMIT_TAG && $FLAG_NEW_INSTANCE == "true"'

create db:
  extends: .runner
  stage: create
  script:
    # Почему то не работают флаги --apply --force для принудительного обновления
    # ibcmd infobase create
    # --import=/build/xml
    - docker-compose -f "production.yml" -p $PROJECT_NAME
      run --rm --entrypoint="" -v $CI_PROJECT_DIR:/build
      srv
        /opt/1cv8/current/ibcmd infobase create
          --db-server=db
          --dbms=postgresql
          --db-name=$DB_NAME
          --db-user=postgres
          --create-database
  rules:
    - if: '$CI_COMMIT_TAG && $FLAG_NEW_INSTANCE == "true"'

register ib:
  extends: .runner
  stage: register
  script:
    - docker-compose -f "production.yml" -p $PROJECT_NAME
      exec -T
      srv
        bash -c "/opt/1cv8/current/ras cluster --daemon &&
          sleep 10s &&
          /opt/1cv8/current/rac cluster list srv &&
          /opt/1cv8/current/rac infobase
          --cluster=\$(/opt/1cv8/current/rac cluster list srv | grep cluster | awk '{print \$3}')
          create
            --name=$IB_NAME
            --dbms=PostgreSQL
            --db-server=db
            --db-name=$DB_NAME
            --locale=ru
            --db-user=postgres
            --license-distribution=allow
          srv"
  rules:
    - if: '$CI_COMMIT_TAG && $FLAG_NEW_INSTANCE == "true"'

import config:
  extends: .runner
  stage: import
  script:
    - docker-compose -f "production.yml" -p $PROJECT_NAME
      run --rm --entrypoint="" -v $CI_PROJECT_DIR:/build
      srv
        /opt/1cv8/current/ibcmd infobase config import
          --db-server=db
          --dbms=postgresql
          --db-name=$DB_NAME
          --db-user=postgres
          /build/xml
  cache:
    key: "xml-$CI_COMMIT_SHORT_SHA"
    paths:
      - xml
    policy: pull
  rules:
    - if: '$CI_COMMIT_TAG && $FLAG_USE_ONLY_IBCMD == "true"'

dump:
  extends: .runner
  stage: dump
  script:
    - docker-compose -f "production.yml" -p $PROJECT_NAME stop ws
    - docker-compose -f "production.yml" -p $PROJECT_NAME
      run
        --rm
        --entrypoint=""
        -v $BACKUP_PATH:/backup
        srv
          /opt/1cv8/current/ibcmd infobase dump
            --db-server=db
            --dbms=postgresql
            --db-name=$DB_NAME
            --db-user=postgres
          /backup/$PROJECT_NAME-$CI_COMMIT_TAG-"`date +"%Y-%m-%d-%H-%M-%S"`".dt
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: never
    - if: '$CI_COMMIT_TAG && $FLAG_NEW_INSTANCE == "true"'
      when: never
    - if: '$CI_COMMIT_TAG && $FLAG_NEW_INSTANCE == "false"'

apply config:
  extends: .runner
  stage: apply
  script:
    - docker-compose -f "production.yml" -p $PROJECT_NAME
      run --rm --entrypoint=""
      srv
        /opt/1cv8/current/ibcmd infobase config apply
          --db-server=db
          --dbms=postgresql
          --db-name=$DB_NAME
          --db-user=postgres
          --force
  rules:
    - if: '$CI_COMMIT_TAG && $FLAG_USE_ONLY_IBCMD == "true"'

update:
  extends: .runner
  stage: update
  script:
    - touch $CI_PROJECT_DIR/load.log
    - docker run
      --rm --network=gitlab-services_back_net
      -v $CI_PROJECT_DIR:/build
      -v $CI_PROJECT_DIR/.conf:/opt/1cv8/current/conf
      $CI_REGISTRY/devops/onec-docker/client-vnc:$ONEC_VERSION
      bash -c "/opt/1cv8/current/1cv8 DESIGNER /IBConnectionString \"Srvr=srv;Ref=$IB_NAME;\"
        $PARAMS_ADMIN_USER
        /LoadConfigFromFiles /build/xml -Format Hierarchical /UpdateDBCfg
        /DisableStartupMessages /DisableStartupDialogs /out /build/load.log"
    - sudo chown -R $USER $CI_PROJECT_DIR/load.log
  cache:
    key: "conf-$CI_COMMIT_SHORT_SHA"
    paths:
      - .conf
    policy: pull
  artifacts:
    name: "log-$CI_COMMIT_SHORT_SHA"
    paths:
      - load.log
    expire_in: 7 day
    when: on_failure
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: never
    - if: '$FLAG_USE_ONLY_IBCMD == "true"'
      when: never
    - if: '$CI_COMMIT_TAG && $FLAG_NEW_INSTANCE == "false"'
      variables:
        PARAMS_ADMIN_USER: "/NАдминистратор"
    - if: '$CI_COMMIT_TAG && $FLAG_NEW_INSTANCE == "true"'

init db:
  extends: .runner
  stage: init
  script:
    - docker run
      --rm
      --network=gitlab-services_back_net
      -v $CI_PROJECT_DIR:/build
      -v $CI_PROJECT_DIR/.conf:/opt/1cv8/current/conf
      -e WS_USER=$WS_USER
      -e WS_PASSWORD=$WS_PASSWORD
      $CI_REGISTRY/devops/onec-docker/client-vnc:$ONEC_VERSION
      bash -c "/opt/1cv8/current/1cv8 ENTERPRISE /IBConnectionString \"Srvr=srv;Ref=$IB_NAME;\"
        /Execute /build/tools/init-db.epf
        /C\"file=/build/tools/users.json\""
  cache:
    - key: "init-$CI_COMMIT_SHORT_SHA"
      paths:
        - tools/init-db.epf
      policy: pull
    - key: "conf-$CI_COMMIT_SHORT_SHA"
      paths:
        - .conf
      policy: pull
  rules:
    - if: '$CI_COMMIT_TAG && $FLAG_NEW_INSTANCE == "true"'

ws up:
  extends: .runner
  stage: up
  script:
    - docker-compose -f "production.yml" -p $PROJECT_NAME up -d ws
  rules:
    - if: $CI_COMMIT_TAG

.sonarqube:
  stage: test
  variables:
    GIT_DEPTH: 0
  image:
    name: $CI_REGISTRY/devops/sonar-scanner-cli:latest
    entrypoint: [""]
  tags:
    - 1c

.cacerts: &cacerts
  - keytool -cacerts -storepass changeit -noprompt -trustcacerts -importcert
      -alias ${SONAR_SSL_SERVER}
      -file "${SONAR_SSL_CERTIFICATE}"

sonarqube_on_merge_request:
  extends: .sonarqube
  script:
    - *cacerts
    - export PROJECT_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" $EDT_PROJECT_DIR/src/Configuration/Configuration.mdo)
    - export SONAR_SCANNER_OPTS="-Xmx4g"
    - sonar-scanner
      -D"sonar.host.url=$SONAR_SERVER"
      -D"sonar.projectVersion=$PROJECT_VERSION"
      -D"sonar.login=$SONAR_LOGIN"
      -D"sonar.pullrequest.key=$CI_MERGE_REQUEST_IID"
      -D"sonar.pullrequest.branch=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
      -D"sonar.pullrequest.base=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
  rules:
    - if: $CI_MERGE_REQUEST_IID

sonarqube_on_tag:
  extends: .sonarqube
  script:
    - *cacerts
    - export SONAR_SCANNER_OPTS="-Xmx4g"
    - sonar-scanner
      -D"sonar.host.url=$SONAR_SERVER"
      -D"sonar.projectVersion=$CI_COMMIT_TAG"
      -D"sonar.branch.name=$CI_DEFAULT_BRANCH"
      -D"sonar.login=$SONAR_LOGIN"
  rules:
    - if: $CI_COMMIT_TAG
