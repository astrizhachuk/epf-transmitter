// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполнить выполняет заполнение свойств объекта по данным заполнения.
// 
// Параметры:
//  Данные - см. ВнешниеЗапросы.ДанныеЗаполнения
// 
Процедура Заполнить( Знач Данные ) Экспорт
	
	Если ( ТипЗнч(Данные) <> Тип("Структура") ) Тогда
		
		ВызватьИсключение Логи.Сообщения().INVALID_DATA_TYPE;
		
	КонецЕсли;
	
	ЗаполнитьДанными( Данные );
	
КонецПроцедуры

// ПолучитьТело возвращает данные внешнего запроса в формате JSON.
// 
// Возвращаемое значение:
// 	Строка - тело внешнего запроса в формате JSON;
//
Функция ПолучитьТело() Экспорт
	
	Возврат JSON;
	
КонецФункции

// ПолучитьИдентификаторПроекта возвращает идентификатор проекта.
// 
// Возвращаемое значение:
// 	Строка - идентификатор проекта;
//
Функция ПолучитьИдентификаторПроекта() Экспорт
	
	Возврат ProjectId;
	
КонецФункции

// ПолучитьАдресПроекта возвращает URL проекта.
// 
// Возвращаемое значение:
// 	Строка - веб-адрес (URL) проекта, например, "http://server:80/root/example";
//
Функция ПолучитьАдресПроекта() Экспорт
	
	Возврат ProjectURL;
	
КонецФункции

// ПолучитьАдресСервера возвращает URL сервера.
// 
// Возвращаемое значение:
// 	Строка - веб-адрес (URL) сервера, например, "http://server:80";
//
Функция ПолучитьАдресСервера() Экспорт
	
	Возврат ServerURL;
	
КонецФункции

// ПолучитьИдентификаторСобытия возвращает идентификатор события внешнего запроса, например,
// для случая с GitLab идентификатором является значение поля "checkout_sha" схемы (тела) запроса. 
// 
// Возвращаемое значение:
// 	Строка - идентификатор события;
//
Функция ПолучитьИдентификаторСобытия() Экспорт
	
	Возврат CheckoutSHA;
	
КонецФункции

// ПолучитьКоммиты возвращает информацию о коммитах.
// При отсутствии коммитов выбрасывает исключение.
// 
// Возвращаемое значение:
// 	Массив из Структура - информация о коммитах:
// * Id - Строка - идентификатор коммита (commit SHA); 
// * Date - Дата - дата коммита;
//
Функция ПолучитьКоммиты() Экспорт
	
	Если ( НЕ ЗначениеЗаполнено(Commits) ) Тогда
		
		ВызватьИсключение Логи.Сообщения().NO_COMMITS;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияВызовСервера.ТаблицаЗначенийВМассив( Commits.Выгрузить() );
	
КонецФункции

//// ПолучитьКоммит возвращает информацию запрашиваемого коммита.
//// При отсутствии коммита выбрасывает исключение.
//// 
//// Parameters:
//// 	Идентификатор - Строка - хеш коммита (commit SHA);
//// 	
//// Возвращаемое значение:
//// 	ОбработкаТабличнаяЧастьСтрока.ВнешнийЗапрос.Commits - информация о выбранном коммите;
////
//Функция ПолучитьКоммит( Знач Идентификатор ) Экспорт
//	
//	Для Каждого Коммит Из ПолучитьКоммиты() Цикл
//
//		Если ( Коммит.Id <> Идентификатор ) Тогда
//			
//			Продолжить;
//			
//		КонецЕсли;
//		
//		Возврат Коммит;
//		
//	КонецЦикла;
//
//	ВызватьИсключение Logs.Messages().NO_COMMIT;
//	
//КонецФункции

// ПолучитьМодифицированныеФайлы возвращает список с информацией обо всех измененных файлах в разрезе коммитов.
// При отсутствии связанного коммита выбрасывает исключение.
// 
// Возвращаемое значение:
// 	Массив из Структура - модифицированные Результат:
// * Id - Строка - идентификатор коммита (commit SHA); 
// * Date - Дата - дата модификации;
// * FilePath - Строка - относительный путь к файлу внешнего репозитория,
// 							например, "Каталог с отчетами и обработками/Внешняя Обработка 1.epf";
//
Функция ПолучитьМодифицированныеФайлы() Экспорт
	
	Результат = ModifiedFiles.Выгрузить();
	
	Результат.Колонки.Добавить( "Date", Новый ОписаниеТипов("Дата") );
	
	Для Каждого Файл Из Результат Цикл
		
		Коммит = Commits.Найти( Файл.Id, "Id" );
		
		Если Коммит = Неопределено Тогда
			
			// TODO сделать сообщение более дружелюбным? может добавить хэш коммита?
			
			ВызватьИсключение Логи.Сообщения().NO_COMMIT;
			
		КонецЕсли;
		
		Файл.Date = Коммит.Date;
		
	КонецЦикла;

	Возврат ОбщегоНазначенияВызовСервера.ТаблицаЗначенийВМассив( Результат );
	
КонецФункции

// ПолучитьПредставленияСхемМаршрутовКИсполнению возвращает схемы маршрутов в формате JSON
// к исполнению в разрезе коммитов. При конфликте схем в одном коммите приоритет за пользовательской схемой маршрутов.
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - десериализованные маршруты в разрезе коммитов:
// 	* Ключ - Строка - идентификатор коммита (commit SHA);
// 	* Значение - Строка - схема маршрутов в формате JSON;
//
Функция ПолучитьПредставленияСхемМаршрутовКИсполнению() Экспорт
	
	Схемы = ПолучитьОбработанныеСхемыМаршрутов();

	Результат = Новый Соответствие();
	
	Для Каждого КлючИЗначение Из Схемы Цикл
		
		Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.JSON);
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

// ПолучитьСвойстваСхемМаршрутовКИсполнению возвращает свойства схем маршрутов к исполнению в разрезе коммитов.
// При конфликте схем в одном коммите приоритет за пользовательской схемой маршрутов.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - представление схем маршрутов в формате JSON в разрезе коммитов:
// 	* Ключ - Строка - идентификатор коммита (commit SHA);
// 	* Значение - Структура - схема маршрутов:
// 		** JSON - Строка - схема маршрутов в формате JSON;
// 		** IsCustom - Булево - признак пользовательской схемы маршрутов;
//
Функция ПолучитьСвойстваСхемМаршрутовКИсполнению() Экспорт
	
	Схемы = ПолучитьОбработанныеСхемыМаршрутов();

	Результат = Новый Соответствие();
	
	Для Каждого КлючИЗначение Из Схемы Цикл
		
		НоваяМаршрутизация = Новый Структура();
		НоваяМаршрутизация.Вставить( "JSON", КлючИЗначение.Значение.JSON );
		НоваяМаршрутизация.Вставить( "IsCustom", КлючИЗначение.Значение.IsCustom );
		
		Результат.Вставить( КлючИЗначение.Ключ, НоваяМаршрутизация );
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// ПолучитьПредставлениеСхемыМаршрутов возвращает представление схемы маршрутов в формате JSON.
// 
// Параметры:
// 	Идентификатор - Строка - хеш коммита (commit SHA);
// 	ЭтоПользовательскаяСхема - Булево - признак пользовательской схемы маршрутов;
// 	
// Возвращаемое значение:
// 	Строка - схема маршрутов в формате JSON или пустая строка, если схема не найдена;
//
Функция ПолучитьПредставлениеСхемыМаршрутов( Знач Идентификатор, Знач ЭтоПользовательскаяСхема = Ложь ) Экспорт
	
	Схемы = НайтиСхемыМаршрутов( Идентификатор, ЭтоПользовательскаяСхема );
	
	Если ( НЕ ЗначениеЗаполнено(Схемы) ) Тогда
		
		Возврат ПустаяСхемаМаршрутов();
		
	КонецЕсли;
	
	Возврат Схемы[0].JSON;
	
КонецФункции

// ДобавитьСхемуМаршрутов добавляет новую схему маршрутов в формате JSON
// или обновляет существующую с заданным идентификатором.
//
// Параметры:
// 	Идентификатор - Строка - хеш коммита (commit SHA);
// 	Схема - Строка - схема маршрутов в формате JSON;
// 	ЭтоПользовательскаяСхема - Булево - признак пользовательской схемы маршрутов;
//
Процедура ДобавитьСхемуМаршрутов( Знач Идентификатор, Знач Схема, Знач ЭтоПользовательскаяСхема = Ложь ) Экспорт
	
	Схемы = НайтиСхемыМаршрутов( Идентификатор, ЭтоПользовательскаяСхема );
	
	Если ( НЕ ЗначениеЗаполнено(Схемы) ) Тогда
		
		Схемы.Добавить( Routes.Добавить() );
		
	КонецЕсли;
		
	Для Каждого ТекущаяСхема Из Схемы Цикл
		
		ТекущаяСхема.Id = Идентификатор;
		ТекущаяСхема.JSON = Схема;
		ТекущаяСхема.IsCustom = ЭтоПользовательскаяСхема;
		
	КонецЦикла;
	
КонецПроцедуры

// УдалитьСхемуМаршрутов удаляет схему маршрутов по заданному идентификатору.
// 
// Параметры:
// 	Идентификатор - Строка - хеш коммита (commit SHA);
// 	ЭтоПользовательскаяСхема - Булево - признак пользовательской схемы маршрутов;
//
Процедура УдалитьСхемуМаршрутов( Знач Идентификатор, Знач ЭтоПользовательскаяСхема = Ложь ) Экспорт
	
	Схемы = НайтиСхемыМаршрутов( Идентификатор, ЭтоПользовательскаяСхема );
	
	Для Каждого ТекущаяСхема Из Схемы Цикл
		
		Routes.Удалить( ТекущаяСхема );
		
	КонецЦикла;
	
КонецПроцедуры

// TODO описание не ахти
// 
// ЗаполнитьСхемыМаршрутов предназначена для формирования схем маршрутов в формате JSON из двоичных данных
// и привязкой их к соответствующему коммиту с последующим заполнением Routes.
// 
// Параметры:
// 	Данные - Массив из см. ФайлыВнешнегоХранилища.ОписаниеФайла
//  ИмяФайла - Строка - имя файла со схемами маршрутов;
//
Процедура ЗаполнитьСхемыМаршрутов( Знач Данные, Знач ИмяФайла ) Экспорт
	
	Если ( НЕ ЗначениеЗаполнено(Данные) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СводныеДанные = ОбщегоНазначенияВызовСервера.МассивВТаблицуЗначений( Данные );
	
	Для Каждого Коммит Из ПолучитьКоммиты() Цикл
		
		МетаданныеСхем = СводныеДанные.НайтиСтроки( ОтборСхемМаршрутов(Коммит.Id, ИмяФайла) );
		
		Если ( НЕ ЗначениеЗаполнено(МетаданныеСхем) ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОписаниеФайла = ОбщегоНазначенияВызовСервера.СтрокаТаблицыЗначенийВСтруктуру( МетаданныеСхем[0] ); // см. ФайлыВнешнегоХранилища.ОписаниеФайла
		
		ДобавитьСхемуМаршрутов( Коммит.Id, ПолучитьСтрокуИзДвоичныхДанных(ОписаниеФайла.BinaryData) );
		
	КонецЦикла;
	
КонецПроцедуры

// Сериализовать возвращает результат сериализации объекта внешнего запроса.
// 
// Возвращаемое значение:
//  Строка - результат сериализации;
//
Функция Сериализовать() Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON( Запись, ВСтруктуру(), НазначениеТипаXML.Явное );
	
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// УстановитьИсточникЗапроса устанавливает тип источника запроса на основе переданного значения.
//
// Параметры:
//	Источник - ПеречислениеСсылка.ИсточникЗапроса - источник запроса;
//
Процедура УстановитьИсточникЗапроса( Знач Источник ) Экспорт
	
	Type = Источник;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ВСтруктуру возвращает универсальную коллекцию Структура, содержащую информацию об объекте, включая его свойства
// и данные, необходимые для дальнейшей обработки.
// 
// Возвращаемое значение:
//	см. ВнешниеЗапросы.ДанныеЗаполнения
//
Функция ВСтруктуру()
	
	Результат = ВнешниеЗапросы.ДанныеЗаполнения();
	ЗаполнитьЗначенияСвойств( Результат, ЭтотОбъект );
	Результат.Commits = ТаблицаЗначенийВМассив(Commits.Выгрузить());
	Результат.ModifiedFiles = ТаблицаЗначенийВМассив(ModifiedFiles.Выгрузить());
	Результат.Routes = ТаблицаЗначенийВМассив(Routes.Выгрузить());
	
	Возврат Результат;
	
КонецФункции

Функция ПустаяСхемаМаршрутов()
	
	Возврат "";
	
КонецФункции

Функция ПолучитьОбработанныеСхемыМаршрутов()

	Возврат СгруппироватьСхемыМаршрутовПоКоммитам( ПолучитьОтсортированныеСхемыМаршрутов(Routes) );
	
КонецФункции

Процедура ЗаполнитьДанными(Знач ДанныеЗаполнения)

	ЗаполнитьЗначенияСвойств( ЭтотОбъект, ДанныеЗаполнения );
	
	Для Каждого Коммит Из ДанныеЗаполнения.Commits Цикл
		
		ЗаполнитьЗначенияСвойств( Commits.Добавить(), Коммит );
		
	КонецЦикла;
	
	Для Каждого ИзмененныйФайл Из ДанныеЗаполнения.ModifiedFiles Цикл
		
		ЗаполнитьЗначенияСвойств( ModifiedFiles.Добавить(), ИзмененныйФайл );
		
	КонецЦикла;
	
	Для Каждого СхемаМаршрута Из ДанныеЗаполнения.Routes Цикл
		
		ЗаполнитьЗначенияСвойств( Routes.Добавить(), СхемаМаршрута );
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСхемыМаршрутов( Знач Идентификатор, Знач ЭтоПользовательскаяСхема )
	
	Отбор = Новый Структура( "Id, IsCustom", Идентификатор, ЭтоПользовательскаяСхема );
	
	Возврат Routes.НайтиСтроки( Отбор );
	
КонецФункции

Функция ПолучитьОтсортированныеСхемыМаршрутов( Знач Схемы )
	
	Результат = Routes.Выгрузить();
	Результат.Сортировать( "IsCustom" );
	
	Возврат Результат;
	
КонецФункции

Функция СгруппироватьСхемыМаршрутовПоКоммитам( Знач Схемы )
	
	Результат = Новый Соответствие();
	
	Для Каждого ТекущаяСхема Из Схемы Цикл
		
		НоваяСхема = Новый Структура();
		НоваяСхема.Вставить( "JSON", ТекущаяСхема.JSON );
		НоваяСхема.Вставить( "IsCustom", ТекущаяСхема.IsCustom );
		
		Результат.Вставить( ТекущаяСхема.Id, НоваяСхема );
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЗначенийВМассив( Знач ТаблицаЗначений )

	Возврат ОбщегоНазначенияВызовСервера.ТаблицаЗначенийВМассив( ТаблицаЗначений );

КонецФункции

Функция ОтборСхемМаршрутов( Знач Идентификатор, Знач ПутьКФайлу )
	
	Результат = Новый Структура();
	Результат.Вставить( "CommitSHA", Идентификатор );
	Результат.Вставить( "FilePath", ПутьКФайлу );
	Результат.Вставить( "Action", "" );
	Результат.Вставить( "ErrorInfo", Неопределено );
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
