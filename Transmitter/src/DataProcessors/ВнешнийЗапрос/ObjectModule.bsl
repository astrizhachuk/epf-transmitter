// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполнить выполняет заполнение свойств объекта по данным заполнения.
// 
// Параметры:
//  Данные - см. ВнешниеЗапросы.ДанныеЗаполнения
// 
Процедура Заполнить( Знач Данные ) Экспорт
	
	Если ( ТипЗнч(Данные) <> Тип("Структура") ) Тогда
		
		ВызватьИсключение Логи.Сообщения().INVALID_DATA_TYPE;
		
	КонецЕсли;
	
	ЗаполнитьДанными( Данные );
	
КонецПроцедуры

// ПолучитьТело возвращает данные внешнего запроса в формате JSON.
// 
// Возвращаемое значение:
// 	Строка - тело внешнего запроса в формате JSON;
//
Функция ПолучитьТело() Экспорт
	
	Возврат JSON;
	
КонецФункции

// ПолучитьИдентификаторПроекта возвращает идентификатор проекта.
// 
// Возвращаемое значение:
// 	Строка - идентификатор проекта;
//
Функция ПолучитьИдентификаторПроекта() Экспорт
	
	Возврат ProjectId;
	
КонецФункции

// ПолучитьАдресПроекта возвращает URL проекта.
// 
// Возвращаемое значение:
// 	Строка - веб-адрес (URL) проекта, например, "http://server:80/root/example";
//
Функция ПолучитьАдресПроекта() Экспорт
	
	Возврат АдресПроекта;
	
КонецФункции

// ПолучитьАдресСервера возвращает URL сервера.
// 
// Возвращаемое значение:
// 	Строка - веб-адрес (URL) сервера, например, "http://server:80";
//
Функция ПолучитьАдресСервера() Экспорт
	
	Возврат ServerURL;
	
КонецФункции

// ПолучитьДатуСобытия возвращает дату события внешнего запроса.
// Например, для случая с GitLab дата заполняется из поля "timestamp" соответствующего коммита,
// определяемого по совпадению идентификатора "checkout_sha" с "commits[].id".
//
// Возвращаемое значение:
//   Дата - дата события.
//
Функция ПолучитьДатуСобытия() Экспорт
    
    Возврат Дата;
    
КонецФункции

// ПолучитьИдентификаторСобытия возвращает идентификатор события внешнего запроса. Например,
// для случая с GitLab идентификатором является значение поля "checkout_sha" схемы (тела) запроса. 
// 
// Возвращаемое значение:
// 	Строка - идентификатор события;
//
Функция ПолучитьИдентификаторСобытия() Экспорт
	
	Возврат Идентификатор;
	
КонецФункции

// ПолучитьСообщениеСобытия возвращает сообщение, связанное с событием внешнего запроса.
// Например, для случая с GitLab сообщение формируется на основе поля "message" схемы (тела) запроса.
// Если поле "message" не заполнено (null), то используется заголовок ("title") соответствующего коммита,
// определяемого по совпадению идентификатора "checkout_sha" с "commits[].id".
//
// Возвращаемое значение:
//   Строка - сообщение события.
//
Функция ПолучитьСообщениеСобытия() Экспорт
	
    Возврат Сообщение;
    
КонецФункции

// ПолучитьКоммиты возвращает информацию о коммитах.
// При отсутствии коммитов выбрасывает исключение.
// 
// Возвращаемое значение:
// 	Массив из Структура - информация о коммитах:
// * Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита (commit SHA). 
// * Дата - Дата - дата коммита.
// * Заголовок - Строка - заголовок коммита.
//
Функция ПолучитьКоммиты() Экспорт
	
	Если ( НЕ ЗначениеЗаполнено(Коммиты) ) Тогда
		
		ВызватьИсключение Логи.Сообщения().NO_COMMITS;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияВызовСервера.ТаблицаЗначенийВМассив( Коммиты.Выгрузить() );
	
КонецФункции

// ПолучитьКоммит возвращает информацию о коммите.
// При отсутствии коммита выбрасывает исключение.
// 
// Параметры:
// 	Идентификатор - Строка - идентификатор коммита (commit SHA).
// 	
// Возвращаемое значение:
// 	Структура - информация о коммите:
// * Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита (commit SHA). 
// * Дата - Дата - дата коммита.
// * Заголовок - Строка - заголовок коммита.
//
Функция ПолучитьКоммит( Знач Идентификатор ) Экспорт
	
	Для Каждого Коммит Из ПолучитьКоммиты() Цикл

		Если ( Коммит.Идентификатор <> Идентификатор ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Возврат Коммит;
		
	КонецЦикла;

	ВызватьИсключение Логи.Сообщения().NO_COMMIT;
	
КонецФункции

// ПолучитьМодифицированныеФайлы возвращает список с информацией обо всех измененных файлах в разрезе коммитов.
// При отсутствии связанного коммита выбрасывает исключение.
// 
// Возвращаемое значение:
// 	Массив из Структура - модифицированные Результат:
// * Идентификатор - Строка - идентификатор коммита (commit SHA); 
// * Дата - Дата - дата модификации;
// * FilePath - Строка - относительный путь к файлу внешнего репозитория,
// 							например, "Каталог с отчетами и обработками/Внешняя Обработка 1.epf";
//
Функция ПолучитьМодифицированныеФайлы() Экспорт
	
	Результат = ModifiedFiles.Выгрузить();
	
	Результат.Колонки.Добавить( "Дата", Новый ОписаниеТипов("Дата") );
	
	Для Каждого Файл Из Результат Цикл
		
		Коммит = Коммиты.Найти( Файл.Идентификатор, "Идентификатор" );
		
		Если Коммит = Неопределено Тогда
			
			// TODO сделать сообщение более дружелюбным? может добавить хэш коммита?
			
			ВызватьИсключение Логи.Сообщения().NO_COMMIT;
			
		КонецЕсли;
		
		Файл.Дата = Коммит.Дата;
		
	КонецЦикла;

	Возврат ОбщегоНазначенияВызовСервера.ТаблицаЗначенийВМассив( Результат );
	
КонецФункции

// ПолучитьПредставленияСхемМаршрутовКИсполнению возвращает представления схем маршрутов в формате JSON
// к исполнению в разрезе коммитов. При совпадении нескольких схем для одного коммита
// приоритет за пользовательской схемой маршрутов.
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - десериализованные маршруты в разрезе коммитов:
// 	* Ключ - Строка - идентификатор коммита (commit SHA);
// 	* Значение - Строка - схема маршрутов в формате JSON;
//
Функция ПолучитьПредставленияСхемМаршрутовКИсполнению() Экспорт
	
	Схемы = ПолучитьСхемыМаршрутовКИсполнению();

	Результат = Новый Соответствие();
	
	Для Каждого КлючИЗначение Из Схемы Цикл
		
		Результат.Вставить( КлючИЗначение.Ключ, КлючИЗначение.Значение.Представление );
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

// ПолучитьПредставлениеСхемыМаршрутов возвращает представление схемы маршрутов в формате JSON.
// 
// Параметры:
// 	Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита (commit SHA);
// 	Пользовательская - Булево - признак пользовательской схемы маршрутов;
// 	
// Возвращаемое значение:
// 	Строка - схема маршрутов в формате JSON или пустая строка, если схема не найдена;
//
Функция ПолучитьПредставлениеСхемыМаршрутов( Знач Идентификатор, Знач Пользовательская = Ложь ) Экспорт
	
	Схемы = НайтиСхемыМаршрутов( Идентификатор, Пользовательская );
	
	Если ( НЕ ЗначениеЗаполнено(Схемы) ) Тогда
		
		Возврат ПустаяСхемаМаршрутов();
		
	КонецЕсли;
	
	Возврат Схемы[0].Представление;
	
КонецФункции

// ПолучитьСхемуМаршрутовКИсполнению возвращает описание схемы маршрутов к исполнению в разрезе коммитов.
// При совпадении нескольких схем для одного коммита приоритет за пользовательской схемой маршрутов.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - представление схем маршрутов в формате JSON в разрезе коммитов:
// 	* Ключ - Строка - идентификатор коммита (commit SHA);
// 	* Значение - Структура - схема маршрутов:
// 		** Представление - Строка - схема маршрутов в формате JSON;
// 		** Пользовательская - Булево - признак пользовательской схемы маршрутов;
//
Функция ПолучитьОписанияСхемМаршрутовКИсполнению() Экспорт
	
	Схемы = ПолучитьСхемыМаршрутовКИсполнению();

	Результат = Новый Соответствие();
	
	Для Каждого КлючИЗначение Из Схемы Цикл
		
		Результат.Вставить(
			КлючИЗначение.Ключ, 
			НоваяСхемаМаршрута(КлючИЗначение.Значение.Представление, КлючИЗначение.Значение.Пользовательская) );
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// ДобавитьСхемуМаршрутов добавляет новую схему маршрутов в формате JSON
// или обновляет существующую с заданным идентификатором.
//
// Параметры:
// 	Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита (commit SHA);
// 	Схема - Строка - схема маршрутов в формате JSON;
// 	Пользовательская - Булево - признак пользовательской схемы маршрутов;
//
Процедура ДобавитьСхемуМаршрутов( Знач Идентификатор, Знач Схема, Знач Пользовательская = Ложь ) Экспорт
	
	Схемы = НайтиСхемыМаршрутов( Идентификатор, Пользовательская );
	
	Если ( НЕ ЗначениеЗаполнено(Схемы) ) Тогда
		
		Схемы.Добавить( СхемыМаршрутов.Добавить() );
		
	КонецЕсли;
		
	Для Каждого ТекущаяСхема Из Схемы Цикл
		
		ТекущаяСхема.Идентификатор = Идентификатор;
		ТекущаяСхема.Представление = Схема;
		ТекущаяСхема.Пользовательская = Пользовательская;
		
	КонецЦикла;
	
КонецПроцедуры

// УдалитьПользовательскиеСхемыМаршрутов удаляет все пользовательские схемы маршрутов.
//
Процедура УдалитьПользовательскиеСхемыМаршрутов() Экспорт
	
	Индекс = СхемыМаршрутов.Количество() - 1;
	
	Пока ( Индекс >= 0 ) Цикл
		
		Если ( СхемыМаршрутов[Индекс].Пользовательская ) Тогда
			
			СхемыМаршрутов.Удалить( Индекс );
			
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// УдалитьСхемуМаршрутов удаляет схему маршрутов по заданному идентификатору.
// 
// Параметры:
// 	Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита (commit SHA);
// 	Пользовательская - Булево - признак пользовательской схемы маршрутов;
//
Процедура УдалитьСхемуМаршрутов( Знач Идентификатор, Знач Пользовательская = Ложь ) Экспорт
	
	Схемы = НайтиСхемыМаршрутов( Идентификатор, Пользовательская );
	
	Для Каждого ТекущаяСхема Из Схемы Цикл
		
		СхемыМаршрутов.Удалить( ТекущаяСхема );
		
	КонецЦикла;
	
КонецПроцедуры

// TODO описание не ахти
// 
// ЗаполнитьСхемыМаршрутов предназначена для формирования схем маршрутов в формате JSON из двоичных данных
// и привязкой их к соответствующему коммиту с последующим заполнением Routes.
// 
// Параметры:
// 	Данные - Массив из см. ФайлыВнешнегоХранилища.ОписаниеФайла
//  ИмяФайла - Строка - имя файла со схемами маршрутов;
//
Процедура ЗаполнитьСхемыМаршрутов( Знач Данные, Знач ИмяФайла ) Экспорт
	
	Если ( НЕ ЗначениеЗаполнено(Данные) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СводныеДанные = ОбщегоНазначенияВызовСервера.МассивВТаблицуЗначений( Данные );
	
	Для Каждого Коммит Из ПолучитьКоммиты() Цикл
		
		МетаданныеСхем = СводныеДанные.НайтиСтроки( ОтборСхемМаршрутов(Коммит.Идентификатор, ИмяФайла) );
		
		Если ( НЕ ЗначениеЗаполнено(МетаданныеСхем) ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОписаниеФайла = ОбщегоНазначенияВызовСервера.СтрокаТаблицыЗначенийВСтруктуру( МетаданныеСхем[0] ); // см. ФайлыВнешнегоХранилища.ОписаниеФайла
		
		ДобавитьСхемуМаршрутов( Коммит.Идентификатор, ПолучитьСтрокуИзДвоичныхДанных(ОписаниеФайла.BinaryData) );
		
	КонецЦикла;
	
КонецПроцедуры

// Сериализовать возвращает результат сериализации объекта внешнего запроса.
// 
// Возвращаемое значение:
//  Строка - результат сериализации;
//
Функция Сериализовать() Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON( Запись, ВСтруктуру(), НазначениеТипаXML.Явное );
	
	Возврат Запись.Закрыть();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// УстановитьИсточникЗапроса устанавливает тип источника запроса на основе переданного значения.
//
// Параметры:
//	Источник - ПеречислениеСсылка.ИсточникЗапроса - источник запроса;
//
Процедура УстановитьИсточникЗапроса( Знач Источник ) Экспорт
	
	Type = Источник;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// НоваяСхемаМаршрута - это конструктор данных для описания схемы маршрутов.
// 
// Параметры:
//  Представление - Строка - схема маршрутов в формате JSON.
//  Пользовательская - Булево - признак пользовательской схемы маршрутов.
// 
// Возвращаемое значение:
//  Структура - описание схемы маршрута:
// * Представление - Строка - схема маршрутов в формате JSON
// * Пользовательская - Булево - признак пользовательской схемы маршрутов.	
// 
Функция НоваяСхемаМаршрута( Знач Представление, Знач Пользовательская )
	
	Результат = Новый Структура();
	Результат.Вставить( "Представление", Представление );
	Результат.Вставить( "Пользовательская", Пользовательская );
	
	Возврат Результат;
	
КонецФункции

// ВСтруктуру возвращает универсальную коллекцию Структура, содержащую информацию об объекте, включая его свойства
// и данные, необходимые для дальнейшей обработки.
// 
// Возвращаемое значение:
//	см. ВнешниеЗапросы.ДанныеЗаполнения
//
Функция ВСтруктуру()
	
	Результат = ВнешниеЗапросы.ДанныеЗаполнения();
	ЗаполнитьЗначенияСвойств( Результат, ЭтотОбъект );
	Результат.Коммиты = ТаблицаЗначенийВМассив(Коммиты.Выгрузить());
	Результат.ModifiedFiles = ТаблицаЗначенийВМассив(ModifiedFiles.Выгрузить());
	Результат.СхемыМаршрутов = ТаблицаЗначенийВМассив(СхемыМаршрутов.Выгрузить());
	
	Возврат Результат;
	
КонецФункции

Функция ПустаяСхемаМаршрутов()
	
	Возврат "";
	
КонецФункции

Функция ПолучитьСхемыМаршрутовКИсполнению()

	Возврат СгруппироватьСхемыМаршрутовПоКоммитам( ПолучитьОтсортированныеСхемыМаршрутов(СхемыМаршрутов) );
	
КонецФункции

Процедура ЗаполнитьДанными( Знач ДанныеЗаполнения )

	ЗаполнитьЗначенияСвойств( ЭтотОбъект, ДанныеЗаполнения );
	
	Для Каждого Коммит Из ДанныеЗаполнения.Коммиты Цикл
		
		ЗаполнитьЗначенияСвойств( Коммиты.Добавить(), Коммит );
		
	КонецЦикла;
	
	Для Каждого ИзмененныйФайл Из ДанныеЗаполнения.ModifiedFiles Цикл
		
		ЗаполнитьЗначенияСвойств( ModifiedFiles.Добавить(), ИзмененныйФайл );
		
	КонецЦикла;
	
	Для Каждого СхемаМаршрута Из ДанныеЗаполнения.СхемыМаршрутов Цикл
		
		ЗаполнитьЗначенияСвойств( СхемыМаршрутов.Добавить(), СхемаМаршрута );
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСхемыМаршрутов( Знач Идентификатор, Знач Пользовательская )
	
	Отбор = Новый Структура( "Идентификатор, Пользовательская", Идентификатор, Пользовательская );
	
	Возврат СхемыМаршрутов.НайтиСтроки( Отбор );
	
КонецФункции

Функция ПолучитьОтсортированныеСхемыМаршрутов( Знач Схемы )
	
	Результат = СхемыМаршрутов.Выгрузить();
	Результат.Сортировать( "Пользовательская" );
	
	Возврат Результат;
	
КонецФункции

Функция СгруппироватьСхемыМаршрутовПоКоммитам( Знач Схемы )
	
	Результат = Новый Соответствие();
	
	Для Каждого Схема Из Схемы Цикл
		
		Результат.Вставить( Схема.Идентификатор, НоваяСхемаМаршрута(Схема.Представление, Схема.Пользовательская) );
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаЗначенийВМассив( Знач ТаблицаЗначений )

	Возврат ОбщегоНазначенияВызовСервера.ТаблицаЗначенийВМассив( ТаблицаЗначений );

КонецФункции

Функция ОтборСхемМаршрутов( Знач Идентификатор, Знач ПутьКФайлу )
	
	Результат = Новый Структура();
	Результат.Вставить( "CommitSHA", Идентификатор );
	Результат.Вставить( "FilePath", ПутьКФайлу );
	Результат.Вставить( "Action", "" );
	Результат.Вставить( "ErrorInfo", Неопределено );
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
