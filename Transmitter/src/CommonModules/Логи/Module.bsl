// @strict-types

#Область ПрограммныйИнтерфейс

// События возвращает список соответствий между кратким идентификатором типа события и его полным представлением.
// 
// Возвращаемое значение:
// 	Структура - Ключом является краткий идентификатор события, а Значением - его полное строковое представление:
// 	* ВебСервис - Строка - идентификатор для событий веб-сервиса;
// 	* ОбработкаДанных - Строка - идентификатор процессов обработки данных;
//
Функция События() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить( "ВебСервис", НСтр("ru = 'Веб-сервис';en = 'Web-service'") );
	Результат.Вставить( "ОбработкаДанных", НСтр("ru = 'Обработка данных';en = 'Data processing'") );
	
	Возврат Результат;
	
КонецФункции

// ПредставленияСобытий возвращает перечень представлений, зарегистрированных в методе см. События.
// 
// Возвращаемое значение:
//  Массив из Строка - список текстовых представлений;
//
Функция ПредставленияСобытий() Экспорт
	
	Результат = Новый Массив(); // Массив из Строка
	
	Для Каждого Событие Из События() Цикл
		
		Представление = Событие.Значение;
		
		Если ( ТипЗнч(Представление) = Тип("Строка") ) Тогда
			
			Результат.Добавить( Представление );
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// TODO дооформить

// Сообщения возвращает список соответствий между кратким идентификатором сообщения и его полным представлением.
//  
// Возвращаемое значение:
// 	Структура - Ключом является идентификатор сообщения, а Значением - полный текст сообщения:
//	* ДанныеСохранены - Строка
// 	* ЗапросГитлабОбработан - Строка
// 	* МаршрутОтсутствует - Строка
// 	* НеверноеСобытие - Строка
//  * ОтправкаФайлов - Строка
//  * ОшибкаЗагрузкиФайла - Строка
// 	* ПолученЗапросГитлаб - Строка
// 	* ТокенНеНайден - Строка
//
Функция Сообщения() Экспорт

	Результат = Новый Структура();
	Результат.Вставить( "ДанныеСохранены", НСтр("ru = 'Данные сохранены';en = 'Data saved'") );
	Результат.Вставить( "ЗапросГитлабОбработан", НСтр(
		"ru = 'Обработка запроса от сервиса GitLab завершена';
		|en = 'Processing of the request from the GitLab service is completed'") );
	Результат.Вставить( "МаршрутОтсутствует", НСтр(
		"ru = 'Не задан маршрут доставки файла';en = 'File delivery route not specified'") );
	Результат.Вставить( "НеверноеСобытие", НСтр(
		"ru = 'Событие в заголовке запроса не совпадает с конечной точкой';
		|en = 'Event in the request header mismatches the endpoint'"));
	Результат.Вставить( "ОтправкаФайлов", НСтр(
		"ru = 'Запущено заданий на отправку файла: %1';en = 'File sending jobs started: %1'") );
	Результат.Вставить( "ОшибкаЗагрузкиФайла", НСтр(
		"ru = 'Ошибка загрузки файла: URL: %1: Описание ошибки: %2';
		|en = 'File download error: URL: %1: Error description: %2'") );
	Результат.Вставить( "ПолученЗапросГитлаб", НСтр(
		"ru = 'Получен запрос от сервиса GitLab';
		|en = 'Request received from GitLab service'"));
	Результат.Вставить( "ТокенНеНайден", НСтр("ru = 'Токен не найден';en = 'Token not found'") );

	Результат.Вставить( "MESSAGE_ENABLED", НСтр( "ru = 'обработка запросов включена';en = 'request handler enabled'" ) );
	Результат.Вставить( "MESSAGE_DISABLED", НСтр( "ru = 'обработка запросов отключена';en = 'request handler disabled'" ) );
	Результат.Вставить( "CUSTOM_RECEIVED", НСтр("ru = 'получен Пользовательская запрос';en = 'custom request received'") );
	Результат.Вставить( "GITLAB_DISABLED", НСтр("ru = 'обработка запросов от внешнего хранилища отключена';en = 'external storage request disabled'") );
	Результат.Вставить( "CUSTOM_DISABLED", НСтр("ru = 'обработка пользовательских запросов отключена';en = 'custom request disabled'") );
	Результат.Вставить( "REQUEST_HANDLER_NOT_FOUND", НСтр("ru = 'обработчик внешних запросов не найден';en = 'external request handler not found'") );
	Результат.Вставить( "NO_EVENT", НСтр("ru = 'в запросе нет события';en = 'no event in the request'") );
	Результат.Вставить( "NO_TOKEN", НСтр("ru = 'в запросе нет токена';en = 'no secret token in the request'") );

	Результат.Вставить( "NO_REQUEST_DATA", НСтр("ru = 'нет данных запроса';en = 'no request data'") );	
	Результат.Вставить( "NO_UPLOAD_DATA", НСтр("ru = 'нет данных для отправки';en = 'no data to upload'") );
	Результат.Вставить( "NO_COMMITS", НСтр("ru = 'нет коммитов';en = 'no commits'") );
	Результат.Вставить( "NO_COMMIT", НСтр("ru = 'нет коммита';en = 'no commit'") );
	Результат.Вставить( "DUMP_ERROR", НСтр("ru = 'ошибка сохранения данных: %1: Описание ошибки:" + Chars.LF + "%2';en = 'dump error: %1: error description:" + Chars.LF + "%2'") );
	Результат.Вставить( "INVALID_DATA_TYPE", НСтр("ru = 'недопустимый тип данных';en = 'invalid data type'") );
	Результат.Вставить( "NO_RAWPATH", НСтр( "ru = 'Отсутствует путь к RAW-файлу';en = 'Path to RAW file missing'") );
	Результат.Вставить( "DUPLICATE_PROJECTS", НСтр( "ru = 'Обнаружены повторяющиеся проекты.';en = 'Duplicate projects found.'" ) );
	Результат.Вставить( "BAD_JSON_DATA", НСтр( "ru = 'JSON: обязательные поля не заполнены';en = 'JSON: required fields are not filled'" ) );
	Результат.Вставить( "DUPLICATE_BASE_URL", НСтр( "ru = 'обнаружены повторяющиеся адреса публикации базы данных: %1';en = 'duplicate database publishing URLs detected: %1'" ) );
	
	Возврат Результат;
	
КонецФункции

// Параметры возвращает набор дополнительных параметров логирования.
// 
// Параметры:
//  Идентификатор - Строка - необязательный дополнительный признак,
//  						который добавляется к комментарию записи журнала регистрации в виде префикса в формате:
//							"[ идентификатор ]: текст сообщения";
//  Объект - Неопределено, ЛюбаяСсылка - необязательная ссылка на объект, метаданные которого
//  						будут добавлены в запись журнала регистрации;
//  Ответ - Неопределено, HTTPСервисОтвет - необязательный HTTPСервисОтвет, который используется
//  										для дополнения текста комментария по данным Ответа;
// 
// Возвращаемое значение:
//  Структура - дополнительные параметры логирования:
// * Идентификатор - Строка - дополнительный идентификатор сообщения;
// * Объект - Неопределено, ЛюбаяСсылка - ссылка на логируемый объект;
// * Ответ - Неопределено, HTTPСервисОтвет - ответ веб-сервиса, для дополнения текста комментария;
//
Функция Параметры( Знач Идентификатор = "", Знач Объект = Неопределено, Знач Ответ = Неопределено ) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить( "Идентификатор", Идентификатор );
	Результат.Вставить( "Объект", Объект );
	Результат.Вставить( "Ответ", Ответ );
	
	Возврат Результат;
	
КонецФункции

// Информация выполняет регистрацию записи в журнале регистрации уровня Информация
// и возвращает текст комментария добавляемой записи журнала регистрации.
// 
// Параметры:
//  Событие - Строка - идентификатор события журнала регистрации, см. События;
//  Сообщение - Строка - текст сообщения, см. Сообщения;
//  Параметры - см. Параметры
// 
// Возвращаемое значение:
//  Строка - текст комментария из записи журнала регистрации;
//
Функция Информация( Знач Событие, Знач Сообщение, Знач Параметры = Неопределено ) Экспорт
	
	Дополнительно = Дополнительно( Параметры );
	
	Комментарий = ПолучитьКомментарий( Сообщение, Дополнительно );
	
	Записать( Событие, УровеньЖурналаРегистрации.Информация, Комментарий, Дополнительно );
	
	Возврат Комментарий;
	
КонецФункции

// Ошибка выполняет регистрацию записи в журнале регистрации уровня Ошибка
// и возвращает текст комментария добавляемой записи журнала регистрации.
// 
// Параметры:
//  Событие - Строка - идентификатор события журнала регистрации, см. События;
//  Сообщение - Строка - текст сообщения, см. Сообщения;
//  Параметры - см. Параметры
// 
// Возвращаемое значение:
//  Строка - текст комментария из записи журнала регистрации;
//
Функция Ошибка( Знач Событие, Знач Сообщение, Знач Параметры = Неопределено ) Экспорт
	
	Дополнительно = Дополнительно( Параметры );
	
	Комментарий = ПолучитьКомментарий( Сообщение, Дополнительно );
	
	Записать( Событие, УровеньЖурналаРегистрации.Ошибка, Комментарий, Дополнительно );
	
	Возврат Комментарий;
	
КонецФункции

// ПолучитьИсториюСобытий возвращает модифицированные данные журнала регистрации: добавляется КодСостояния,
// заполняемый по данным текста комментария, с удалением дублирующейся информации из текста комментария.
// 
// Параметры:
//  События - см. ПредставленияСобытий 
//  Отбор - см. ПолучитьДанныеЖурналаРегистрации.Отбор
// 
// Возвращаемое значение:
//  см. ИсторияСобытий
//
Функция ПолучитьИсториюСобытий( Знач События, Знач Отбор ) Экспорт
	
	ЖурналРегистрации = ПолучитьДанныеЖурналаРегистрации( Отбор );
	
	Результат = ИсторияСобытий( ЖурналРегистрации );
	
	Для Каждого Запись Из ЖурналРегистрации Цикл
		
		Если ( События.Найти(Запись.Событие) = Неопределено ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяЗапись = Результат.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяЗапись, Запись );
		
		НоваяЗапись.КодСостояния = ПолучитьКодСостояния( Запись.Комментарий );
		
		НоваяЗапись.Комментарий = ПолучитьКомментарийБезКодаСостояния( Запись.Комментарий, НоваяЗапись.КодСостояния );
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Дополнительно( Знач Параметры )
	
	Если ( ЗначениеЗаполнено(Параметры) ) Тогда
		
		Возврат Параметры;
		
	КонецЕсли;
	
	Возврат Параметры();
	
КонецФункции

Функция ДополнитьИдентификаторомЕслиСуществует( Знач Сообщение, Знач Дополнительно )
	
	Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры( Дополнительно, "Идентификатор", "" ); // Строка
	
	Если ( ПустаяСтрока(Идентификатор) ) Тогда
		
		Возврат Сообщение;
		
	КонецЕсли;
	
	Возврат СтрШаблон( "[ %1 ]: %2", Идентификатор, Сообщение );
	
КонецФункции

Функция ДополнитьКодомСтатусаЕслиСуществует( Знач Сообщение, Знач Дополнительно )
	
	Ответ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры( Дополнительно, "Ответ" ); // Неопределено, HTTPСервисОтвет
	
	Если ( Ответ = Неопределено ) Тогда
		
		Возврат Сообщение;
		
	КонецЕсли;
			
	Возврат ПолучитьПредставлениеКодСостояния( Ответ.КодСостояния ) + Сообщение;
		
КонецФункции

Функция ПолучитьКомментарий( Знач Сообщение, Знач Дополнительно )
	
	Результат = ДополнитьИдентификаторомЕслиСуществует( Сообщение, Дополнительно );
	
	Возврат ДополнитьКодомСтатусаЕслиСуществует( Результат, Дополнительно );
	
КонецФункции

Процедура Записать( Знач Событие, Знач Уровень, Знач Комментарий, Знач Дополнительно )
	
	Объект = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры( Дополнительно, "Объект" );
	
	Если ( Объект = Неопределено ) Тогда
		
		ЗаписьЖурналаРегистрации( Событие, Уровень, , , Комментарий );
		
	Иначе
		
		ЗаписьЖурналаРегистрации( Событие, Уровень, Метаданные.НайтиПоТипу(ТипЗнч(Объект)), Объект, Комментарий );
		
	КонецЕсли;
	
КонецПроцедуры

// ИсторияСобытий возвращает пустую ТаблицаЗначений данных журнала регистрации, расширенную дополнительными колонками.
// 
// Параметры:
//  ЖурналРегистрации - см. ПолучитьДанныеЖурналаРегистрации
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные журнала регистрации:
//	* Дата - Дата
//	* Уровень - УровеньЖурналаРегистрации
//	* Событие - Строка
//	* Данные - Произвольный
//	* ПредставлениеДанных - Строка
//	* ИмяПользователя - Строка
//	* ПредставлениеПриложения - Строка
//	* Комментарий - Строка
//	* КодСостояния - Число
//
Функция ИсторияСобытий( Знач ЖурналРегистрации )
	
	Результат = ЖурналРегистрации.СкопироватьКолонки();
	
	Результат.Колонки.Добавить( "КодСостояния", Новый ОписаниеТипов("Число") );
	
	Возврат Результат;
	
КонецФункции

// ПолучитьДанныеЖурналаРегистрации возвращает данные журнала регистрации по заданным условиям отбора.
// 
// Параметры:
//  Отбор - Структура - см. Отбор в глобальном методе ВыгрузитьЖурналРегистрации;
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные журнала регистрации, см. описание полей глобального метода ВыгрузитьЖурналРегистрации:
//	* Дата - Дата
//	* Уровень - УровеньЖурналаРегистрации
//	* Событие - Строка
//	* Данные - Произвольный
//	* ПредставлениеДанных - Строка
//	* ИмяПользователя - Строка
//	* ПредставлениеПриложения - Строка
//	* Комментарий - Строка
//
Функция ПолучитьДанныеЖурналаРегистрации( Знач Отбор )
	
	Колонки = "Дата,Уровень,Событие,Данные,ПредставлениеДанных,ИмяПользователя,ПредставлениеПриложения,Комментарий";
	
	Результат = Новый ТаблицаЗначений();
	
	ВыгрузитьЖурналРегистрации( Результат, Отбор, Колонки );
	
	Возврат Результат
	
КонецФункции

Функция Разделитель()
	
	Возврат ": ";
	
КонецФункции

Функция НадписьКодСостояния()
	
	Возврат НСтр( "ru = 'код состояния';en = 'status code'" );
	
КонецФункции

// ПолучитьКодСостояния возвращает код состояния, полученный из текста комментария.
// 
// Параметры:
//  Комментарий - Строка - текст комментария;
// 
// Возвращаемое значение:
//  Число - код состояния, 0 - если код не найден или неопределен;
//
Функция ПолучитьКодСостояния( Знач Комментарий )
	
	ДЛИНА_КОДА_СОСТОЯНИЯ = 3;
	
	Если ( СтрНайти(Комментарий, НадписьКодСостояния()) = 0 ) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов( "Число" );
	
	Результат = Сред(Комментарий, СтрДлина(НадписьКодСостояния()) + СтрДлина(Разделитель()) + 1, ДЛИНА_КОДА_СОСТОЯНИЯ);
	
	Возврат ( ОписаниеТипа.ПривестиЗначение(Результат) );
	
КонецФункции

Функция ПолучитьПредставлениеКодСостояния( Знач КодСостояния )
	
	Возврат СтрШаблон( "%1%2%3%2", НадписьКодСостояния(), Разделитель(), Строка(КодСостояния) );
	
КонецФункции

Функция ПолучитьКомментарийБезКодаСостояния( Знач Комментарий, Знач КодСостояния )
	
	Возврат ( СтрЗаменить(Комментарий, ПолучитьПредставлениеКодСостояния(КодСостояния), "") );
	
КонецФункции

#КонецОбласти
