// @strict-types

#Область ПрограммныйИнтерфейс

// События возвращает список соответствий между кратким идентификатором типа события и его полным представлением.
// 
// Возвращаемое значение:
// 	Структура - Ключом является краткий идентификатор события, а Значением - его полное строковое представление:
// 	* ВебСервис - Строка - идентификатор для событий веб-сервиса;
// 	* ОбработкаДанных - Строка - идентификатор процессов обработки данных;
// 	* Маршрутизация - Строка - идентификатор процессов маршрутизации;
// 	* ОтправкаФайлов - Строка - идентификатор процессов отправки файлов;
//
Функция События() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить( "ВебСервис", НСтр("ru = 'Веб-сервис';en = 'Web-service'") );
	Результат.Вставить( "ОбработкаДанных", НСтр("ru = 'Обработка данных';en = 'Data processing'") );
	Результат.Вставить( "Маршрутизация", НСтр("ru = 'Маршрутизация';en = 'Routing'") );
	Результат.Вставить( "ОтправкаФайлов", НСтр("ru = 'Отправка файлов';en = 'File sending'") );
	
	Возврат Результат;
	
КонецФункции

// ПредставленияСобытий возвращает перечень представлений, зарегистрированных в методе см. События.
// 
// Возвращаемое значение:
//  Массив из Строка - список текстовых представлений;
//
Функция ПредставленияСобытий() Экспорт
	
	Результат = Новый Массив(); // Массив из Строка
	
	Для Каждого Событие Из События() Цикл
		
		Представление = Событие.Значение;
		
		Если ( ТипЗнч(Представление) = Тип("Строка") ) Тогда
			
			Результат.Добавить( Представление );
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// TODO дооформить

// Сообщения возвращает список соответствий между кратким идентификатором сообщения и его полным представлением.
//  
// Возвращаемое значение:
// 	Структура - Ключом является идентификатор сообщения, а Значением - полный текст сообщения:
//	* ДанныеСохранены - Строка
// 	* ЗапросОбработан - Строка
// 	* ЗапросПолучен - Строка
// 	* МаршрутОтсутствует - Строка
// 	* НеверноеСобытие - Строка
// 	* ОбработкаЗапросовОтключена - Строка
//  * ЗапускОтправкиФайлов - Строка
//  * ОшибкаЗагрузкиФайла - Строка
//  * РезультатОтправкиФайла - Строка
//  * СхемаНеНайдена - Строка
// 	* ТокенНеНайден - Строка
//
Функция Сообщения() Экспорт

	Результат = Новый Структура();
	Результат.Вставить( "ДанныеСохранены", НСтр("ru = 'Данные сохранены';en = 'Data saved'") );
	Результат.Вставить( "ЗапросОбработан", НСтр(
		"ru = 'Обработка запроса завершена';
		|en = 'Request processing completed'") );
	Результат.Вставить( "ЗапросПолучен", НСтр("ru = 'Получен внешний запрос';en = 'External request received'"));
	Результат.Вставить( "МаршрутОтсутствует", НСтр(
		"ru = 'Не задан маршрут доставки файла';
		|en = 'File delivery route not specified'") );
	Результат.Вставить( "НеверноеСобытие", НСтр(
		"ru = 'Событие в заголовке запроса не совпадает с конечной точкой';
		|en = 'The event in the request header does not match the endpoint'"));
	Результат.Вставить( "ОбработкаЗапросовОтключена", НСтр(
		"ru = 'Обработка запросов отключена';
		|en = 'Request processing is disabled'") );
	Результат.Вставить( "ЗапускОтправкиФайлов", НСтр(
		"ru = 'Запущено заданий на отправку файлов: %1';
		|en = 'Files sending jobs started: %1'") );
	Результат.Вставить( "ОшибкаЗагрузкиФайла", НСтр(
		"ru = 'Ошибка загрузки файла: URL: %1: Описание ошибки: %2';
		|en = 'File download error: URL: %1: Error description: %2'") );
	Результат.Вставить("РезультатОтправкиФайла", НСтр(
		"ru = 'URL: %1; Имя файла: %2
		|" + НадписьКодСостояния() + ": %3
		|%4';
		|en = 'URL: %1; Filename: %2
		|" + НадписьКодСостояния() + ": %3
		|%4'"));
	Результат.Вставить( "СхемаНеНайдена", НСтр(
		"ru = 'Не найдена схема маршрутизации';
		|en = 'No routing scheme found'"));
	Результат.Вставить( "ТокенНеНайден", НСтр("ru = 'Токен не найден';en = 'Token not found'") );	


		
	Результат.Вставить( "REQUEST_HANDLER_NOT_FOUND", НСтр("ru = 'обработчик внешних запросов не найден';en = 'external request handler not found'") );
	Результат.Вставить( "NO_EVENT", НСтр("ru = 'в запросе нет события';en = 'no event in the request'") );
	Результат.Вставить( "NO_TOKEN", НСтр("ru = 'в запросе нет токена';en = 'no secret token in the request'") );

	Результат.Вставить( "NO_REQUEST_DATA", НСтр("ru = 'нет данных запроса';en = 'no request data'") );	
	Результат.Вставить( "NO_UPLOAD_DATA", НСтр("ru = 'нет данных для отправки';en = 'no data to upload'") );
	Результат.Вставить( "NO_COMMITS", НСтр("ru = 'нет коммитов';en = 'no commits'") );
	Результат.Вставить( "NO_COMMIT", НСтр("ru = 'нет коммита';en = 'no commit'") );
	Результат.Вставить( "DUMP_ERROR", НСтр("ru = 'ошибка сохранения данных: %1: Описание ошибки:" + Chars.LF + "%2';en = 'dump error: %1: error description:" + Chars.LF + "%2'") );
	Результат.Вставить( "INVALID_DATA_TYPE", НСтр("ru = 'недопустимый тип данных';en = 'invalid data type'") );
	Результат.Вставить( "NO_RAWPATH", НСтр( "ru = 'Отсутствует путь к RAW-файлу';en = 'Path to RAW file missing'") );
	Результат.Вставить( "DUPLICATE_PROJECTS", НСтр( "ru = 'Обнаружены повторяющиеся проекты.';en = 'Duplicate projects found.'" ) );
	Результат.Вставить( "BAD_JSON_DATA", НСтр( "ru = 'JSON: обязательные поля не заполнены';en = 'JSON: required fields are not filled'" ) );
	Результат.Вставить( "DUPLICATE_BASE_URL", НСтр( "ru = 'обнаружены повторяющиеся адреса публикации базы данных: %1';en = 'duplicate database publishing URLs detected: %1'" ) );
	
	Возврат Результат;
	
КонецФункции

// КонтекстОтветаСервиса формирует набор дополнительных параметров логирования для ответа HTTP-сервиса.
// 
// Шаблон комментария:
//  Код состояния: <КодСостояния>: <Сообщение>
//
// Параметры:
//  Ответ - HTTPСервисОтвет - ответ HTTP-сервиса, из которого в комментарий добавляется код состояния.
//  МетаданныеСервиса - ОбъектМетаданныхHTTPСервис - метаданные HTTP-сервиса, из которых в комментарий
//  												добавляется имя сервиса.
// 
// Возвращаемое значение:
//  Структура - дополнительные параметры логирования:
//	* Ответ - HTTPСервисОтвет - ответ HTTP-сервиса, из которого в комментарий добавляется код состояния.
//	* МетаданныеСервиса - ОбъектМетаданныхHTTPСервис - метаданные HTTP-сервиса для записи в журнал регистрации.
//
Функция КонтекстОтветаСервиса( Знач Ответ, Знач МетаданныеСервиса ) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить( "Ответ", Ответ );
	Результат.Вставить( "МетаданныеСервиса", МетаданныеСервиса );
	
	Возврат Результат;
	
КонецФункции

// КонтекстОбработкиСобытия формирует набор дополнительных параметров логирования для обработчиков.
//
// Шаблон комментария:
//  [ <КлючСобытия> ]: <Сообщение>
//
// Параметры:
//  Объект - ЛюбаяСсылка - ссылка на объект, метаданные которого добавляются в запись журнала регистрации.
//  КлючСобытия - Строка - идентификатор данных для обработчика, который добавляется в комментарий.
//
// Возвращаемое значение:
//  Структура - дополнительные параметры логирования:
//	* Объект - ЛюбаяСсылка - ссылка на объект для записи в журнал регистрации.
//	* КлючСобытия - Строка - идентификатор данных для обработчика, который добавляется в комментарий.
//
Функция КонтекстОбработкиСобытия( Знач Объект, Знач КлючСобытия ) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить( "Объект", Объект );
	Результат.Вставить( "КлючСобытия", КлючСобытия );
	
	Возврат Результат;
	
КонецФункции

// КонтекстОбработкиФайла формирует набор дополнительных параметров логирования для событий, связанных с файлом.
//
// Шаблон комментария:
//  [ <КлючСобытия> ]: <ХешКоммита>: <ИмяФайла>: <Сообщение>
//
// Параметры:
//  Объект - ЛюбаяСсылка - ссылка на объект, метаданные которого добавляются в запись журнала регистрации.
//  КлючСобытия - Строка - идентификатор данных для обработчика, который добавляется в комментарий.
//  ХешКоммита - Строка - хеш коммита, который добавляется в комментарий.
//  ИмяФайла - Строка - имя файла, которое добавляется в комментарий.
//
// Возвращаемое значение:
//  Структура - дополнительные параметры логирования:
//	* Объект - ЛюбаяСсылка - ссылка на объект для записи в журнал регистрации.
//	* КлючСобытия - Строка - идентификатор данных для обработчика, который добавляется в комментарий.
//	* ХешКоммита - Строка - хеш коммита, который добавляется в комментарий.
//	* ИмяФайла - Строка - имя файла, которое добавляется в комментарий.
//
Функция КонтекстОбработкиФайла( Знач Объект, Знач КлючСобытия, Знач ХешКоммита, Знач ИмяФайла ) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить( "Объект", Объект );
	Результат.Вставить( "КлючСобытия", КлючСобытия );
	Результат.Вставить( "ХешКоммита", ХешКоммита );
	Результат.Вставить( "ИмяФайла", ИмяФайла );
	
	Возврат Результат;
	
КонецФункции

// Информация выполняет регистрацию записи в журнале регистрации уровня Информация
// и возвращает текст комментария добавляемой записи журнала регистрации.
// 
// Параметры:
//  Событие - Строка - идентификатор события журнала регистрации, см. События.
//  Сообщение - Строка - текст сообщения, см. Сообщения.
//  Параметры - Структура - см. описание возвращаемого значения в функциях-конструкторах параметров.
// 
// Возвращаемое значение:
//  Строка - итоговый текст комментария, записанный в журнал регистрации.
//
Функция Информация( Знач Событие, Знач Сообщение, Знач Параметры ) Экспорт

	Возврат Зарегистрировать( УровеньЖурналаРегистрации.Информация, Событие, Сообщение, Параметры );

КонецФункции

// Предупреждение выполняет регистрацию записи в журнале регистрации уровня Предупреждение
// и возвращает текст комментария добавляемой записи журнала регистрации.
// 
// Параметры:
//  Событие - Строка - идентификатор события журнала регистрации, см. События.
//  Сообщение - Строка - текст сообщения, см. Сообщения.
//  Параметры - Структура - см. описание возвращаемого значения в функциях-конструкторах параметров.
// 
// Возвращаемое значение:
//  Строка - итоговый текст комментария, записанный в журнал регистрации.
//
//@skip-check bsl-legacy-check-method-names-are-unique
Функция Предупреждение( Знач Событие, Знач Сообщение, Знач Параметры ) Экспорт

	Возврат Зарегистрировать( УровеньЖурналаРегистрации.Предупреждение, Событие, Сообщение, Параметры );

КонецФункции

// Ошибка выполняет регистрацию записи в журнале регистрации уровня Ошибка
// и возвращает текст комментария добавляемой записи журнала регистрации.
// 
// Параметры:
//  Событие - Строка - идентификатор события журнала регистрации, см. События.
//  Сообщение - Строка - текст сообщения, см. Сообщения.
//  Параметры - Структура - см. описание возвращаемого значения в функциях-конструкторах параметров.
// 
// Возвращаемое значение:
//  Строка - итоговый текст комментария, записанный в журнал регистрации.
//
Функция Ошибка( Знач Событие, Знач Сообщение, Знач Параметры ) Экспорт

	Возврат Зарегистрировать( УровеньЖурналаРегистрации.Ошибка, Событие, Сообщение, Параметры );

КонецФункции

// ПолучитьИсториюСобытий возвращает модифицированные данные журнала регистрации: добавляется КодСостояния,
// заполняемый по данным текста комментария, с удалением дублирующейся информации из текста комментария.
// 
// Параметры:
//  События - см. ПредставленияСобытий
//  Отбор - см. ПолучитьДанныеЖурналаРегистрации.Отбор
// 
// Возвращаемое значение:
//  см. ИсторияСобытий
//
Функция ПолучитьИсториюСобытий( Знач События, Знач Отбор ) Экспорт
	
	ЖурналРегистрации = ПолучитьДанныеЖурналаРегистрации( Отбор );
	
	Результат = ИсторияСобытий( ЖурналРегистрации );
	
	Для Каждого Запись Из ЖурналРегистрации Цикл
		
		Если ( События.Найти(Запись.Событие) = Неопределено ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяЗапись = Результат.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяЗапись, Запись );
		
		НоваяЗапись.КодСостояния = ПолучитьКодСостояния( Запись.Комментарий );
		
		НоваяЗапись.Комментарий = ПолучитьКомментарийБезКодаСостояния( Запись.Комментарий, НоваяЗапись.КодСостояния );
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ДополнитьИдентификаторомКоммитаЕслиСуществует добавляет к сообщению префикс с идентификатором коммита.
//
// Параметры:
//  Сообщение - Строка - текст сообщения, см. Сообщения.
//  Параметры - см. Параметры
//
// Возвращаемое значение:
//  Строка - изменённый текст сообщения.
//
Функция ДополнитьХешемКоммитаЕслиСуществует( Знач Сообщение, Знач Параметры )
	
	ХешКоммита = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры( Параметры, "ХешКоммита", "" ); // Строка
	
	Если ( ПустаяСтрока(ХешКоммита) ) Тогда
		
		Возврат Сообщение;
		
	КонецЕсли;
	
	Возврат СтрШаблон( "%1%2%3", ХешКоммита, Разделитель(), Сообщение );
	
КонецФункции

// ДополнитьИменемФайлаЕслиСуществует добавляет к сообщению префикс с именем файла.
//
// Параметры:
//  Сообщение - Строка - текст сообщения, см. Сообщения.
//  Параметры - см. Параметры
//
// Возвращаемое значение:
//  Строка - изменённый текст сообщения.
//
Функция ДополнитьИменемФайлаЕслиСуществует( Знач Сообщение, Знач Параметры )
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры( Параметры, "ИмяФайла", "" );  // Строка
	
	Если ( ПустаяСтрока(ИмяФайла) ) Тогда
		
		Возврат Сообщение;
		
	КонецЕсли;
	
	Возврат СтрШаблон( "%1%2%3", ИмяФайла, Разделитель(), Сообщение );
	
КонецФункции

// ДополнитьКлючомСобытияЕслиСуществует добавляет к сообщению префикс с ключом события.
// 
// Параметры:
//  Сообщение - Строка - текст сообщения, см. Сообщения;
//  Параметры - Структура - см. описание возвращаемого значения в функциях-конструкторах параметров.
// 
// Возвращаемое значение:
//  Строка - изменённый текст сообщения.
//
Функция ДополнитьКлючомСобытияЕслиСуществует( Знач Сообщение, Знач Параметры )
	
	КлючСобытия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры( Параметры, "КлючСобытия", "" ); // Строка
	
	Если ( ПустаяСтрока(КлючСобытия) ) Тогда
		
		Возврат Сообщение;
		
	КонецЕсли;
	
	Возврат СтрШаблон( "[ %1 ]%2%3", КлючСобытия, Разделитель(), Сообщение );
	
КонецФункции

// ДополнитьКодомСтатусаЕслиСуществует добавляет к сообщению префикс с кодом состояния HTTP.
// 
// Параметры:
//  Сообщение - Строка - текст сообщения, см. Сообщения.
//  Параметры - Структура - см. описание возвращаемого значения в функциях-конструкторах параметров.
// 
// Возвращаемое значение:
//  Строка - измененный текст сообщения.
// 
Функция ДополнитьКодомСтатусаЕслиСуществует( Знач Сообщение, Знач Параметры )
	
	Ответ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры( Параметры, "Ответ" ); // Неопределено, HTTPСервисОтвет
	
	Если ( Ответ = Неопределено ) Тогда
		
		Возврат Сообщение;
		
	КонецЕсли;
			
	Возврат ПолучитьПредставлениеКодСостояния( Ответ.КодСостояния ) + Сообщение;
		
КонецФункции

Функция ПолучитьКомментарий( Знач Сообщение, Знач Параметры )
	
	Результат = ДополнитьКодомСтатусаЕслиСуществует( Сообщение, Параметры );
	Результат = ДополнитьИменемФайлаЕслиСуществует( Результат, Параметры );
	Результат = ДополнитьХешемКоммитаЕслиСуществует( Результат, Параметры );
	Результат = ДополнитьКлючомСобытияЕслиСуществует( Результат, Параметры );

	Возврат Результат;
	
КонецФункции

Функция Зарегистрировать( Знач Уровень, Знач Событие, Знач Сообщение, Знач Параметры )

	Комментарий = ПолучитьКомментарий( Сообщение, Параметры );
	
	Объект = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры( Параметры, "Объект" ); // Неопределено, ЛюбаяСсылка

	// BSLLS:LineLength-off, 
	МетаданныеСервиса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры( Параметры, "МетаданныеСервиса" ); // Неопределено, ОбъектМетаданныхHTTPСервис
	// BSLLS:LineLength-on
	
	Если ( Объект = Неопределено ) Тогда
		
		Если ( МетаданныеСервиса = Неопределено ) Тогда
			
			ЗаписатьВЖурналРегистрации( Событие, Уровень, , , Комментарий );
			
		Иначе
			
			ЗаписатьВЖурналРегистрации( Событие, Уровень, МетаданныеСервиса, , Комментарий );
			
		КонецЕсли;
		
	Иначе
		
		ЗаписатьВЖурналРегистрации( Событие, Уровень, Метаданные.НайтиПоТипу(ТипЗнч(Объект)), Объект, Комментарий );
		
	КонецЕсли;
	
	Возврат Комментарий;

КонецФункции

// ИсторияСобытий возвращает пустую ТаблицаЗначений данных журнала регистрации, расширенную дополнительными колонками.
// 
// Параметры:
//  ЖурналРегистрации - см. ПолучитьДанныеЖурналаРегистрации
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные журнала регистрации:
//	* Дата - Дата
//	* Уровень - УровеньЖурналаРегистрации
//	* Событие - Строка
//	* Данные - Произвольный
//	* ПредставлениеДанных - Строка
//	* ИмяПользователя - Строка
//	* ПредставлениеПриложения - Строка
//	* Комментарий - Строка
//	* КодСостояния - Число
//
Функция ИсторияСобытий( Знач ЖурналРегистрации )
	
	Результат = ЖурналРегистрации.СкопироватьКолонки();
	
	Результат.Колонки.Добавить( "КодСостояния", Новый ОписаниеТипов("Число") );
	
	Возврат Результат;
	
КонецФункции

// ПолучитьДанныеЖурналаРегистрации возвращает данные журнала регистрации по заданным условиям отбора.
// 
// Параметры:
//  Отбор - Структура - см. Отбор в глобальном методе ВыгрузитьЖурналРегистрации;
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные журнала регистрации, см. описание полей глобального метода ВыгрузитьЖурналРегистрации:
//	* Дата - Дата
//	* Уровень - УровеньЖурналаРегистрации
//	* Событие - Строка
//	* Данные - Произвольный
//	* ПредставлениеДанных - Строка
//	* ИмяПользователя - Строка
//	* ПредставлениеПриложения - Строка
//	* Комментарий - Строка
//
Функция ПолучитьДанныеЖурналаРегистрации( Знач Отбор )
	
	Колонки = "Дата,Уровень,Событие,Данные,ПредставлениеДанных,ИмяПользователя,ПредставлениеПриложения,Комментарий";
	
	Результат = Новый ТаблицаЗначений();
	
	ВыгрузитьЖурналРегистрации( Результат, Отбор, Колонки );
	
	Возврат Результат;
	
КонецФункции

Функция Разделитель()
	
	Возврат ПараметрыСеанса.РазделительСообщений;
	
КонецФункции

Функция НадписьКодСостояния()
	
	Возврат НСтр( "ru = 'Код состояния';en = 'Status code'" );
	
КонецФункции

// ПолучитьКодСостояния возвращает код состояния, полученный из текста комментария.
// 
// Параметры:
//  Комментарий - Строка - текст комментария;
// 
// Возвращаемое значение:
//  Число - код состояния, 0 - если код не найден;
//
Функция ПолучитьКодСостояния( Знач Комментарий )
	
	ДлинаКодаСостояния = 3;
	
	Если ( СтрНайти(Комментарий, НадписьКодСостояния()) = 0 ) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов( "Число" );
	
	Результат = Сред(Комментарий, СтрДлина(НадписьКодСостояния()) + СтрДлина(Разделитель()) + 1, ДлинаКодаСостояния);
	
	Возврат ( ОписаниеТипа.ПривестиЗначение(Результат) );
	
КонецФункции

Функция ПолучитьПредставлениеКодСостояния( Знач КодСостояния )
	
	Возврат СтрШаблон( "%1%2%3%2", НадписьКодСостояния(), Разделитель(), Строка(КодСостояния) );
	
КонецФункции

Функция ПолучитьКомментарийБезКодаСостояния( Знач Комментарий, Знач КодСостояния )
	
	Возврат ( СтрЗаменить(Комментарий, ПолучитьПредставлениеКодСостояния(КодСостояния), "") );
	
КонецФункции

Процедура ЗаписатьВЖурналРегистрации( Знач Событие,
									Знач Уровень,
									Знач МетаданныеОбъекта = Неопределено,
									Знач Данные = Неопределено,
									Знач Комментарий = "" )
	
	ЗаписьЖурналаРегистрации( Событие, Уровень, МетаданныеОбъекта, Данные, Комментарий );
	
КонецПроцедуры

#КонецОбласти
