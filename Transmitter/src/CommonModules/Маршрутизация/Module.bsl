// @strict-types

#Область ПрограммныйИнтерфейс

// РаспределитьФайлыПоМаршрутам возвращает файлы с адресами доставки их в конечные точки сервисов.
//
// Параметры:
//	Схемы - см. ОбработкаОбъект.ВнешнийЗапрос.ПолучитьПредставленияСхемМаршрутовКИсполнению
//	Файлы - Массив из см. ФайлыВнешнегоХранилища.ОписаниеФайла
//
// Возвращаемое значение:
// 	Массив из см. ОписаниеФайла
//
Функция РаспределитьФайлыПоМаршрутам( Знач Схемы, Знач Файлы ) Экспорт
	
	Результат = Новый Массив(); // Массив из см. ОписаниеФайла
	
	Маршруты = ПолучитьМаршрутыПоКоммитам( Схемы );
	
	Для Каждого Файл Из Файлы Цикл
		
		Если ( ЭтоФайлНастроекМаршрутизации(Файл) ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьМаршрутизацию(Результат, Файл, Маршруты);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// TODO идет пересечение двух множеств... посмотреть, можно ли их слить и использовать изначальное описание файла с заполненными свойствами и описание файла для маршрутизации
// Если разные, то переименовать отправляемый файл, чтобы не путаться в нэйминге

// ОписаниеФайла возвращает перечень свойств, необходимых для отправки файла в конечные точки сервисов доставки.
//
// Возвращаемое значение:
// 	Структура - свойства файла:
// 		* Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита;
// 		* ИмяФайла - Строка - имя файла;
// 		* BinaryData - Неопределено, ДвоичныеДанные - данные файла;
// 		* Routes - Массив из Строка - конечные точки сервисов доставки (URL);
//
Функция ОписаниеФайла() // TODO стало использоваться в описании типов, может надо сделать экспортным?
	
	Результат = Новый Структура();
	Результат.Вставить( "Идентификатор", "" );
	Результат.Вставить( "ИмяФайла", "" );
	Результат.Вставить( "BinaryData", Неопределено );
	Результат.Вставить( "Routes", Новый Массив() );
	
	Возврат Результат;
	
КонецФункции

// ПолучитьМаршрутыПоКоммитам возвращает маршрутизацию файлов в разрезе коммитов.
// 
// Параметры:
//	Схемы - см. ОбработкаОбъект.ВнешнийЗапрос.ПолучитьПредставленияСхемМаршрутовКИсполнению
// 	
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - маршруты в разрезе коммитов:
// 		* Ключ - Строка - идентификатор коммита;
// 		* Значение - Соответствие из КлючИЗначение - маршруты:
// 			** Ключ - Строка - относительный путь к файлу;
// 			** Значение - Массив из Строка - список адресов конечных точек сервисов доставки (URL);
//
Функция ПолучитьМаршрутыПоКоммитам( Знач Схемы )

	Результат = Новый Соответствие();
	
	Для Каждого Схема Из Схемы Цикл
		
		Результат.Вставить( Схема.Ключ, ПолучитьМаршруты(Схема.Значение) );
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// ПолучитьМаршруты возвращает обработанную схему маршрутизации в виде соответствия ПутьКФайлу и
// адресов конечных точек сервисов доставки.
// 
// Параметры:
//	Схема - Строка - схема маршрутов;
// 	
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - маршруты:
// 		* Ключ - Строка - относительный путь к файлу;
// 		* Значение - Массив из Строка - список адресов конечных точек сервисов доставки (URL);
//
Функция ПолучитьМаршруты( Знач Схема )
	
	Результат = Новый Соответствие();
	
	Настройки = ОбщегоНазначенияВызовСервера.JsonВОбъект( Схема );
	
	ДоступныеСервисы = ПолучитьДоступныеСервисы( Настройки );
	
	Если (НЕ ЗначениеЗаполнено(ДоступныеСервисы)) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ОбрабатываемыеФайлы = ПолучитьПутиКФайлам( Настройки );
	
	Если ( НЕ ЗначениеЗаполнено(ОбрабатываемыеФайлы) ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Заполнить( Результат, ДоступныеСервисы, ОбрабатываемыеФайлы );
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФайлНастроекМаршрутизации( Знач Файл )
	
	Возврат ПустаяСтрока( Файл.Действие );
	
КонецФункции

Процедура ДобавитьМаршрутизацию( Результат, Знач Файл, Знач Маршруты )

	ФайлСМаршрутами = ОписаниеФайла();
	
	ЗаполнитьЗначенияСвойств( ФайлСМаршрутами, Файл );
	
	МаршрутыВКоммите = Маршруты.Получить( Файл.Идентификатор );
	
	Если ( МаршрутыВКоммите <> Неопределено ) Тогда
		
		Адреса = МаршрутыВКоммите.Получить( Файл.ПутьКФайлу );
		
		Если ( Адреса <> Неопределено ) Тогда
		
			ФайлСМаршрутами.Routes = Адреса;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Добавить( ФайлСМаршрутами );
	
КонецПроцедуры

Функция ПолучитьПутиКФайлам( Знач Настройки )
	
	Результат = Настройки.Получить( "epf" ); // Массив из Соответствие
	
	Возврат Результат; 
	
КонецФункции

// ПолучитьДоступныеСервисы из переданных настроек для доступных сервисов возвращает соответствие
// имени и адреса сервиса доставки.
// 
// Параметры:
// 	Настройки - Соответствие из КлючИЗначение - десериализованные настройки маршрутизации;
// 	  
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - доступные для распределения сервисы доставки:
//	* Ключ - Строка - имя сервиса доставки
//	* Значение - Строка - адрес сервиса доставки (URL);
//
Функция ПолучитьДоступныеСервисы( Знач Настройки )

	Результат = Новый Соответствие();
	
	Сервисы = Настройки.Получить( "ws" ); // Массив из Соответствие
	
	Если ( НЕ ЗначениеЗаполнено(Сервисы) ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Для Каждого Сервис Из Сервисы Цикл
		
		Если ( НЕ СервисДоступен(Сервис) ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Вставить( Сервис.Получить( "name" ), Сервис.Получить( "url" ) );
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдреса( Знач Сервисы )
	
	Результат = Новый Массив(); // Массив из Строка
	
	Для Каждого Сервис Из Сервисы Цикл
		
		Адрес = Сервис.Значение;
		
		Если ( ТипЗнч(Адрес) = Тип("Строка") ) Тогда
		
			Результат.Добавить( Адрес );
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИсключитьСервисы( Знач Сервисы, Знач Исключения )
	
	Результат = Новый Массив(); // Массив из КлючИЗначение
	
	Для Каждого Сервис Из Сервисы Цикл
		
		Если ( НЕ ЗначениеЗаполнено(Исключения) ИЛИ Исключения.Найти(Сервис.Ключ) = Неопределено ) Тогда
	
			Результат.Добавить( Сервис );
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СервисДоступен( Знач Сервис )
	
	Если ( Сервис.Получить( "name" ) = Неопределено ИЛИ Сервис.Получить( "url" ) = Неопределено ) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Доступен = Сервис.Получить( "enabled" ); // Булево
	
	Если ( Доступен = Неопределено ИЛИ НЕ Доступен ) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура Заполнить( Маршруты, Знач Сервисы, Знач Файлы)

	Для Каждого Файл Из Файлы Цикл
			
		ПутьКФайлу = Файл.Получить( "name" ); // Неопределено, Строка
		
		Если ( ПутьКФайлу = Неопределено ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Исключения = Файл.Получить( "exclude" ); // Массив из Строка
		
		СервисыКОбработке = ИсключитьСервисы( Сервисы, Исключения );
		
		Адреса = ПолучитьАдреса( СервисыКОбработке );
		
		Маршруты.Вставить( ПутьКФайлу, Адреса );
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти