// @strict-types

#Область ПрограммныйИнтерфейс

// РаспределитьФайлыПоМаршрутам возвращает файлы с URL-адресами конечных точек сервисов доставки файлов.
// API для управления загрузкой внешних отчетов и обработок находится в "./api/endpoint-openapi.yml".
//
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов.
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - уникальный идентификатор данных для обработчика.
//	Схемы - см. ОбработкаОбъект.ВнешнийЗапрос.ПолучитьПредставленияСхемМаршрутовКИсполнению
//	Файлы - Массив из см. ФайловыеМодели.ФайлИзХранилища
//
// Возвращаемое значение:
// 	Массив из см. ФайловыеМодели.ФайлДляОтправки
//
Функция РаспределитьФайлыПоМаршрутам( Знач Обработчик, Знач Идентификатор, Знач Схемы, Знач Файлы ) Экспорт
	
	Результат = Новый Массив(); // Массив из см. ФайловыеМодели.ФайлДляОтправки
	
	Маршруты = ПолучитьМаршрутыПоКоммитам( Схемы );
	
	Для Каждого Файл Из Файлы Цикл
		
		Если ( ЭтоФайлНастроекМаршрутизации(Файл) ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Добавить( СформироватьФайлДляОтправки( Обработчик, Идентификатор, Файл, Маршруты ) );
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ОписаниеПравилаМаршрутизацииФайла возвращает описание правила маршрутизации для файла.
//
// Параметры:
//  Правило - Соответствие из КлючИЗначение - правило маршрутизации.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * name - Строка - относительный путь к файлу.
//   * exclude - Массив из Строка - список имен сервисов или URL-адресов их конечных точек
//									для исключения из маршрутизации.
//
Функция ОписаниеПравилаМаршрутизацииФайла( Знач Правило )
	
	Результат = Новый Соответствие();
	
	Для Каждого КлючИЗначение Из Правило Цикл
		
		Если ( КлючИЗначение.Значение <> Неопределено ) Тогда

			Результат.Вставить( КлючИЗначение.Ключ, КлючИЗначение.Значение );

		КонецЕсли;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// ПолучитьМаршрутыПоКоммитам возвращает маршрутизацию файлов в разрезе коммитов.
// 
// Параметры:
//	Схемы - см. ОбработкаОбъект.ВнешнийЗапрос.ПолучитьПредставленияСхемМаршрутовКИсполнению
// 	
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - маршруты в разрезе коммитов:
// 		* Ключ - Строка - идентификатор коммита.
// 		* Значение - Соответствие из КлючИЗначение - маршруты:
// 			** Ключ - Строка - относительный путь к файлу.
// 			** Значение - Массив из Строка - URL-адреса конечных точек сервисов доставки файлов.
//
Функция ПолучитьМаршрутыПоКоммитам( Знач Схемы )

	Результат = Новый Соответствие();
	
	Для Каждого Схема Из Схемы Цикл
		
		Результат.Вставить( Схема.Ключ, ПолучитьМаршруты(Схема.Значение) );
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// ПолучитьМаршруты возвращает обработанную схему маршрутизации в виде соответствия ПутьКФайлу и
// адресов конечных точек сервисов доставки файлов.
// 
// Параметры:
//	Схема - Строка - схема маршрутов;
// 	
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - маршруты:
// 		* Ключ - Строка - относительный путь к файлу.
// 		* Значение - Массив из Строка - URL-адреса конечных точек сервисов доставки файлов.
//
Функция ПолучитьМаршруты( Знач Схема )
	
	Результат = Новый Соответствие();
	
	Настройки = ОбщегоНазначенияВызовСервера.JsonВОбъект( Схема ); // Текущий код
	
	ДоступныеСервисы = ПолучитьДоступныеСервисы( Настройки );
	
	Если ( НЕ ЗначениеЗаполнено(ДоступныеСервисы) ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПравилаМаршрутизацииФайлов = ПолучитьПравилаМаршрутизацииФайлов( Настройки );
	
	Если ( НЕ ЗначениеЗаполнено(ПравилаМаршрутизацииФайлов) ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Заполнить( Результат, ДоступныеСервисы, ПравилаМаршрутизацииФайлов );
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФайлНастроекМаршрутизации( Знач Файл )
	
	Возврат Файл.Действие.Пустая();
	
КонецФункции

Функция СформироватьФайлДляОтправки( Знач Обработчик, Знач Идентификатор, Знач Файл, Знач Маршруты )

	Результат = ФайловыеМодели.ФайлДляОтправки();
	
	ЗаполнитьЗначенияСвойств( Результат, Файл );
	
	Результат.Маршруты = ОпределитьМаршрутыФайла( Обработчик, Идентификатор, Файл, Маршруты );
	
	Если ( НЕ ЗначениеЗаполнено(Результат.Маршруты) ) Тогда

		Логи.Предупреждение( Логи.События().Маршрутизация, Логи.Сообщения().МаршрутОтсутствует,
			КонтекстОбработкиФайла(Обработчик, Идентификатор, Файл) );
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ПолучитьПравилаМаршрутизацииФайлов возвращает правила маршрутизации для файлов.
//
// Параметры:
//  Настройки - Соответствие из КлючИЗначение - десериализованные настройки маршрутизации.
//
// Возвращаемое значение:
//  Массив из см. ОписаниеПравилаМаршрутизацииФайла
//
Функция ПолучитьПравилаМаршрутизацииФайлов( Знач Настройки )

	Результат = Новый Массив(); // Массив из см. ОписаниеПравилаМаршрутизацииФайла

	Правила = Настройки.Получить( "epf" ); // Массив из Соответствие

	Если ( Правила = Неопределено ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;

	Для Каждого Правило Из Правила Цикл
		
		Результат.Добавить( ОписаниеПравилаМаршрутизацииФайла(Правило) );
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// ОписаниеДоступногоСервиса возвращает описание доступного сервиса доставки файлов.
//
// Параметры:
//  Сервис - Соответствие из КлючИЗначение - описание сервиса.
//
// Возвращаемое значение:
//  Структура - описание доступного сервиса:
//   * Имя - Строка - (необязательно) имя сервиса.
//   * Адрес - Строка - URL-адрес конечной точки сервиса.
//
Функция ОписаниеДоступногоСервиса( Знач Сервис )
	
	Результат = Новый Структура();
	
	Для Каждого КлючИЗначение Из Сервис Цикл
		
		Если ( КлючИЗначение.Ключ = "name" ) Тогда
			
			Значение = КлючИЗначение.Значение;

			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				
				Результат.Вставить( "Имя", Значение );
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ( КлючИЗначение.Ключ = "url" ) Тогда
			
			Значение = КлючИЗначение.Значение;
			
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				
				Результат.Вставить( "Адрес", Значение );
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// ПолучитьДоступныеСервисы из переданных настроек возвращает массив доступных сервисов.
// 
// Параметры:
// 	Настройки - Соответствие из КлючИЗначение - десериализованные настройки маршрутизации;
// 
// Возвращаемое значение:
// 	Массив из см. ОписаниеДоступногоСервиса
//
Функция ПолучитьДоступныеСервисы( Знач Настройки )

	Результат = Новый Массив(); // Массив из см. ОписаниеДоступногоСервиса
	
	Сервисы = Настройки.Получить( "ws" ); // Массив из Соответствие
	
	Если ( НЕ ЗначениеЗаполнено(Сервисы) ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Для Каждого Сервис Из Сервисы Цикл
		
		Если ( НЕ СервисДоступен(Сервис) ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Добавить( ОписаниеДоступногоСервиса(Сервис) );
		
 	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАдреса( Знач Сервисы )
	
	Результат = Новый Массив(); // Массив из Строка
	
	Для Каждого Сервис Из Сервисы Цикл
		
		Адрес = Сервис.Адрес;
		
		Если ( ТипЗнч(Адрес) = Тип("Строка") ) Тогда
		
			Результат.Добавить( Адрес );
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// ИсключитьСервисы возвращает сервисы, которые не попали в список исключений.
// Исключение происходит по имени сервиса или по URL-адресу его конечной точки.
//
// Параметры:
//  Сервисы - Массив из см. ОписаниеДоступногоСервиса
//  Исключения - Массив из Строка - список имен сервисов или URL-адресов их конечных точек для исключения.
//
// Возвращаемое значение:
//  Массив из см. ОписаниеДоступногоСервиса - отфильтрованный список сервисов.
//
Функция ИсключитьСервисы( Знач Сервисы, Знач Исключения )
	
	Результат = Новый Массив(); // Массив из см. ОписаниеДоступногоСервиса
	
	Если ( НЕ ЗначениеЗаполнено(Исключения) ) Тогда
		
		Возврат Сервисы;
		
	КонецЕсли;
	
	Для Каждого Сервис Из Сервисы Цикл
		
		ИсключенПоАдресу = ( Исключения.Найти(Сервис.Адрес) <> Неопределено );

		ИсключенПоИмени = ( Сервис.Свойство("Имя") И Исключения.Найти(Сервис.Имя) <> Неопределено );
		
		Если ( НЕ ИсключенПоАдресу И НЕ ИсключенПоИмени ) Тогда
			
			Результат.Добавить( Сервис );
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СервисДоступен( Знач Сервис )
	
	Если ( Сервис.Получить( "url" ) = Неопределено ) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Доступен = Сервис.Получить( "enabled" ); // Булево
	
	Если ( Доступен = Неопределено ИЛИ НЕ Доступен ) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура Заполнить( Маршруты, Знач Сервисы, Знач Правила )

	Для Каждого Правило Из Правила Цикл
			
		ПутьКФайлу = Правило.Получить( "name" ); // Неопределено, Строка
		
		Если ( ПутьКФайлу = Неопределено ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Исключения = Правило.Получить( "exclude" ); // Неопределено, Массив из Строка
		
		СервисыКОбработке = ИсключитьСервисы( Сервисы, Исключения );
		
		Адреса = ПолучитьАдреса( СервисыКОбработке );
		
		Маршруты.Вставить( ПутьКФайлу, Адреса );
			
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьМаршрутыФайла( Знач Обработчик, Знач Идентификатор, Знач Файл, Знач Маршруты )
	
	МаршрутыВКоммите = Маршруты.Получить( Файл.Идентификатор );
	
	Если ( МаршрутыВКоммите = Неопределено ) Тогда
		
		Логи.Предупреждение( Логи.События().Маршрутизация, Логи.Сообщения().СхемаНеНайдена,
			КонтекстОбработкиФайла(Обработчик, Идентификатор, Файл) );
		
		Возврат Новый Массив();
		
	КонецЕсли;
	
	Возврат МаршрутыВКоммите.Получить( Файл.ПутьКФайлу );
	
КонецФункции

#Область Вспомогательные

// ПолучитьКраткийИдентификатор получает краткий идентификатор коммита из полного идентификатора.
// 
// Параметры:
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КраткийИдентификаторКоммита
//
Функция ПолучитьКраткийИдентификатор( Знач Идентификатор )
	
	Возврат СистемаУправленияВерсиями.ПолучитьКраткийИдентификатор( Строка(Идентификатор) );

КонецФункции

Функция КонтекстОбработкиФайла( Знач Обработчик, Знач Идентификатор, Знач Файл )
	
	Ключ = ПолучитьКраткийИдентификатор( Идентификатор );
	
	ИдентификаторФайла = ПолучитьКраткийИдентификатор( Файл.Идентификатор );
	
	Возврат Логи.КонтекстОбработкиФайла( Обработчик, Ключ, ИдентификаторФайла, Файл.ИмяФайла );
	
КонецФункции

#КонецОбласти

#КонецОбласти