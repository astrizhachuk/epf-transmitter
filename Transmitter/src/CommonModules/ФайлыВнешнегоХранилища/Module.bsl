// @strict-types

#Область ПрограммныйИнтерфейс

// ПолучитьИзХранилища возвращает исходные файлы из внешнего источника со всеми метаданными и ошибками скачивания.
// 
// Параметры:
//  ОписаниеФайлов - Массив из см. ФайловыеМодели.ФайлИзХранилища
//  Параметры - см. ВнешниеЗапросы.ПолучитьПараметрыХранилища
// 	
// Возвращаемое значение:
//	Массив из см. ФайловыеМодели.ФайлИзХранилища
//
Функция ПолучитьИзХранилища( Знач ОписаниеФайлов, Знач Параметры ) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОписаниеФайлов) Тогда
		
		Возврат Новый Массив();
		
	КонецЕсли;
	
	ИсходныеДанные = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно( ОписаниеФайлов );
	
	ДополнитьПутямиКИсходнымФайлам( ИсходныеДанные, Параметры );
	
	Возврат СкачатьФайлы( ИсходныеДанные, Параметры );
	
КонецФункции

// ПолучитьОшибкуЗагрузкиФайла возвращает ошибку загрузки исходного файла с сформированным по шаблону текстом сообщения.
// 
// Параметры:
//  ПредставлениеОшибки - Строка - текст ошибки;
//  АдресСервера - Строка - адрес сервера (URL), для которого формируется ошибка;
// 
// Возвращаемое значение:
//  ИнформацияОбОшибке - информация об ошибке при загрузке исходного файла;
//
Функция ПолучитьОшибкуЗагрузкиФайла( Знач ПредставлениеОшибки, Знач АдресСервера ) Экспорт
	
	Шаблон = Логи.Сообщения().ОшибкаЗагрузкиФайла;
	
	Сообщение = СтрШаблон( Шаблон, АдресСервера, ПредставлениеОшибки );
	
	Возврат ОбщегоНазначенияВызовСервера.СоздатьИнформациюОбОшибке( Сообщение );
	
КонецФункции

// Сохранить выполняет сохранение в информационную базу внешних файлов.
// 
// Параметры:
// 	Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов, для которого
// 																сохраняются внешние файлы;
//  Идентификатор - Строка - идентификатор запроса;
// 	Файлы - Массив из см. ФайловыеМодели.ФайлИзХранилища
//
Процедура Сохранить( Знач Обработчик, Знач Идентификатор, Знач Файлы ) Экспорт
	
	РегистрыСведений.ВнешниеФайлы.ЗаписатьДанные( Обработчик, Идентификатор, Файлы );
	
КонецПроцедуры

// Восстановить возвращает найденный в информационной базе набор файлов с их описанием.
// 
// Параметры:
// 	Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов, для которого
// 																необходимо восстановить данные;
//  Идентификатор - Строка - идентификатор запроса;
// 	
// Возвращаемое значение:
// 	- Неопределено - данные не найдены;
// 	- Массив из см. ФайловыеМодели.ФайлИзХранилища
//
Функция Восстановить( Знач Обработчик, Знач Идентификатор ) Экспорт
	
	Данные = НайтиДанные( Обработчик, Идентификатор ); // Массив из см. ФайловыеМодели.ФайлИзХранилища
	
	Если ( ТипЗнч(Данные) <> Тип("Массив") ) Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат Данные;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПутьКИсходномуФайлу( Знач Файл, Знач ПараметрыХранилища )
	
	Возврат Гитлаб.ПолучитьПутьКНеобработанномуФайлу( Файл.ПутьКФайлу, ПараметрыХранилища.Проект, Файл.Идентификатор );
	
КонецФункции

Процедура ДополнитьПутямиКИсходнымФайлам( ОписаниеФайлов, Знач ПараметрыХранилища )
	
	Если ( ПараметрыХранилища.Сервис <> Перечисления.ИсточникиЗапроса.Гитлаб ) Тогда
		
		Возврат;
		
	КонецЕсли;
			
	Для Каждого ОписаниеФайла Из ОписаниеФайлов Цикл
		
		ОписаниеФайла.RAWFilePath = ПолучитьПутьКИсходномуФайлу( ОписаниеФайла, ПараметрыХранилища );
		
	КонецЦикла;
	
КонецПроцедуры

Функция СкачатьФайлы( ОписаниеФайлов, Знач ПараметрыХранилища )
	
	Если ( ПараметрыХранилища.Сервис = Перечисления.ИсточникиЗапроса.Гитлаб ) Тогда
		
		Возврат СкачатьФайлыГитлаб( ОписаниеФайлов, ПараметрыХранилища.ПараметрыСоединения );
		
	КонецЕсли;
	
	Для Каждого Файл Из ОписаниеФайлов Цикл
			
		Файл.ИнформацияОбОшибке = ПолучитьОшибкуЗагрузкиФайла( Логи.Сообщения().NO_RAWPATH, "" );
		
	КонецЦикла;
	
	Возврат ОписаниеФайлов;
			
КонецФункции

Функция ПолучитьПутиКИсходнымФайлам( ОписаниеФайлов )
	
	ПутиКИсходнымФайлам = ОписаниеФайлов.ВыгрузитьКолонку( "RAWFilePath" );
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив( ПутиКИсходнымФайлам );
	
КонецФункции

Функция СкачатьФайлыГитлаб( Знач ОписаниеФайлов, Знач ПараметрыСоединения )
	
	СводноеОписаниеФайлов = ОбщегоНазначенияВызовСервера.МассивВТаблицуЗначений( ОписаниеФайлов );

	ПутиКИсходнымФайлам = ПолучитьПутиКИсходнымФайлам( СводноеОписаниеФайлов );
	
	СкаченныеФайлы = Гитлаб.ПолучитьНеобработанныеФайлы( ПараметрыСоединения, ПутиКИсходнымФайлам );
	
	Для Каждого Файл Из СкаченныеФайлы Цикл
			
		НайденныеФайлы = СводноеОписаниеФайлов.НайтиСтроки( Новый Структура("RAWFilePath", Файл.RAWFilePath) );
		
		Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		
			ЗаполнитьЗначенияСвойств( НайденныйФайл, Файл );
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОбщегоНазначенияВызовСервера.ТаблицаЗначенийВМассив( СводноеОписаниеФайлов );

КонецФункции

Функция НайтиДанные( Знач Обработчик, Знач Идентификатор )
	
	Возврат РегистрыСведений.ВнешниеФайлы.НайтиДанные(Обработчик, Идентификатор);
	
КонецФункции

#КонецОбласти