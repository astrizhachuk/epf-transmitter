// @strict-types

#Область ПрограммныйИнтерфейс

// ПолучитьПараметрыСоединения возвращает параметры соединения с сервером GitLab.
// 
// Параметры:
// 	АдресСервера - Строка - URL сервера GitLab, например: "http://www.example.org";
//
// Возвращаемое значение:
//	ФиксированнаяСтруктура - описание:
// * АдресСервера - Строка - URL сервера GitLab;
// * Токен - Строка - см. Константа.ТокенГитлаб
// * Таймаут - Число - см. Константа.ТаймаутГитлаб
//
Функция ПолучитьПараметрыСоединения( Знач АдресСервера ) Экспорт
	
	Результат = ВнешниеЗапросы.ПараметрыСоединения();
	Результат.АдресСервера = АдресСервера;
	Результат.Токен = НастройкиСервисов.ПолучитьТокенГитлаб();
	Результат.Таймаут = НастройкиСервисов.ПолучитьТаймаутГитлаб();
	
	Возврат ( Новый ФиксированнаяСтруктура(Результат) );
	
КонецФункции

// TODO заменить на КИсходномуФайлу

// ПолучитьПутьКНеобработанномуФайлу возвращает относительный путь к необработанному (RAW) файлу в соответствии с
// GitLab REST API (v4), см. https://docs.gitlab.com/ee/api/repository_files.html#get-raw-file-from-repository.
// 
// Параметры:
// 	ПутьКФайлу - Строка - относительный путь к файлу на сервере GitLab, например, "а/б/в.epf";
// 	Проект - Строка - идентификатор проекта (json: project_id);
// 	Коммит - Строка - идентификатор коммита (json: commits[].id);
// 
// Возвращаемое значение:
// 	Строка - относительный путь к файлу в URL-кодировке,
// 			например "/api/v4/projects/1/repository/files/%D0%B0/%D0%B0%2F%D0%B1%2F%D0%B2.epf/raw?ref=123af";
//
Функция ПолучитьПутьКНеобработанномуФайлу( Знач ПутьКФайлу, Знач Проект, Знач Коммит ) Экспорт
	
	Шаблон = "/api/v4/projects/%1/repository/files/%2/raw?ref=%3";

	Возврат СтрШаблон( Шаблон, Проект, КодироватьСтроку(ПутьКФайлу, СпособКодированияСтроки.КодировкаURL), Коммит );
	
КонецФункции

// TODO ПолучитьИсходныеФайлы

// ПолучитьНеобработанныеФайлы возвращает скачанные с GitLab сервера необработанные (RAW) Результат с их описанием.
//
// Параметры:
// 	ПараметрыСоединения - см. ПолучитьПараметрыСоединения
// 	ПутиКФайлам - Массив из Строка - относительные пути к загружаемым RAW-файлам в URL-кодировке, например
// 								"/api/v4/projects/1/repository/files/%D0%B0/D0%BA%D0%B0%201.epf/raw?ref=ef3529e5486ff";
// 	
// Возвращаемое значение:
// 	Массив из см. ОписаниеЗагруженногоФайла
// 
Функция ПолучитьНеобработанныеФайлы( Знач ПараметрыСоединения, Знач ПутиКФайлам ) Экспорт
	
	Результат = Новый Массив(); // Массив из см. ОписаниеЗагруженногоФайла
	
	Для Каждого ПутьКНеобработанномуФайлу Из ПутиКФайлам Цикл
		
		Результат.Добавить( ЗагрузитьФайл(ПараметрыСоединения, ПутьКНеобработанномуФайлу) );
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// ПолучитьДанныеЗаполнения разбирает тело JSON-запроса от веб-хука GitLab и преобразует его
// в унифицированную внутреннюю структуру данных.
//
// Функция извлекает ключевую информацию о событии:
// - идентификатор и данные проекта;
// - список коммитов с их датами и сообщениями;
// - список добавленных и измененных файлов;
// 
// Параметры:
//  Источник - Строка - тело внешнего запроса в формате JSON;
// 
// Возвращаемое значение:
// 	см. ВнешниеЗапросы.ДанныеЗаполнения
//
Функция ПолучитьДанныеЗаполнения( Знач Источник ) Экспорт
	
	ДанныеВнешнегоЗапроса = ОбщегоНазначенияВызовСервера.JsonВОбъект( Источник );
	
	Результат = ВнешниеЗапросы.ДанныеЗаполнения();
	
	Результат.ТипИсточника = Перечисления.ИсточникиЗапроса.Гитлаб;
	
	Результат.Идентификатор = ПолучитьИдентификаторСобытия( ДанныеВнешнегоЗапроса );
	
	ЗаполнитьПроект( Результат, ДанныеВнешнегоЗапроса );
	
	Для Каждого Коммит Из ПолучитьКоммиты( ДанныеВнешнегоЗапроса ) Цикл
		
		Результат.Коммиты.Добавить( ПолучитьОписаниеКоммита(Коммит) );
		
	КонецЦикла;
	
	Для Каждого ОписаниеФайла Из ПолучитьИнформациюОДобавленныхФайлах( ДанныеВнешнегоЗапроса ) Цикл

		Результат.ДобавленныеФайлы.Добавить( ОписаниеФайла );

	КонецЦикла;
	
	Для Каждого ОписаниеФайла Из ПолучитьИнформациюОбИзмененныхФайлах( ДанныеВнешнегоЗапроса ) Цикл

		Результат.ИзмененныеФайлы.Добавить( ОписаниеФайла );

	КонецЦикла;
	
	Результат.Дата = ПолучитьДатуСобытия( Результат );
	
	Результат.Сообщение = ПолучитьСообщениеСобытия( ДанныеВнешнегоЗапроса, Результат );
	
	Возврат Результат;
	
КонецФункции

// ОбработатьЗапросСобытия выполняет обработку HTTP-запроса, отправленного сервером GitLab при срабатывании веб-хука:
// см. https://docs.gitlab.com/ee/user/project/integrations/webhook_events.html
// 
// Параметры:
// 	Запрос - HTTPСервисЗапрос - HTTP-запрос;
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - ответ HTTP-сервиса;
//
Функция ОбработатьЗапросСобытия( Знач Запрос ) Экспорт

	Ответ = Новый HTTPСервисОтвет( СервисыHTTP.КодыСостояния().НайтиКодПоИдентификатору("OK") );

	Логи.Информация( Логи.События().ВебСервис, Логи.Сообщения().ЗапросПолучен,
		Логи.КонтекстОтветаСервиса(Ответ, Метаданные.HTTPСервисы.GitLab) );
	
	ПроверитьДоступностьСервиса( Ответ );
	
	ПроверитьЗаголовки( Запрос, Ответ );
	
	Если ( НЕ СервисыHTTP.КодыСостояния().isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат Ответ;
		
	КонецЕсли;
	
	ВнешнийЗапрос = СоздатьВнешнийЗапрос( Запрос );
	
	Аутентификация = УчетныеДанные.ПолучитьРеквизитыАутентификации( ВнешнийЗапрос.ПолучитьАдресПроекта() );
	
	ПроверитьНаличиеОбработчика( Аутентификация, Ответ );
	
	Аутентифицировать( Аутентификация, Запрос, Ответ );
	
	Если ( СервисыHTTP.КодыСостояния().isOk(Ответ.КодСостояния) ) Тогда
		
		ОбработкаДанных.ОбработатьЗапрос( Аутентификация.Обработчик, ВнешнийЗапрос );

		Логи.Информация( Логи.События().ВебСервис, Логи.Сообщения().ЗапросОбработан,
			Логи.КонтекстОтветаСервиса(Ответ, Метаданные.HTTPСервисы.GitLab) );
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеПроекта( Знач Идентификатор, Знач АдресПроекта)
	
	АдресСервера = ПолучитьАдресСервера( АдресПроекта );
	
	Возврат ( Новый Структура("Id, URL, ServerURL", Идентификатор, АдресПроекта, АдресСервера) );
	
КонецФункции

Функция ПолучитьАдресСервера( Знач Адрес )

	НОМЕР_ВХОЖДЕНИЯ = 3;
	
	Разделитель = СтрНайти( Адрес, "/", , , НОМЕР_ВХОЖДЕНИЯ ) - 1;
	
	Если ( Разделитель > 0 ) Тогда
		
		Возврат Лев( Адрес, Разделитель );
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// ПолучитьОписаниеПроекта возвращает описание проекта из тела внешнего запроса, пришедшего с сервера GitLab.
// 
// Параметры:
//  ДанныеВнешнегоЗапроса - Соответствие из КлючИЗначение - десериализованное тело запроса, пришедшего с сервера GitLab:
// 	* Ключ - Строка - ключ элемента JSON;
// 	* Значение - Произвольный - значение для ключа;
// 	
// Возвращаемое значение:
// 	- Неопределено - данные отсутствуют;
// 	- Структура - описание проекта:
// * Id - Число - идентификатор проекта (json: project.id);
// * URL - Строка - веб-адрес (URL) GitLab проекта, например, "http://www.example.org/user/project";
// * ServerURL - Строка - веб-адрес (URL) сервера GitLab , например, "http://www.example.org";
// 
Функция ПолучитьОписаниеПроекта( Знач ДанныеВнешнегоЗапроса )
	
	Проект = ДанныеВнешнегоЗапроса.Получить( "project" ); // Соответствие
	
	Если ( ТипЗнч(Проект) <> Тип( "Соответствие") ) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;

	Идентификатор = Проект.Получить( "id" );
	
	АдресПроекта = Проект.Получить( "web_url" );

	Если ( ТипЗнч(Идентификатор) = Тип("Число") И ТипЗнч(АдресПроекта) = Тип("Строка") ) Тогда
		
		Возврат ОписаниеПроекта( Идентификатор, АдресПроекта );
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьПроект( Объект, Знач ДанныеВнешнегоЗапроса )
	
	Проект = ПолучитьОписаниеПроекта( ДанныеВнешнегоЗапроса );
	
	Если ( Проект = Неопределено ) Тогда
		
		Возврат;
	
	КонецЕсли;
	
	Объект.ProjectId = Строка( Проект.Id );
	
	Объект.АдресПроекта = Проект.URL;
	
	Объект.ServerURL = Проект.ServerURL;
	
КонецПроцедуры

// ПолучитьИдентификаторСобытия возвращает идентификатор "checkout_sha" из тела внешнего запроса,
// пришедшего с сервера GitLab.
// 
// Параметры:
//  ДанныеВнешнегоЗапроса - Соответствие из КлючИЗначение - десериализованное тело запроса, пришедшего с сервера GitLab:
// 	* Ключ - Строка - ключ элемента JSON;
// 	* Значение - Произвольный - значение для ключа;
// 	
// Возвращаемое значение:
// 	- Неопределено - данные отсутствуют;
// 	- Строка - идентификатор события (json: checkout_sha);
// 	
Функция ПолучитьИдентификаторСобытия( Знач ДанныеВнешнегоЗапроса )
	
	Возврат ДанныеВнешнегоЗапроса.Получить( "checkout_sha" );
	
КонецФункции

Функция ПолучитьДатуСобытия( Знач ДанныеЗаполнения )
	
	Для Каждого Коммит Из ДанныеЗаполнения.Коммиты Цикл
		
		Если ( Коммит.Идентификатор = ДанныеЗаполнения.Идентификатор ) Тогда
			
			Возврат Коммит.Дата;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Дата( 1, 1, 1 );
		
КонецФункции

// ПолучитьСообщениеСобытия возвращает сообщение с описанием события по данным тела внешнего запроса,
// пришедшего с сервера GitLab. Сообщение формируется на основе поля "message" схемы запроса.
// Если поле "message" не заполнено (null), то используется заголовок ("title") соответствующего коммита,
// определяемого по совпадению идентификатора "checkout_sha" с "commits[].id".
// 
// Параметры:
//  ДанныеВнешнегоЗапроса - Соответствие из КлючИЗначение - десериализованное тело запроса, пришедшего с сервера GitLab:
// 	* Ключ - Строка - ключ элемента JSON.
// 	* Значение - Произвольный - значение для ключа.
// 	ДанныеЗаполнения - см. ВнешниеЗапросы.ДанныеЗаполнения
// 
// Возвращаемое значение:
//  Строка - сообщение описывающее событие.
//
Функция ПолучитьСообщениеСобытия( Знач ДанныеВнешнегоЗапроса, Знач ДанныеЗаполнения )
	
	Результат = Строка( ДанныеВнешнегоЗапроса.Получить("message") );
	
	Если ( НЕ ПустаяСтрока(Результат) ) Тогда
		
		Возврат Результат;
	
	КонецЕсли;
		
	Для Каждого Коммит Из ДанныеЗаполнения.Коммиты Цикл
		
		Если ( Коммит.Идентификатор = ДанныеЗаполнения.Идентификатор ) Тогда
			
			Возврат Строка( Коммит.Заголовок );
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
		
КонецФункции

Функция ПолучитьОписаниеКоммита( Знач Коммит )

	Результат = Новый Структура();
	Результат.Вставить( "Идентификатор", Коммит.Получить("id") );
	Результат.Вставить( "Дата", Коммит.Получить("timestamp") );
	Результат.Вставить( "Заголовок", Коммит.Получить("title") );
	
	Возврат Результат;
	
КонецФункции

// ПолучитьКоммиты возвращает коллекцию коммитов из тела внешнего запроса, пришедшего с сервера GitLab.
// 
// Параметры:
//  ДанныеВнешнегоЗапроса - Соответствие из КлючИЗначение - десериализованное тело запроса, пришедшего с сервера GitLab:
// 	* Ключ - Строка - ключ элемента JSON;
// 	* Значение - Произвольный - значение для ключа;
//
// Возвращаемое значение:
// 	Массив из Соответствие - коммиты из десериализованного тела запроса, пришедшего с сервера GitLab:
// 	* Ключ - Строка - ключ элемента JSON;
// 	* Значение - Произвольный - значение для ключа;
// 
//@skip-check doc-comment-collection-item-type - внешний объект, конструктора нет, чтобы сослаться на него
Функция ПолучитьКоммиты( Знач ДанныеВнешнегоЗапроса )
	
	Результат = ДанныеВнешнегоЗапроса.Получить( "commits" );
	
	Если ( ТипЗнч(Результат) <> Тип( "Массив") ) Тогда
	
		Возврат Новый Массив();
		
	Иначе
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

Функция ИмеетРасширение( Знач ПутьКФайлу, Знач Расширение )
	
	Возврат СтрЗаканчиваетсяНа( ВРег(ПутьКФайлу), "." + ВРег(Расширение) );
	
КонецФункции

// ОписаниеФайлаКЗагрузке создает унифицированную структуру для описания файла к последующей загрузке
// в контексте определенного коммита.
//
// Функция связывает путь к файлу с идентификатором коммита, в котором этот файл был изменен или добавлен.
// Используется для формирования списков добавленных и измененных файлов при обработке тела внешнего запроса,
// пришедшего с сервера GitLab.
// 
// Параметры:
//  Идентификатор - Строка - идентификатор коммита (json: commits[].id).
//  ПутьКФайлу - Строка - относительный путь к файлу на сервере GitLab, например, "а/б/в.epf".
// 
// Возвращаемое значение:
//  Структура - описание файла коммита:
// * Идентификатор - Строка - идентификатор коммита (json: commits[].id).
// * ПутьКФайлу - Строка - относительный путь к файлу на сервере GitLab, например, "а/б/в.epf".
//
Функция ОписаниеФайлаКЗагрузке( Знач Идентификатор, Знач ПутьКФайлу )
	
	Результат = Новый Структура();
	Результат.Вставить( "Идентификатор", Идентификатор );
	Результат.Вставить( "ПутьКФайлу", ПутьКФайлу );
	
	Возврат Результат;
	
КонецФункции

// ПолучитьИмяСписка возвращает строковое представление вида изменения файла для API GitLab.
//
// Параметры:
//  ВидИзменения - ПеречислениеСсылка.ВидыИзмененийФайла - вид изменения файла.
//
// Возвращаемое значение:
//  Строка - "added", "modified".
//
Функция ПолучитьИмяСписка( Знач ВидИзменения )
    
    Если ВидИзменения = Перечисления.ВидыИзмененийФайла.Добавлен Тогда

        Возврат "added";
        
    ИначеЕсли ВидИзменения = Перечисления.ВидыИзмененийФайла.Изменен Тогда
    	
        Возврат "modified";
        
    Иначе

        ВызватьИсключение НСтр( "ru = 'Неподдерживаемый вид изменения файла';en = 'Unsupported file change type'" );
        
    КонецЕсли;
     
КонецФункции

// ПолучитьИнформациюОФайлахВКоммитах извлекает из тела внешнего запроса список файлов
// с расширениями .epf и .erf.
// 
// Функция анализирует все коммиты события и для каждого из них формирует список файлов
// из указанного поля (например, "added" или "modified"). Файлы с другими расширениями игнорируются.
// 	
// Параметры:
//  ДанныеВнешнегоЗапроса - Соответствие из КлючИЗначение - десериализованное тело запроса, пришедшего с сервера GitLab:
// 	* Ключ - Строка - ключ элемента JSON.
// 	* Значение - Произвольный - значение по этому ключу.
//  ИмяСпискаФайлов - Строка - имя поля в коммите (json: commits[]), содержащего список файлов ("added", "modified").
// 	
// Возвращаемое значение:
// 	Массив из см. ОписаниеФайлаКЗагрузке
//
Функция ПолучитьИнформациюОФайлахВКоммитах( Знач ДанныеВнешнегоЗапроса, Знач ИмяСпискаФайлов )

	Результат = Новый Массив(); // Массив из Структура
	
	Для Каждого Коммит Из ПолучитьКоммиты( ДанныеВнешнегоЗапроса ) Цикл
		
		Идентификатор = Строка( Коммит.Получить("id") );
		
		СписокФайлов = Коммит.Получить( ИмяСпискаФайлов ); // Массив из Строка
		
		Если ( СписокФайлов = Неопределено ) Тогда

			Продолжить;

		КонецЕсли;
		
		Для Каждого ПутьКФайлу Из СписокФайлов Цикл

			ПутьКФайлу = Строка( ПутьКФайлу );

			Если НЕ ( ИмеетРасширение(ПутьКФайлу, "EPF") ИЛИ ИмеетРасширение(ПутьКФайлу, "ERF") ) Тогда

				Продолжить;

			КонецЕсли;

			Результат.Добавить( ОписаниеФайлаКЗагрузке(Идентификатор, ПутьКФайлу) );

		КонецЦикла;

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИнформациюОДобавленныхФайлах( Знач ДанныеВнешнегоЗапроса )
	
	ИмяСписка = ПолучитьИмяСписка( Перечисления.ВидыИзмененийФайла.Добавлен );

	Возврат ПолучитьИнформациюОФайлахВКоммитах( ДанныеВнешнегоЗапроса, ИмяСписка );

КонецФункции

Функция ПолучитьИнформациюОбИзмененныхФайлах( Знач ДанныеВнешнегоЗапроса )
	
	ИмяСписка = ПолучитьИмяСписка( Перечисления.ВидыИзмененийФайла.Изменен );

	Возврат ПолучитьИнформациюОФайлахВКоммитах( ДанныеВнешнегоЗапроса, ИмяСписка );

КонецФункции

// ОписаниеЗагруженногоФайла возвращает описание загруженного файла.
// 
// Возвращаемое значение:
//  Структура - описание файла:
// * RAWFilePath - Строка - относительный путь к исходному (RAW) файлу;
// * ИмяФайла - Строка - имя файла (UTF-8);
// * ДвоичныеДанные - Неопределено, ДвоичныеДанные - двоичные данные файла;
// * ИнформацияОбОшибке - Неопределено, ИнформацияОбОшибке - информация об ошибке, если она была при загрузке файла;
//
Функция ОписаниеЗагруженногоФайла()
	
	Результат = Новый Структура();
	Результат.Вставить( "RAWFilePath", "" );
	Результат.Вставить( "ИмяФайла", "" );
	Результат.Вставить( "ДвоичныеДанные", Неопределено );
	Результат.Вставить( "ИнформацияОбОшибке", Неопределено );
	
	Возврат Результат;

КонецФункции

// ДополнительныеПараметры возвращает дополнительные параметры вызова метода см. КоннекторHTTP.Get.
// 
// Параметры:
//  ПараметрыСоединения - см. ПолучитьПараметрыСоединения
// 
// Возвращаемое значение:
//  Структура - описание:
// * ПроверятьSSL - Булево - Ложь - проверка сертификата сервера не выполняется
//							Истина - используется значение СертификатыУдостоверяющихЦентровОС;
// * Заголовки - Соответствие из КлючИЗначение - HTTP заголовки запроса:
// ** Ключ - Строка
// ** Значение - Произвольный
// * Таймаут - Число - время ожидания осуществляемого соединения и операций, в секундах;
//
Функция ДополнительныеПараметры( Знач ПараметрыСоединения )
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить( "PRIVATE-TOKEN", ПараметрыСоединения.Токен);
	
	Результат = Новый Структура();
	Результат.Вставить( "ПроверятьSSL", Ложь );
	Результат.Вставить( "Заголовки", Заголовки );
	Результат.Вставить( "Таймаут", ПараметрыСоединения.Таймаут );
	
	Возврат Результат;
	
КонецФункции

// ЗагрузитьФайл возвращает скачанный с GitLab сервера необработанный (RAW) файл с его описанием.
// 
// Параметры:
// 	ПараметрыСоединения - см. ПолучитьПараметрыСоединения
// 	ПутьКФайлу - Строка - относительный путь к файлу в URL-кодировке,
// 			например "/api/v4/projects/1/repository/files/%D0%B0/%D0%B0%2F%D0%B1%2F%D0%B2.epf/raw?ref=123af"
// 	
// Возвращаемое значение:
// 	см. ОписаниеЗагруженногоФайла
//
Функция ЗагрузитьФайл( Знач ПараметрыСоединения, Знач ПутьКФайлу )
	
	Результат = ОписаниеЗагруженногоФайла();
	
	Результат.RAWFilePath = ПутьКФайлу;

	АдресСервера = ПараметрыСоединения.АдресСервера + ПутьКФайлу; // Строка

	Попытка
		
		Если ( ПустаяСтрока(ПутьКФайлу) ) Тогда
			
			ВызватьИсключение Логи.Сообщения().NO_RAWPATH;
			
		КонецЕсли;
		
		Ответ = КоннекторHTTP.Get( АдресСервера, Неопределено, ДополнительныеПараметры(ПараметрыСоединения) );
		
		Если ( НЕ СервисыHTTP.КодыСостояния().IsOk(Ответ.КодСостояния) ) Тогда
			
			ВызватьИсключение СервисыHTTP.КодыСостояния().НайтиИдентификаторПоКоду( Ответ.КодСостояния );
		
		КонецЕсли;
		
		Результат.ИмяФайла = ПолучитьИмяФайла( Ответ );
		
		Результат.ДвоичныеДанные = КоннекторHTTP.КакДвоичныеДанные( Ответ );
		
	Исключение
		
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		
		Результат.ИнформацияОбОшибке = ФайлыВнешнегоХранилища.ПолучитьОшибкуЗагрузкиФайла(
				ПредставлениеОшибки, АдресСервера );
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// ПолучитьИмяФайла возвращает имя файла из заголовков ответа веб-сервиса.
// 
// Параметры:
//  Ответ - см. КоннекторHTTP.ВызватьМетод
// 
// Возвращаемое значение:
//  Строка - имя файла;
//
Функция ПолучитьИмяФайла( Знач Ответ )
	
	Возврат Ответ.Заголовки.Получить( "X-Gitlab-File-Name" );
	
КонецФункции

#Область Сервисы

Функция ШаблонИмениМетодаИСобытиеСовпадают( Знач Запрос, Знач Событие )
	
	ИмяМетода = Запрос.ПараметрыURL.Get( "ИмяМетода" ); // Неопределено, Строка
	
	Возврат ( ИмяМетода <> Неопределено И СтрНайти(НРег(Событие), НРег(ИмяМетода)) <> 0 );
	
КонецФункции

Функция СоздатьВнешнийЗапрос( Знач Запрос )
	
	ВнешнийЗапрос = ВнешниеЗапросы.Создать( Запрос.ПолучитьТелоКакСтроку() );
	
	Если НЕ ВнешнийЗапрос.ПроверитьЗаполнение() Тогда
		
		ВызватьИсключение Логи.Сообщения().BAD_JSON_DATA;
		
	КонецЕсли;
	
	Возврат ВнешнийЗапрос;
	
КонецФункции

#Область Проверки

Процедура ПроверитьДоступностьСервиса( Ответ )
	
	Если ( НЕ СервисыHTTP.КодыСостояния().isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ( НЕ НастройкиСервисов.ОбработкаЗапросаВключена(Метаданные.HTTPСервисы.GitLab) ) Тогда
		
		КодСостояния = СервисыHTTP.КодыСостояния().НайтиКодПоИдентификатору( "LOCKED" );
		
		Ответ = СервисыHTTP.СоздатьОтвет( КодСостояния, Логи.Сообщения().ОбработкаЗапросовОтключена );
		
		Логи.Ошибка( Логи.События().ВебСервис, Логи.Сообщения().ОбработкаЗапросовОтключена,
			Логи.КонтекстОтветаСервиса(Ответ, Метаданные.HTTPСервисы.GitLab) );
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаголовки( Знач Запрос, Ответ )
	
	Если ( НЕ СервисыHTTP.КодыСостояния().isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Токен = СервисыHTTP.НайтиЗаголовок( Запрос, "X-Gitlab-Token" );
	
	Если ( НЕ ЗначениеЗаполнено(Токен) ) Тогда
		
		КодСостояния = СервисыHTTP.КодыСостояния().НайтиКодПоИдентификатору( "BAD_REQUEST" );
		
		Ответ = СервисыHTTP.СоздатьОтвет( КодСостояния, Логи.Сообщения().NO_TOKEN );
		
		Логи.Ошибка( Логи.События().ВебСервис, Логи.Сообщения().NO_TOKEN,
			Логи.КонтекстОтветаСервиса(Ответ, Метаданные.HTTPСервисы.GitLab) );
		
		Возврат;
		
	КонецЕсли;
	
	Событие = СервисыHTTP.НайтиЗаголовок( Запрос, "X-Gitlab-Event" ); // Неопределено, Строка
	
	Если ( НЕ ЗначениеЗаполнено(Событие) ) Тогда
		
		КодСостояния = СервисыHTTP.КодыСостояния().НайтиКодПоИдентификатору( "BAD_REQUEST" );
		
		Ответ = СервисыHTTP.СоздатьОтвет( КодСостояния, Логи.Сообщения().NO_EVENT );
		
		Логи.Ошибка( Логи.События().ВебСервис, Логи.Сообщения().NO_EVENT,
			Логи.КонтекстОтветаСервиса(Ответ, Метаданные.HTTPСервисы.GitLab) );
		
		Возврат;
		
	КонецЕсли;
	
	Если ( НЕ ШаблонИмениМетодаИСобытиеСовпадают(Запрос, Событие) ) Тогда
		
		КодСостояния = СервисыHTTP.КодыСостояния().НайтиКодПоИдентификатору( "BAD_REQUEST" );
		
		Ответ = СервисыHTTP.СоздатьОтвет( КодСостояния, Логи.Сообщения().НеверноеСобытие );
		
		Логи.Ошибка( Логи.События().ВебСервис, Логи.Сообщения().НеверноеСобытие,
			Логи.КонтекстОтветаСервиса(Ответ, Метаданные.HTTPСервисы.GitLab) );
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеОбработчика( Знач Аутентификация, Ответ )
	
	Если ( НЕ СервисыHTTP.КодыСостояния().isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ( НЕ ЗначениеЗаполнено(Аутентификация) ) Тогда
		
		КодСостояния = СервисыHTTP.КодыСостояния().НайтиКодПоИдентификатору( "NOT_FOUND" );
		
		Ответ = СервисыHTTP.СоздатьОтвет( КодСостояния, Логи.Сообщения().REQUEST_HANDLER_NOT_FOUND );
		
		Логи.Ошибка( Логи.События().ВебСервис, Логи.Сообщения().REQUEST_HANDLER_NOT_FOUND,
			Логи.КонтекстОтветаСервиса(Ответ, Метаданные.HTTPСервисы.GitLab) );
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Аутентифицировать( Знач Аутентификация, Знач Запрос, Ответ )
	
	Если ( НЕ СервисыHTTP.КодыСостояния().isOk(Ответ.КодСостояния) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Токен = СервисыHTTP.НайтиЗаголовок( Запрос, "X-Gitlab-Token" );
	
	Если ( Аутентификация.Токен <> Токен ) Тогда
		
		КодСостояния = СервисыHTTP.КодыСостояния().НайтиКодПоИдентификатору( "UNAUTHORIZED" );
		
		Ответ = СервисыHTTP.СоздатьОтвет( КодСостояния, Логи.Сообщения().ТокенНеНайден );
			
		Логи.Ошибка( Логи.События().ВебСервис, Логи.Сообщения().ТокенНеНайден,
			Логи.КонтекстОтветаСервиса(Ответ, Метаданные.HTTPСервисы.GitLab) );
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
