// @strict-types

#Область ПрограммныйИнтерфейс

// ОбработкаЗапросаВключена возвращает значение текущего статуса настройки разрешения обработки внешних запросов
// для переданного в метод сервиса.
// 
// Параметры:
//  Сервис - ОбъектМетаданныхHTTPСервис - проверяемый сервис;
// 
// Возвращаемое значение:
//  Булево - Истина - обработка внешнего запроса для сервиса включена, иначе - Ложь;
//
Функция ОбработкаЗапросаВключена( Знач Сервис ) Экспорт
	
	Если ( Сервис = Метаданные.HTTPСервисы.GitLab ) Тогда
		
		Возврат ОбрабатыватьГитлабЗапрос();
		
	Иначе
		
		Возврат ОбрабатыватьПользовательскийЗапрос();
		
	КонецЕсли;
	
КонецФункции

// ПолучитьСтатусКакОтветСервиса возвращает ответ HTTP-сервиса с текущим статусом разрешения обработки
// внешних запросов для переданного в метод сервиса.
// 
// Параметры:
//  Сервис - ОбъектМетаданныхHTTPСервис - проверяемый сервис;
// 
// Возвращаемое значение:
//  HTTPСервисОтвет - ответ HTTP-сервиса с текущим статусом функциональности: включен/отключен;
//
Функция ПолучитьСтатусКакОтветСервиса( Знач Сервис ) Экспорт
	
	Возврат СервисыHTTP.СоздатьОтветВФорматеJSON( ПолучитьСообщениеСтатуса(Сервис) );
	
КонецФункции

// TODO гетеры и сеттеры ушли в приват? если да, то убрать Экспорт и избыточне тесты

// ПолучитьПользователяВнешнегоСервиса возвращает имя пользователя для подключения
// к сервису внешней информационной базы.
// 
// Возвращаемое значение:
// 	Строка - имя пользователя (макс. 256 символов);
//
Функция ПолучитьПользователяВнешнегоСервиса() Экспорт
	
	Возврат Константы.ПользовательВнешнегоСервиса.Получить();
	
КонецФункции

// ПолучитьПарольВнешнегоСервиса возвращает пароль для подключения к сервису внешней информационной базы.
// 
// Возвращаемое значение:
// 	Строка - пароль (макс. 256 символов);
//
Функция ПолучитьПарольВнешнегоСервиса() Экспорт
	
	Возврат Константы.ПарольВнешнегоСервиса.Получить();
	
КонецФункции

// ПолучитьТаймаутВнешнегоСервиса возвращает таймаут подключения к сервису внешней информационной базы.
//
// Возвращаемое значение:
// 	Число - таймаут соединения, сек (0 - таймаут не установлен);
//
Функция ПолучитьТаймаутВнешнегоСервиса() Экспорт
	
	Возврат Константы.ТаймаутВнешнегоСервиса.Получить();
	
КонецФункции

// ПолучитьИмяФайлаСхемыМаршрута возвращает имя файла со схемой маршрутов.
//
// Возвращаемое значение:
// 	Строка - имя файла (макс. 50 символов);
//
Функция ПолучитьИмяФайлаСхемыМаршрута() Экспорт
	
	Возврат Константы.ИмяФайлаСхемыМаршрута.Получить();
	
КонецФункции

// ПолучитьТокенГитлаб возвращает токен подключения к GitLab REST API (v4),
// см. https://docs.gitlab.com/ee/api/rest/.
//
// Возвращаемое значение:
// 	Строка - токен (макс. 50 символов);
// 
Функция ПолучитьТокенГитлаб() Экспорт
	
	Возврат Константы.ТокенГитлаб.Получить();
	
КонецФункции

// ПолучитьТаймаутГитлаб возвращает таймаут подключения к GitLab REST API (v4),
// см. https://docs.gitlab.com/ee/api/rest/.
//
// Возвращаемое значение:
// 	Число - таймаут соединения, сек (0 - таймаут не установлен);
//
Функция ПолучитьТаймаутГитлаб() Экспорт
	
	Возврат Константы.ТаймаутГитлаб.Получить();
	
КонецФункции

// ПолучитьНастройкиСервисаОбработкиЗапросаГитлаб возвращает все текущие настройки сервиса.
// 
// Возвращаемое значение:
// ФиксированнаяСтруктура - набор параметров:
// * ОбрабатыватьГитлабЗапрос - Булево - Истина - обрабатывать запросы с сервера GitLab, иначе - Ложь;
// * ИмяФайлаСхемыМаршрута - см. НастройкиСервисов.ПолучитьИмяФайлаСхемыМаршрута
// * ТокенГитлаб - см. НастройкиСервисов.ПолучитьТокенГитлаб
// * ТаймаутГитлаб - см. НастройкиСервисов.ПолучитьТаймаутГитлаб
// * ПользовательВнешнегоСервиса - см. НастройкиСервисов.ПолучитьПользователяВнешнегоСервиса
// * ПарольВнешнегоСервиса - см. НастройкиСервисов.ПолучитьПарольВнешнегоСервиса
// * ТаймаутВнешнегоСервиса - см. НастройкиСервисов.ПолучитьТаймаутВнешнегоСервиса 
//
Функция ПолучитьНастройкиСервисаОбработкиЗапросаГитлаб() Экспорт
	
	Результат = НастройкиСервисовКлиентСервер.НастройкиСервисаОбработкиЗапросаГитлаб();
	Результат.ОбрабатыватьГитлабЗапрос = ОбрабатыватьГитлабЗапрос();
	Результат.ИмяФайлаСхемыМаршрута = ПолучитьИмяФайлаСхемыМаршрута();
	Результат.ТокенГитлаб = ПолучитьТокенГитлаб();
	Результат.ТаймаутГитлаб = ПолучитьТаймаутГитлаб();
	Результат.ПользовательВнешнегоСервиса = ПолучитьПользователяВнешнегоСервиса();
	Результат.ПарольВнешнегоСервиса = ПолучитьПарольВнешнегоСервиса();
	Результат.ТаймаутВнешнегоСервиса = ПолучитьТаймаутВнешнегоСервиса();
	
	Возврат ( Новый ФиксированнаяСтруктура(Результат) );
	
КонецФункции

// УстановитьНастройкиСервисаОбработкиЗапросаГитлаб выполняет установку настроек сервиса переданными значениями.
//
// Параметры:
// 	Настройки - см. НастройкиСервисовКлиентСервер.НастройкиСервисаОбработкиЗапросаГитлаб
//
Процедура УстановитьНастройкиСервисаОбработкиЗапросаГитлаб( Знач Настройки ) Экспорт
	
	Константы.ОбрабатыватьГитлабЗапрос.Установить( Настройки.ОбрабатыватьГитлабЗапрос );
	Константы.ТокенГитлаб.Установить( Настройки.ТокенГитлаб );
	Константы.ТаймаутГитлаб.Установить( Настройки.ТаймаутГитлаб );
	Константы.ИмяФайлаСхемыМаршрута.Установить( Настройки.ИмяФайлаСхемыМаршрута );
	Константы.ПользовательВнешнегоСервиса.Установить( Настройки.ПользовательВнешнегоСервиса );
	Константы.ПарольВнешнегоСервиса.Установить( Настройки.ПарольВнешнегоСервиса );
	Константы.ТаймаутВнешнегоСервиса.Установить( Настройки.ТаймаутВнешнегоСервиса );
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбрабатыватьПользовательскийЗапрос()

	Возврат Константы.ОбрабатыватьПользовательскийЗапрос.Получить();

КонецФункции

Функция ОбрабатыватьГитлабЗапрос()

	Возврат Константы.ОбрабатыватьГитлабЗапрос.Получить();

КонецФункции

Функция ПолучитьСообщениеСтатуса( Знач Сервис )
	
	Если ( ОбработкаЗапросаВключена(Сервис) ) Тогда
		
		Возврат СервисыHTTP.ПолучитьСхемуСообщения( Логи.Сообщения().MESSAGE_ENABLED );
		
	Иначе
		
		Возврат СервисыHTTP.ПолучитьСхемуСообщения( Логи.Сообщения().MESSAGE_DISABLED );
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
