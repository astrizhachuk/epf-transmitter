// @strict-types

#Область ПрограммныйИнтерфейс

// ОбработатьЗапрос для переданного в метод обработчика внешних запросов выполняет обработку этого запроса в фоне
// с последующей отправкой файлов потребителям.
// 
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов;
//  ВнешнийЗапрос - см. ОбработкаОбъект.ВнешнийЗапрос
// 
// Возвращаемое значение:
//  Неопределено, ФоновоеЗадание - фоновое задание обработки запроса;
//
Функция ОбработатьЗапрос( Знач Обработчик, Знач ВнешнийЗапрос ) Экспорт

	Идентификатор = ВнешнийЗапрос.ПолучитьИдентификаторСобытия();
	
	Параметры = ПараметрыЗагрузкиИОтправки( Обработчик, Идентификатор, ВнешнийЗапрос );
	
	Возврат ВыполнитьФоновое( Обработчик, Идентификатор, Параметры, ИмяМетодЗагрузитьИОтправитьФайлы() );
	
КонецФункции

// ОбработатьЗагруженныеДанные для переданного в метод обработчика внешних запросов по идентификатору выполняет поиск
// и загрузку из информационной базы необходимых данных и создает фоновое задание на их обработку
// с последующей отправкой файлов потребителям. Используется для любых повторных запусков обработки и отправки данных.
// 
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов;
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - уникальный идентификатор данных для обработчика;
// 
// Возвращаемое значение:
//  Неопределено, ФоновоеЗадание - фоновое задание обработки данных;
//
Функция ОбработатьЗагруженныеДанные( Знач Обработчик, Знач Идентификатор ) Экспорт
	
	ВнешнийЗапрос = ВнешниеЗапросы.Восстановить( Обработчик, Идентификатор );
	
	Если ( ВнешнийЗапрос = Неопределено ) Тогда
	
		Параметры = Логи.КонтекстОбработкиСобытия( Обработчик, ПолучитьКраткийИдентификатор(Идентификатор) );
		
		Логи.Ошибка( Логи.События().ОбработкаДанных, Логи.Сообщения().NO_REQUEST_DATA, Параметры );
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Файлы = ФайлыВнешнегоХранилища.Восстановить( Обработчик, Идентификатор );
	
	Если ( Файлы = Неопределено ) Тогда
		
		Параметры = Логи.КонтекстОбработкиСобытия( Обработчик, ПолучитьКраткийИдентификатор(Идентификатор) );
		
		Логи.Ошибка( Логи.События().ОбработкаДанных, Логи.Сообщения().NO_UPLOAD_DATA, Параметры );
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ЗапуститьОтправкуФайлов( Обработчик, ВнешнийЗапрос, Файлы );
	
КонецФункции

// ПолучитьОтборыФоновыхЗаданий возвращает коллекцию структур-отборов для поиска фоновых заданий,
// связанных с обработкой данных по указанному идентификатору коммита.
// Поиск может выполняться как по точному значению ключа, так и по его начальной части (префиксу).
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита.
// 
// Возвращаемое значение:
//  Массив из Структура - коллекция отборов:
//	* ИмяМетода - Строка - имя метода для отбора.
//	* Ключ - Строка - ключ для точного поиска фонового задания. Используется, если поле "Префикс" пустое.
//	* Префикс - Строка - префикс для поиска всех заданий, ключ которых начинается с этой строки.
//							Если это поле заполнено, поиск по точному значению поля "Ключ" не выполняется.
//
Функция ПолучитьОтборыФоновыхЗаданий( Знач Идентификатор ) Экспорт

	Ключ = ПолучитьКраткийИдентификатор( Идентификатор );
	
	Отборы = Новый Массив(); // Массив из см. ОтборЗаданийПоОбработкеДанных
	Отборы.Добавить( ОтборПоМетодуОтправитьФайлы(Ключ) );
	Отборы.Добавить( ОтборПоМетодуЗагрузитьИОтправитьФайлы(Ключ) );
	Отборы.Добавить( ОтборПоОтправитьФайлПолучателю(Ключ) );
	
	Возврат Отборы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// ОтправитьФайлы выполняет распределение файлов по маршрутам и запускает задания на отправку этих файлов адресатам.
// 
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов;
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - уникальный идентификатор данных для обработчика;
//  СериализованныйЗапрос - Строка - результат сериализации объекта внешнего запроса;
//  Файлы - Массив из см. ФайловыеМодели.ФайлИзХранилища
// 
// Возвращаемое значение:
//  Массив из ФоновоеЗадание - запущенные фоновые задания.
//
Функция ОтправитьФайлы( Знач Обработчик, Знач Идентификатор, Знач СериализованныйЗапрос, Знач Файлы ) Экспорт

	ВнешнийЗапрос = ВнешниеЗапросы.СоздатьИзСериализованныхДанных(СериализованныйЗапрос);
	
	ПроверитьФайлы( Обработчик, Идентификатор, Файлы );
	
	ФайлыСМаршрутами = Распределить( Обработчик, Идентификатор, ВнешнийЗапрос, Файлы );
	
	Возврат Отправить( Обработчик, Идентификатор, ФайлыСМаршрутами );
	
КонецФункции

// ЗагрузитьИОтправитьФайлы выполняет загрузку файлов из внешнего хранилища, распределяет файлы по маршрутам
// и запускает задания на отправку этих файлов адресатам.
// 
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов;
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - уникальный идентификатор данных для обработчика;
//  СериализованныйЗапрос - Строка - результат сериализации объекта внешнего запроса;
// 
// Возвращаемое значение:
//  Массив из ФоновоеЗадание - запущенные фоновые задания.
//
Функция ЗагрузитьИОтправитьФайлы( Знач Обработчик, Знач Идентификатор, Знач СериализованныйЗапрос ) Экспорт

	ВнешнийЗапрос = ВнешниеЗапросы.СоздатьИзСериализованныхДанных( СериализованныйЗапрос );
	
	Файлы = ЗагрузитьФайлы( Обработчик, Идентификатор, ВнешнийЗапрос );
	
	ВнешнийЗапрос.ЗаполнитьСхемыМаршрутов( Файлы, НастройкиСервисов.ПолучитьИмяФайлаСхемыМаршрута() );
	
	ПроверитьФайлы( Обработчик, Идентификатор, Файлы );
	
	СохранитьВнешнийЗапрос( Обработчик, Идентификатор, ВнешнийЗапрос );
	
	СохранитьВнешниеФайлы( Обработчик, Идентификатор, Файлы );
	
	ФайлыСМаршрутами = Распределить( Обработчик, Идентификатор, ВнешнийЗапрос, Файлы );
	
	Возврат Отправить( Обработчик, Идентификатор, ФайлыСМаршрутами );
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьФоновое( Знач Обработчик, Знач Идентификатор, Знач Параметры, Знач Метод )
	
	Результат = Неопределено;
	
	Ключ = ПолучитьКраткийИдентификатор( Идентификатор );
	
	Попытка
		
		Результат = ФоновыеЗадания.Выполнить( ПолучитьПолныйПутьКМетоду(Метод), Параметры, Ключ );
		
	Исключение
		
		Сообщение = ОбработкаОшибок.ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		
		Логи.Ошибка( Логи.События().ОбработкаДанных, Сообщение, Логи.КонтекстОбработкиСобытия(Обработчик, Ключ) );
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыЗагрузкиИОтправки( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос)
	
	Результат = Новый Массив(); // Массив из Строка, СправочникСсылка.ОбработчикиВнешнихЗапросов
	Результат.Добавить( Обработчик );
	Результат.Добавить( Идентификатор );
	Результат.Добавить( ВнешнийЗапрос.Сериализовать() );
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОтправкиФайлов( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос, Знач Файлы )
	
	// BSLLS:LineLength-off
	Результат = ПараметрыЗагрузкиИОтправки( Обработчик, Идентификатор, ВнешнийЗапрос ); // Массив из Строка, СправочникСсылка.ОбработчикиВнешнихЗапросов, Массив
	// BSLLS:LineLength-on
	
	Результат.Добавить( Файлы );
	
	Возврат Результат;
	
КонецФункции

Функция ЗапуститьОтправкуФайлов( Знач Обработчик, Знач ВнешнийЗапрос, Знач Файлы )
	
	Идентификатор = ВнешнийЗапрос.ПолучитьИдентификаторСобытия();
	
	Параметры = ПараметрыОтправкиФайлов(Обработчик, Идентификатор, ВнешнийЗапрос, Файлы );
	
	Возврат ВыполнитьФоновое(Обработчик, Идентификатор, Параметры, ИмяМетодаОтправкиФайла());
	
КонецФункции

Функция ЗагрузитьФайлы( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос )
	
	ПараметрыХранилища = ВнешниеЗапросы.ПолучитьПараметрыХранилища( ВнешнийЗапрос );
	
	ФайлыКЗагрузке = ВнешниеЗапросы.ОпределитьФайлыКЗагрузке(
		ВнешнийЗапрос, НастройкиСервисов.ПолучитьИмяФайлаСхемыМаршрута() );
	
	ЗагруженныеФайлы = ФайлыВнешнегоХранилища.ПолучитьИзХранилища( ФайлыКЗагрузке, ПараметрыХранилища );
		
	ЛогироватьРезультатЗагрузки( Обработчик, Идентификатор, ЗагруженныеФайлы );
		
	Возврат ПолучитьФайлыБезОшибок( ЗагруженныеФайлы );

КонецФункции

Процедура ПроверитьФайлы( Знач Обработчик, Знач Идентификатор, Знач Файлы )
	
	Если ( НЕ ЗначениеЗаполнено(Файлы) ) Тогда
		
		Параметры = Логи.КонтекстОбработкиСобытия( Обработчик, ПолучитьКраткийИдентификатор(Идентификатор) );
		
		ВызватьИсключение Логи.Ошибка( Логи.События().ОбработкаДанных, Логи.Сообщения().NO_UPLOAD_DATA, Параметры );
			
	КонецЕсли;
	
КонецПроцедуры

Функция Распределить( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос, Знач Файлы )
	
	СхемыМаршрутов = ВнешнийЗапрос.ПолучитьПредставленияСхемМаршрутовКИсполнению();
	
	ФайлыСМаршрутами = Маршрутизация.РаспределитьФайлыПоМаршрутам( Обработчик, Идентификатор, СхемыМаршрутов, Файлы );
	
	Возврат ФайлыСМаршрутами;
	
КонецФункции

Функция Отправить( Знач Обработчик, Знач Идентификатор, Знач ФайлыСМаршрутами )
		
	ЗапущенныеЗадания = Получатели.ОтправитьФайлыВФоне(
		Обработчик, Идентификатор, УдалитьФайлыБезМаршрутов(ФайлыСМаршрутами) );
		
	Ключ = ПолучитьКраткийИдентификатор( Идентификатор );
	
	Сообщение = СтрШаблон( Логи.Сообщения().ЗапускОтправкиФайлов, ЗапущенныеЗадания.Количество() );
	
	Логи.Информация( Логи.События().ОбработкаДанных, Сообщение, Логи.КонтекстОбработкиСобытия(Обработчик, Ключ) );
	
	Возврат ЗапущенныеЗадания;
	
КонецФункции

Функция УдалитьФайлыБезМаршрутов( Знач Файлы )
	
	Результат = Новый Массив(); // см. Маршрутизация.РаспределитьФайлыПоМаршрутам
	
	Для Каждого Файл Из Файлы Цикл
			
		Если ( НЕ ЗначениеЗаполнено(Файл.Маршруты) ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Добавить( Файл );
				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФайлыБезОшибок( Знач Файлы )
	
	Результат = Новый Массив(); // Массив из см. ФайловыеМодели.ФайлИзХранилища
	
	Для Каждого Файл Из Файлы Цикл
			
		Если ( Файл.ИнформацияОбОшибке <> Неопределено ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Добавить( Файл );
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// ПолучитьКраткийИдентификатор получает краткий идентификатор коммита из полного идентификатора.
// 
// Параметры:
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КраткийИдентификаторКоммита
//
Функция ПолучитьКраткийИдентификатор( Знач Идентификатор )
	
	Возврат СистемаУправленияВерсиями.ПолучитьКраткийИдентификатор( Строка(Идентификатор) );

КонецФункции

// Формирует префикс из ключа (краткого идентификатора коммита). Используется для поиска всех фоновых заданий,
// связанных с этим идентификатором, например, заданий по отправке файлов разным получателям.
//
// Параметры:
//   Ключ - ОпределяемыйТип.КраткийИдентификаторКоммита
//
// Возвращаемое значение:
//   Строка - префикс ключа фонового задания для поиска по началу строки.
//
Функция ПолучитьПрефикс( Знач Ключ )
	
	Возврат Ключ + ПараметрыСеанса.РазделительКлюча;
	
КонецФункции

#Область Логирование

Процедура ЛогироватьУспешноеСохранениеДанных( Знач Обработчик, Знач Идентификатор, Знач ИмяОбъекта )
	
	Ключ = ПолучитьКраткийИдентификатор( Идентификатор );
	
	Сообщение = ИмяОбъекта + ПараметрыСеанса.РазделительСообщений + Логи.Сообщения().ДанныеСохранены;
	
	Логи.Информация( Логи.События().ОбработкаДанных, Сообщение, Логи.КонтекстОбработкиСобытия(Обработчик, Ключ) );
	
КонецПроцедуры

Процедура ЛогироватьОшибкуСохраненияДанных( Знач Обработчик, Знач Идентификатор, Знач ИмяОбъекта, Знач Ошибка )
	
	Ключ = ПолучитьКраткийИдентификатор( Идентификатор );
	
	ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки( Ошибка );
	
	Сообщение = СтрШаблон( Логи.Сообщения().DUMP_ERROR, ИмяОбъекта, ПредставлениеОшибки );
	
	Логи.Ошибка( Логи.События().ОбработкаДанных, Сообщение, Логи.КонтекстОбработкиСобытия(Обработчик, Ключ) );
	
КонецПроцедуры

Процедура ЛогироватьРезультатЗагрузки( Знач Обработчик, Знач Идентификатор, Знач Файлы )
	
	Ключ = ПолучитьКраткийИдентификатор( Идентификатор );
	
	Для Каждого Файл Из Файлы Цикл
			
		Если ( Файл.ИнформацияОбОшибке = Неопределено ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки( Файл.ИнформацияОбОшибке );
		
		Логи.Ошибка( Логи.События().ОбработкаДанных, ПредставлениеОшибки, Логи.КонтекстОбработкиСобытия(Обработчик, Ключ) );
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхВИнформационнуюБазу

Процедура СохранитьВнешнийЗапрос( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос )
	
	ИмяРегистраСведений = Метаданные.РегистрыСведений.ВнешниеЗапросы.Синоним;
	
	Попытка
		
		ВнешниеЗапросы.Сохранить( Обработчик, Идентификатор, ВнешнийЗапрос );
		
	Исключение
		
		ЛогироватьОшибкуСохраненияДанных( Обработчик, Идентификатор, ИмяРегистраСведений, ИнформацияОбОшибке() );
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЛогироватьУспешноеСохранениеДанных( Обработчик, Идентификатор, ИмяРегистраСведений );
	
КонецПроцедуры

Процедура СохранитьВнешниеФайлы( Знач Обработчик, Знач Идентификатор, Знач Файлы )
	
	ИмяРегистраСведений = Метаданные.РегистрыСведений.ВнешниеФайлы.Синоним;
	
	Попытка
		
		ФайлыВнешнегоХранилища.Сохранить( Обработчик, Идентификатор, Файлы );
		
	Исключение
		
		ЛогироватьОшибкуСохраненияДанных( Обработчик, Идентификатор, ИмяРегистраСведений, ИнформацияОбОшибке() );
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЛогироватьУспешноеСохранениеДанных( Обработчик, Идентификатор, ИмяРегистраСведений );
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

Функция ИмяМодуля()
	
	Возврат "ОбработкаДанных";
	
КонецФункции

// ПолучитьПолныйПутьКМетоду возвращает полный путь к методу вместе с именем модуля.
// 
// Параметры:
//  ИмяМетода - Строка - имя метода.
// 
// Возвращаемое значение:
//  Строка - полный путь к методу в формате "ИмяМодуля.ИмяМетода".
//
Функция ПолучитьПолныйПутьКМетоду( Знач ИмяМетода )
	
	Если ( СтрНайти(ИмяМетода, ".") > 0 ) Тогда
	
		Возврат ИмяМетода;
	
	КонецЕсли;
	
	Возврат ИмяМодуля() + "." + ИмяМетода;
	
КонецФункции

// ОтборЗаданийПоОбработкеДанных формирует отбор фоновых заданий.
// 
// Параметры:
//  ИмяМетода - Строка
//  Ключ - ОпределяемыйТип.КраткийИдентификаторКоммита
//  Префикс - Строка - (необязательно) префикс ключа фонового задания для поиска по началу строки.
//
// Возвращаемое значение:
//  Структура - отбор фоновых заданий:
// * ИмяМетода - Строка - имя метода для отбора.
// * Ключ - ОпределяемыйТип.КраткийИдентификаторКоммита - ключ фонового задания для отбора.
// * Префикс - Строка - если непустой, используется для дополнительного отбора заданий по началу строки их ключа.
//
Функция ОтборЗаданийПоОбработкеДанных( Знач ИмяМетода, Знач Ключ, Знач Префикс = "" )
	
	Возврат Новый Структура( "ИмяМетода, Ключ, Префикс", ПолучитьПолныйПутьКМетоду(ИмяМетода), Ключ, Строка(Префикс) );
	
КонецФункции

Функция ИмяМетодаОтправкиФайла()
	
	Возврат "ОтправитьФайлы";
	
КонецФункции

// ОтборПоМетодуОтправитьФайлы формирует отбор фоновых заданий по методу ОтправитьФайлы.
// 
// Параметры:
//  Ключ - ОпределяемыйТип.КраткийИдентификаторКоммита
// 
// Возвращаемое значение:
//	см. ОтборЗаданийПоОбработкеДанных
//  
Функция ОтборПоМетодуОтправитьФайлы( Знач Ключ )
	
	Возврат ОтборЗаданийПоОбработкеДанных( ИмяМетодаОтправкиФайла(), Ключ );
	
КонецФункции

Функция ИмяМетодЗагрузитьИОтправитьФайлы()
	
	Возврат "ЗагрузитьИОтправитьФайлы";
	
КонецФункции

Функция ИмяМетодаОтправитьФайл()
	
	Возврат "Получатели.ОтправитьФайл";
	
КонецФункции

// ОтборПоМетодуЗагрузитьИОтправитьФайлы формирует отбор фоновых заданий по методу ЗагрузитьИОтправитьФайлы.
// 
// Параметры:
//  Ключ - ОпределяемыйТип.КраткийИдентификаторКоммита
// 
// Возвращаемое значение:
//	см. ОтборЗаданийПоОбработкеДанных
// 
Функция ОтборПоМетодуЗагрузитьИОтправитьФайлы( Знач Ключ )
	
	Возврат ОтборЗаданийПоОбработкеДанных( ИмяМетодЗагрузитьИОтправитьФайлы(), Ключ );
	
КонецФункции

// ОтборПоОтправитьФайлПолучателю формирует отбор фоновых заданий по методу ОтправитьФайл.
// 
// Параметры:
//  Ключ - ОпределяемыйТип.КраткийИдентификаторКоммита
// 
// Возвращаемое значение:
//  см. ОтборЗаданийПоОбработкеДанных
//
Функция ОтборПоОтправитьФайлПолучателю( Знач Ключ )
	
	Возврат ОтборЗаданийПоОбработкеДанных( ИмяМетодаОтправитьФайл(), "", ПолучитьПрефикс(Ключ) );
	
КонецФункции

#КонецОбласти

#КонецОбласти
