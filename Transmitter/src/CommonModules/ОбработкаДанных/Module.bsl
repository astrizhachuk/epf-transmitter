// @strict-types

#Область ПрограммныйИнтерфейс

// ОбработатьЗапрос для переданного в метод обработчика внешних запросов выполняет обработку этого запроса в фоне
// с последующей отправкой файлов потребителям.
// 
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов;
//  ВнешнийЗапрос - см. ОбработкаОбъект.ВнешнийЗапрос
// 
// Возвращаемое значение:
//  Неопределено, ФоновоеЗадание - фоновое задание обработки запроса;
//
Функция ОбработатьЗапрос( Знач Обработчик, Знач ВнешнийЗапрос ) Экспорт

	Идентификатор = ВнешнийЗапрос.ПолучитьИдентификаторСобытия();
	
	Параметры = ПараметрыЗагрузкиИОтправки( Обработчик, Идентификатор, ВнешнийЗапрос );
	
	Возврат ВыполнитьФоновое(Обработчик, Идентификатор, Параметры, МетодЗагрузитьИОтправитьФайлы());
	
КонецФункции

// ОбработатьЗагруженныеДанные для переданного в метод обработчика внешних запросов по идентификатору выполняет поиск
// и загрузку из информационной базы необходимых данных и создает фоновое задание на их обработку
// с последующей отправкой файлов потребителям. Используется для любых повторных запусков обработки и отправки данных.
// 
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов;
//  Идентификатор - Строка - уникальный идентификатор данных для обработчика;
// 
// Возвращаемое значение:
//  Неопределено, ФоновоеЗадание - фоновое задание обработки данных;
//
Функция ОбработатьЗагруженныеДанные( Знач Обработчик, Знач Идентификатор ) Экспорт
	
	ВнешнийЗапрос = ВнешниеЗапросы.Восстановить( Обработчик, Идентификатор );
	
	Если ( ВнешнийЗапрос = Неопределено ) Тогда
	
		Параметры = Логи.Параметры( Идентификатор, Обработчик );
		
		Логи.Ошибка( Логи.События().ОбработкаДанных, Логи.Сообщения().NO_REQUEST_DATA, Параметры );
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Файлы = ФайлыВнешнегоХранилища.Восстановить( Обработчик, Идентификатор );
	
	Если ( Файлы = Неопределено ) Тогда
		
		Параметры = Логи.Параметры( Идентификатор, Обработчик );
		
		Логи.Ошибка( Логи.События().ОбработкаДанных, Логи.Сообщения().NO_UPLOAD_DATA, Параметры );
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ЗапуститьОтправкуФайлов( Обработчик, ВнешнийЗапрос, Файлы );
	
КонецФункции

// ПолучитьФоновыеЗаданияПоИдентификатору возвращает список фоновых заданий по обработке и отправке данных,
// содержащих уникальный идентификатор (commit SHA).
// 
// Параметры:
// 	Идентификатор - Строка - уникальный идентификатор данных;
// 	
// Возвращаемое значение:
// 	Массив из ФоновоеЗадание - отобранные фоновые задания;
//
Функция ПолучитьФоновыеЗаданияПоИдентификатору( Знач Идентификатор ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // BSLLS:SetPrivilegedMode-off
	
	Результат = Новый Массив();

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив( Результат,
		ФоновыеЗадания.ПолучитьФоновыеЗадания(ОборПоМетодуОтправитьФайлы(Идентификатор)) );
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив( Результат,
		ФоновыеЗадания.ПолучитьФоновыеЗадания(ОборПоМетодуЗагрузитьИОтправитьФайлы(Идентификатор)) );
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив( Результат,
		Фоновые.ОтобратьПоПрефиксуКлюча(ФильтрЗаданийОтправкиФайлов(), Идентификатор + "|") );
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// ОтправитьФайлы выполняет распределение файлов по маршрутам и запускает задания на отправку этих файлов адресатам.
// 
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов;
//  Идентификатор - Строка - уникальный идентификатор данных для обработчика;
//  СериализованныйЗапрос - Строка - результат сериализации объекта внешнего запроса;
//  Файлы - Массив из см. ФайлыВнешнегоХранилища.ОписаниеФайла
// 
// Возвращаемое значение:
//  Массив из см. Получатели.РезультатОтправкиФайла
//
Функция ОтправитьФайлы( Знач Обработчик, Знач Идентификатор, Знач СериализованныйЗапрос, Знач Файлы ) Экспорт

	ВнешнийЗапрос = ВнешниеЗапросы.СоздатьИзСериализованныхДанных(СериализованныйЗапрос);
	
	ПроверитьФайлы( Файлы, Обработчик, Идентификатор );
	
	ФайлыСМаршрутами = Распределить( Обработчик, Идентификатор, ВнешнийЗапрос, Файлы );
	
	Возврат Отправить( Обработчик, Идентификатор, ФайлыСМаршрутами );
	
КонецФункции

// ЗагрузитьИОтправитьФайлы выполняет загрузку файлов из внешнего хранилища, распределяет файлы по маршрутам
// и запускает задания на отправку этих файлов адресатам.
// 
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов;
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - уникальный идентификатор данных для обработчика;
//  СериализованныйЗапрос - Строка - результат сериализации объекта внешнего запроса;
// 
// Возвращаемое значение:
//  Массив из см. Получатели.РезультатОтправкиФайла
//
Функция ЗагрузитьИОтправитьФайлы( Знач Обработчик, Знач Идентификатор, Знач СериализованныйЗапрос ) Экспорт

	ВнешнийЗапрос = ВнешниеЗапросы.СоздатьИзСериализованныхДанных(СериализованныйЗапрос);
	
	Файлы = ЗагрузитьФайлы(Обработчик, Идентификатор, ВнешнийЗапрос);
	
	ВнешнийЗапрос.ЗаполнитьСхемыМаршрутов( Файлы, НастройкиСервисов.ПолучитьИмяФайлаСхемыМаршрута() );
	
	ПроверитьФайлы( Файлы, Обработчик, Идентификатор );
	
	СохранитьВнешнийЗапрос( Обработчик, Идентификатор, ВнешнийЗапрос );
	
	СохранитьВнешниеФайлы( Обработчик, Идентификатор, Файлы );
	
	ФайлыСМаршрутами = Распределить( Обработчик, Идентификатор, ВнешнийЗапрос, Файлы );
	
	Возврат Отправить( Обработчик, Идентификатор, ФайлыСМаршрутами );
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьФоновое( Знач Обработчик, Знач Идентификатор, Знач Параметры, Знач Метод )
	
	Результат = Неопределено;
	
	Попытка
		
		Результат = ФоновыеЗадания.Выполнить( ПолучитьПолныйПутьКМетоду(Метод), Параметры, Идентификатор );
		
	Исключение
		
		Сообщение = ОбработкаОшибок.ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		
		Логи.Ошибка( Логи.События().ОбработкаДанных, Сообщение, Логи.Параметры(Идентификатор, Обработчик) );
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыЗагрузкиИОтправки( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос)
	
	Результат = Новый Массив(); // Массив из Строка, СправочникСсылка.ОбработчикиВнешнихЗапросов
	Результат.Добавить( Обработчик );
	Результат.Добавить( Идентификатор );
	Результат.Добавить( ВнешнийЗапрос.Сериализовать() );
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОтправкиФайлов( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос, Знач Файлы )
	
	Результат = ПараметрыЗагрузкиИОтправки( Обработчик, Идентификатор, ВнешнийЗапрос ); // Массив из Строка, СправочникСсылка.ОбработчикиВнешнихЗапросов, Массив
	
	Результат.Добавить( Файлы );
	
	Возврат Результат;
	
КонецФункции

Функция ЗапуститьОтправкуФайлов( Знач Обработчик, Знач ВнешнийЗапрос, Знач Файлы )
	
	Идентификатор = ВнешнийЗапрос.ПолучитьИдентификаторСобытия();
	
	Параметры = ПараметрыОтправкиФайлов(Обработчик, Идентификатор, ВнешнийЗапрос, Файлы );
	
	Возврат ВыполнитьФоновое(Обработчик, Идентификатор, Параметры, МетодОтправитьФайлы());
	
КонецФункции

Функция ЗагрузитьФайлы( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос )
	
	ПараметрыХранилища = ВнешниеЗапросы.ПолучитьПараметрыХранилища( ВнешнийЗапрос );
	
	ФайлыКЗагрузке = ВнешниеЗапросы.ОпределитьФайлыКЗагрузке( ВнешнийЗапрос,
		НастройкиСервисов.ПолучитьИмяФайлаСхемыМаршрута() );
	
	ЗагруженныеФайлы = ФайлыВнешнегоХранилища.ПолучитьИзХранилища( ФайлыКЗагрузке, ПараметрыХранилища );
		
	ЛогироватьРезультатЗагрузки( Обработчик, Идентификатор, ЗагруженныеФайлы );
		
	Возврат ПолучитьФайлыБезОшибок( ЗагруженныеФайлы );

КонецФункции

Процедура ПроверитьФайлы( Знач Файлы, Знач Обработчик, Знач Идентификатор )
	
	Если ( НЕ ЗначениеЗаполнено(Файлы) ) Тогда
		
		Параметры = Логи.Параметры( Идентификатор, Обработчик );
		
		ВызватьИсключение Логи.Ошибка( Логи.События().ОбработкаДанных, Логи.Сообщения().NO_UPLOAD_DATA, Параметры);
			
	КонецЕсли;
	
КонецПроцедуры

Функция Распределить( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос, Знач Файлы )
	
	СхемыМаршрутов = ВнешнийЗапрос.ПолучитьПредставленияСхемМаршрутовКИсполнению();
	
	ФайлыСМаршрутами = Маршрутизация.РаспределитьФайлыПоМаршрутам( СхемыМаршрутов, Файлы );
	
	ЛогироватьРаспределениеФайловПоМаршрутам( Обработчик, Идентификатор, ФайлыСМаршрутами );
	
	Возврат ФайлыСМаршрутами;
	
КонецФункции

Функция Отправить( Знач Обработчик, Знач Идентификатор, Знач ФайлыСМаршрутами )
		
	ЗапущенныеЗадания = Получатели.ОтправитьФайлыВФоне( УдалитьФайлыБезМаршрутов(ФайлыСМаршрутами) );
	
	ЛогироватьЗапускЗаданийНаОтправкуФайлов( Обработчик, Идентификатор, ЗапущенныеЗадания );
	
	Возврат ЗапущенныеЗадания;
	
КонецФункции

Функция УдалитьФайлыБезМаршрутов( Знач Файлы )
	
	Результат = Новый Массив(); // см. Маршрутизация.РаспределитьФайлыПоМаршрутам
	
	Для Каждого Файл Из Файлы Цикл
			
		Если ( НЕ ЗначениеЗаполнено(Файл.Routes) ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Добавить( Файл );
				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФайлыБезОшибок( Знач Файлы )
	
	Результат = Новый Массив(); // Массив из см. ФайлыВнешнегоХранилища.ОписаниеФайла
	
	Для Каждого Файл Из Файлы Цикл
			
		Если ( Файл.ErrorInfo <> Неопределено ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Результат.Добавить(Файл);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область Логирование

Процедура ЛогироватьУспешноеСохранениеДанных( Знач Обработчик, Знач Идентификатор, Знач ИмяОбъекта )
	
	Сообщение = ИмяОбъекта + ": " + Логи.Сообщения().ДанныеСохранены;
	
	Логи.Информация( Логи.События().ОбработкаДанных, Сообщение, Логи.Параметры(Идентификатор, Обработчик) );
	
КонецПроцедуры

Процедура ЛогироватьОшибкуСохраненияДанных( Знач Обработчик, Знач Идентификатор, Знач ИмяОбъекта, Знач Ошибка )
	
	ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки( Ошибка );
	
	Сообщение = СтрШаблон( Логи.Сообщения().DUMP_ERROR, ИмяОбъекта, ПредставлениеОшибки );
	
	Логи.Ошибка( Логи.События().ОбработкаДанных, Сообщение, Логи.Параметры(Идентификатор, Обработчик) );
	
КонецПроцедуры

Процедура ЛогироватьРезультатЗагрузки( Знач Обработчик, Знач Идентификатор, Знач Файлы )
	
	Для Каждого Файл Из Файлы Цикл
			
		Если ( Файл.ErrorInfo = Неопределено ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки( Файл.ErrorInfo );
		
		Логи.Ошибка( Логи.События().ОбработкаДанных, ПредставлениеОшибки, Логи.Параметры(Идентификатор, Обработчик) );
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЛогироватьРаспределениеФайловПоМаршрутам(Знач Обработчик, Знач Идентификатор, Знач Файлы )
	
	Для Каждого Файл Из Файлы Цикл
			
		Если ( ЗначениеЗаполнено(Файл.Routes) ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Сообщение = Файл.CommitSHA + ": " + Логи.Сообщения().МаршрутОтсутствует;
		
		Логи.Ошибка( Логи.События().ОбработкаДанных, Сообщение, Логи.Параметры(Идентификатор, Обработчик) );
		
	КонецЦикла;
	
КонецПроцедуры

// ЛогироватьЗапускЗаданийНаОтправкуФайлов выполняет логирование числа запущенных фоновых заданий на отправку файлов
// и ошибок возникших при их запуске.
// 
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов;
//  Идентификатор - Строка - уникальный идентификатор данных для обработчика;
//  Задания - Массив из см. Получатели.РезультатОтправкиФайла
//
Процедура ЛогироватьЗапускЗаданийНаОтправкуФайлов( Знач Обработчик, Знач Идентификатор, Знач Задания )
	
	Создано = 0;
	
	Для Каждого Задание Из Задания Цикл
				
		Если ( Задание.BackgroundJob <> Неопределено ) Тогда
			
			Создано = Создано + 1;
			
		КонецЕсли;
		
		Если ( Задание.ErrorInfo <> Неопределено ) Тогда
			
			Сообщение = ОбработкаОшибок.ПодробноеПредставлениеОшибки( Задание.ErrorInfo );
			
			Логи.Ошибка( Логи.События().ОбработкаДанных, Сообщение, Логи.Параметры(Идентификатор, Обработчик) );
			
		КонецЕсли;
				
	КонецЦикла;
	
	Сообщение = СтрШаблон( Логи.Сообщения().ОтправкаФайлов, Создано );
	
	Логи.Информация( Логи.События().ОбработкаДанных, Сообщение, Логи.Параметры(Идентификатор, Обработчик) );
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхВИнформационнуюБазу

Процедура СохранитьВнешнийЗапрос( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос )
	
	ИмяРегистраСведений = Метаданные.РегистрыСведений.ВнешниеЗапросы.Синоним;
	
	Попытка
		
		ВнешниеЗапросы.Сохранить( Обработчик, Идентификатор, ВнешнийЗапрос );
		
	Исключение
		
		ЛогироватьОшибкуСохраненияДанных( Обработчик, Идентификатор, ИмяРегистраСведений, ИнформацияОбОшибке() );
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЛогироватьУспешноеСохранениеДанных( Обработчик, Идентификатор, ИмяРегистраСведений );
	
КонецПроцедуры

Процедура СохранитьВнешниеФайлы( Знач Обработчик, Знач Идентификатор, Знач Файлы )
	
	ИмяРегистраСведений = Метаданные.РегистрыСведений.ВнешниеФайлы.Синоним;
	
	Попытка
		
		ФайлыВнешнегоХранилища.Сохранить( Обработчик, Идентификатор, Файлы );
		
	Исключение
		
		ЛогироватьОшибкуСохраненияДанных( Обработчик, Идентификатор, ИмяРегистраСведений, ИнформацияОбОшибке() );
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЛогироватьУспешноеСохранениеДанных( Обработчик, Идентификатор, ИмяРегистраСведений );
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

// ПолучитьПолныйПутьКМетоду возвращает полный путь к методу вместе с именем модуля.
// 
// Параметры:
//  Метод - Строка - идентификатор метода;
// 
// Возвращаемое значение:
//  Строка - полный путь к методу в виде "ИмяМодуля.ИмяМетода";
//
Функция ПолучитьПолныйПутьКМетоду( Знач Метод )
	
	Возврат ИмяМодуля() + "." + Метод;
	
КонецФункции

Функция ФильтрЗаданийПоОбработкеДанных( Знач Метод, Знач Ключ )
	
	Возврат Новый Структура( "ИмяМетода, Ключ", ПолучитьПолныйПутьКМетоду(Метод), Ключ );
	
КонецФункции

Функция ФильтрЗаданийОтправкиФайлов()
	
	Возврат Новый Структура( "ИмяМетода", "Получатели.ОтправитьФайл" );
	
КонецФункции

Функция ИмяМодуля()
	
	Возврат "ОбработкаДанных";
	
КонецФункции

Функция МетодЗагрузитьИОтправитьФайлы()
	
	Возврат "ЗагрузитьИОтправитьФайлы";
	
КонецФункции

Функция МетодОтправитьФайлы()
	
	Возврат "ОтправитьФайлы";
	
КонецФункции

Функция ОборПоМетодуОтправитьФайлы( Знач Идентификатор )
	
	Возврат ФильтрЗаданийПоОбработкеДанных(МетодОтправитьФайлы(), Идентификатор);
	
КонецФункции

Функция ОборПоМетодуЗагрузитьИОтправитьФайлы( Знач Идентификатор )
	
	Возврат ФильтрЗаданийПоОбработкеДанных(МетодЗагрузитьИОтправитьФайлы(), Идентификатор);
	
КонецФункции

#КонецОбласти

#КонецОбласти
