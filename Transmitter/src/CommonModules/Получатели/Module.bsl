// @strict-types

#Область ПрограммныйИнтерфейс

// ПолучитьСтатус возвращает структурированный результат проверки статуса сервиса загрузки файлов
// во внешней информационной базе, см. "/epf/status" в "./api/endpoint-openapi.yml".
// 
// Параметры:
// 	Соединение - см. ПолучателиКлиентСервер.ПараметрыСоединения
// 	
// Возвращаемое значение:
// 	Структура - ответ сервиса:
// * КодСостояния - Число - код состояния ответа;
// * ТелоОтвета - Строка - тело ответа;
//
Функция ПолучитьСтатус( Знач Соединение ) Экспорт
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса( Соединение );
	
	Результат = Ответ();
	
	Попытка
		
		Ответ = КоннекторHTTP.Get( Соединение.Адрес, Неопределено, ПараметрыЗапроса );
		Результат.КодСостояния = Ответ.КодСостояния;
		Результат.ТелоОтвета = КоннекторHTTP.КакТекст( Ответ );
		
	Исключение
		
		Результат.КодСостояния = СервисыHTTP.КодыСостояния().НайтиКодПоИдентификатору( "INTERNAL_SERVER_ERROR" );
		Результат.ТелоОтвета = ОбработкаОшибок.ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// ПредставленияСтатуса возвращает коллекцию представлений о статусе сервиса загрузки файлов
// во внешней информационной базе, см. "/epf/status" в "./api/endpoint-openapi.yml".
// 
// Возвращаемое значение:
//  Структура - значение "message" API сервиса загрузки:
// * ЗагрузкаФайловВключена - Строка - сообщение о включенном сервисе;
// * ЗагрузкаФайловОтключена - Строка - сообщение об отключенном сервисе;
//
Функция ПредставленияСтатуса() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить( "ЗагрузкаФайловВключена", НСтр(
		"ru = 'загрузка файлов включена';en = 'file upload enabled'") );
	Результат.Вставить( "ЗагрузкаФайловОтключена", НСтр(
		"ru = 'загрузка файлов отключена';en = 'file upload disabled'") );
	
	Возврат Результат;
	
КонецФункции

// ОтправитьФайл отправляет файл в сервис загрузки файла внешней информационной базы.
// Сервис должен реализовывать следующий API: смотри "./api/endpoint-openapi.yml".
// 
// Параметры:
//	Адрес - Строка - адрес сервера публикации внешней информационной базы,
//						в которую отправляется файл (см. Справочник.Получатели.АдресИнформационнойБазы).
//	ИмяФайла - Строка - имя файла, загружаемого во внешнюю информационную базу (UTF-8).
//	Данные - ДвоичныеДанные - содержимое файла.
//  КонтекстВыполнения - Структура - параметры контекста выполнения для логирования:
//   * Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов.
//   * КраткийИдентификатор - ОпределяемыйТип.КраткийИдентификаторКоммита - краткий идентификатор данных обработчика.
//
// Возвращаемое значение:
// 	Строка - результат отправки файла, сформированный сервисом внешней информационной базы.
//
Функция ОтправитьФайл( Знач Адрес, Знач ИмяФайла, Знач Данные, Знач КонтекстВыполнения ) Экспорт

	Попытка
		
		Соединение = ПолучитьСоединениеПоАдресуПубликации( Адрес );
		
		Ответ = КоннекторHTTP.Post( Соединение.Адрес, Данные, ПолучитьПараметрыЗапроса(Соединение, ИмяФайла) );
		
		Сообщение = СоздатьТекстСообщения( Ответ, Соединение.Адрес, ИмяФайла );
		
		Если ( НЕ СервисыHTTP.КодыСостояния().IsOk(Ответ.КодСостояния) ) Тогда
			
			ВызватьИсключение Сообщение;
			
		КонецЕсли;
			
		Возврат Сообщение;
		
	Исключение
		
		Сообщение = ОбработкаОшибок.ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		
		Параметры = Логи.КонтекстОбработкиСобытия( КонтекстВыполнения.Обработчик,
			КонтекстВыполнения.КраткийИдентификатор );
		
		Логи.Ошибка( Логи.События().ОтправкаФайлов, Сообщение, Параметры );
		
		ВызватьИсключение;
		
	КонецПопытки;
		
КонецФункции

// ОтправитьФайлыВФоне формирует и возвращает запущенные фоновые задания по отправке файлов
// во внешние информационные базы.
//
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов.
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - уникальный идентификатор данных для обработчика.
// 	Файлы - Массив из см. ФайловыеМодели.ФайлДляОтправки
//
// Возвращаемое значение:
// 	Массив из ФоновоеЗадание
//
Функция ОтправитьФайлыВФоне( Знач Обработчик, Знач Идентификатор, Знач Файлы ) Экспорт

	Результат = Новый Массив(); // Массив из ФоновоеЗадание
	
	Контекст = КонтекстВыполнения( Обработчик, Идентификатор );
	
	Для Каждого Файл Из Файлы Цикл // ФайловыеМодели.ФайлДляОтправки
		
		Для Каждого Адрес Из Файл.Маршруты Цикл
		
			Попытка
				
				Параметры = ПараметрыОтправкиФайла( Адрес, Файл, Контекст );
				
				Ключ = ПолучитьКлючОтправкиФайла( Файл, Адрес );
				
				Результат.Добавить( ФоновыеЗадания.Выполнить("Получатели.ОтправитьФайл", Параметры, Ключ) );
				
			Исключение
				
				Сообщение = ОбработкаОшибок.ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
				
				ПараметрыЛогирования = Логи.КонтекстОбработкиСобытия( Обработчик, Контекст.КраткийИдентификатор );
				
				Логи.Ошибка( Логи.События().ОтправкаФайлов, Сообщение, ПараметрыЛогирования );
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Ответ()
	
	Возврат Новый Структура( "КодСостояния, ТелоОтвета", 0, "" );
	
КонецФункции

Функция НайтиПолучателяПоАдресуПубликации( Знач Адрес )
	
	ПараметрыПодключения = Справочники.Получатели.НайтиПоАдресуПубликации( Адрес );
	
	Если ( НЕ ЗначениеЗаполнено(ПараметрыПодключения) ) Тогда
		
		Возврат Справочники.Получатели.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ( ПараметрыПодключения.Количество() > 1 ) Тогда
		
		ВызватьИсключение СтрШаблон( Логи.Сообщения().DUPLICATE_BASE_URL, Адрес );
		
	КонецЕсли;
		
	Возврат ПараметрыПодключения.Получить(0);

КонецФункции

Функция ПолучитьСоединениеПоАдресуПубликации( Знач Адрес )
	
	Результат = ПолучателиКлиентСервер.ПараметрыСоединения();
	
	Получатель = НайтиПолучателяПоАдресуПубликации( Адрес );

	Если ( Получатель.Пустая() ) Тогда
		
		ЗаполнитьЗначенияСвойств( Результат, НастройкиСервисов.ПолучитьГлобальныеНастройкиВнешнегоСервиса() );
		
		Результат.Адрес = Адрес;
		
	Иначе
		
		Результат = Справочники.Получатели.ПолучитьСоединениеКСервисуЗагрузкиФайла( Получатель );
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// КонтекстВыполнения возвращает контекст выполнения для логирования
// 
// Параметры:
//  Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита
// 
// Возвращаемое значение:
//  Структура - контекст выполнения:
// * Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов
// * КраткийИдентификатор - ОпределяемыйТип.КраткийИдентификаторКоммита
//
Функция КонтекстВыполнения( Знач Обработчик, Знач Идентификатор )
	
	Результат = Новый Структура();
	Результат.Вставить( "Обработчик", Обработчик );
	Результат.Вставить( "КраткийИдентификатор", ПолучитьКраткийИдентификатор(Идентификатор) );
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьТекстСообщения( Знач Ответ, Знач Адрес, Знач ИмяФайла )
	
	ТелоОтвета = КоннекторHTTP.КакТекст( Ответ, КодировкаТекста.UTF8 );
	
	Возврат СтрШаблон( Логи.Сообщения().РезультатОтправкиФайла, Адрес, ИмяФайла, Ответ.КодСостояния, ТелоОтвета );
	
КонецФункции

Функция ПараметрыОтправкиФайла( Знач Адрес, Знач Файл, Знач Контекст )
	
	Параметры = Новый Массив(); // Массив из Строка, Структура, ДвоичныеДанные
	Параметры.Добавить( Адрес );
	Параметры.Добавить( Файл.ИмяФайла );
	Параметры.Добавить( Файл.ДвоичныеДанные );
	Параметры.Добавить( Контекст );
	
	Возврат Параметры;
	
КонецФункции

// ПолучитьКраткийИдентификатор возвращает краткий идентификатор.
// 
// Параметры:
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита
// 
// Возвращаемое значение:
//  ОпределяемыйТип.КраткийИдентификаторКоммита
//
Функция ПолучитьКраткийИдентификатор( Знач Идентификатор )
	
	Возврат СистемаУправленияВерсиями.ПолучитьКраткийИдентификатор( Строка(Идентификатор) );

КонецФункции

Функция ПолучитьКлючОтправкиФайла( Знач Файл, Знач Адрес )
	
	Разделитель = ПараметрыСеанса.РазделительКлюча;
	
	Возврат ПолучитьКраткийИдентификатор( Файл.Идентификатор ) + Разделитель + Адрес + Разделитель + Файл.ИмяФайла;
	
КонецФункции

#Область Запрос

Функция Аутентификация()
	
	Возврат Новый Структура( "Пользователь, Пароль", "", "" );
	
КонецФункции

Функция ПолучитьАутентификацию( Знач Соединение )

	Результат = Аутентификация();
	
	ЗаполнитьЗначенияСвойств( Результат, Соединение );
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьАутентификацией( Результат, Знач Соединение )
	
	Если ( СтрНайти(Соединение.Адрес, "@") ) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Результат.Вставить( "Аутентификация", ПолучитьАутентификацию(Соединение) );
	
КонецПроцедуры

Процедура ДополнитьТаймаутом( Результат, Знач Соединение )
	
	Результат.Вставить( "Таймаут", Соединение.Таймаут );
	
КонецПроцедуры

Функция ПолучитьЗаголовкиОписанияФайла( Знач ИмяФайла )
	
	Заголовки = Новый Соответствие();
	
	Заголовки.Вставить( "name", КодироватьСтроку(ИмяФайла, СпособКодированияСтроки.КодировкаURL) );
	
	Возврат Заголовки;
	
КонецФункции

Процедура ДополнитьЗаголовками(Результат, Знач ИмяФайла)

	Если ( НЕ ЗначениеЗаполнено(ИмяФайла) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат.Вставить( "Заголовки", ПолучитьЗаголовкиОписанияФайла(ИмяФайла) );
	
КонецПроцедуры

Функция ПолучитьПараметрыЗапроса( Знач Соединение, Знач ИмяФайла = Неопределено )

	Результат = Новый Структура();

	ДополнитьЗаголовками( Результат, ИмяФайла );
	ДополнитьАутентификацией( Результат, Соединение );
	ДополнитьТаймаутом( Результат, Соединение );
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
