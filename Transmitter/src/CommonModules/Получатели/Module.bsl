// @strict-types

#Область ПрограммныйИнтерфейс

// ПолучитьСтатус возвращает структурированный результат проверки статуса сервиса загрузки файлов
// во внешней информационной базе, см. /epf/status - https://app.swaggerhub.com/apis-docs/astrizhachuk/epf-endpoint.
// 
// Параметры:
// 	Соединение - см. ПолучателиКлиентСервер.ПараметрыСоединения
// 	
// Возвращаемое значение:
// 	Структура - ответ сервиса:
// * КодСостояния - Число - код состояния ответа;
// * ТелоОтвета - Строка - тело ответа;
//
Функция ПолучитьСтатус( Знач Соединение ) Экспорт
	
	ПараметрыЗапроса = ПолучитьПараметрыЗапроса( Соединение );
	
	Результат = Ответ();
	
	Попытка
		
		Ответ = КоннекторHTTP.Get( Соединение.Адрес, Неопределено, ПараметрыЗапроса );
		Результат.КодСостояния = Ответ.КодСостояния;
		Результат.ТелоОтвета = КоннекторHTTP.КакТекст( Ответ );
		
	Исключение
		
		Результат.КодСостояния = СервисыHTTP.КодыСостояния().НайтиКодПоИдентификатору("INTERNAL_SERVER_ERROR");
		Результат.ТелоОтвета = ОбработкаОшибок.ПодробноеПредставлениеОшибки( ИнформацияОбОшибке() );
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// ПредставленияСтатуса возвращает коллекцию представлений о статусе сервиса загрузки файлов
// во внешней информационной базе, см. /epf/status - https://app.swaggerhub.com/apis-docs/astrizhachuk/epf-endpoint.
// 
// Возвращаемое значение:
//  Структура - значение "message" API сервиса загрузки:
// * ЗагрузкаФайловВключена - Строка - сообщение о включенном сервисе;
// * ЗагрузкаФайловОтключена - Строка - сообщение об отключенном сервисе;
//
Функция ПредставленияСтатуса() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить( "ЗагрузкаФайловВключена", НСтр(
		"ru = 'загрузка файлов включена';en = 'file upload enabled'") );
	Результат.Вставить( "ЗагрузкаФайловОтключена", НСтр(
		"ru = 'загрузка файлов отключена';en = 'file upload disabled'") );
	
	Возврат Результат;
	
КонецФункции

// ОтправитьФайл отправляет файл в сервис загрузки файла внешней информационной базы.
// Сервис должен реализовывать следующий API: см. https://app.swaggerhub.com/apis-docs/astrizhachuk/epf-endpoint
// 
// Параметры:
//	Адрес - Строка - адрес сервера публикации внешней информационной базы,
//						в которую отправляется файл (см. Справочник.Получатели.АдресИнформационнойБазы);
//	ИмяФайла - Строка - имя файла, загружаемого во внешнюю информационную базу (UTF-8);
//	Данные - ДвоичныеДанные - содержимое файла;
//
// Возвращаемое значение:
// 	Строка - результат отправки файла, сформированный сервисом внешней информационной базы;
//
Функция ОтправитьФайл( Знач Адрес, Знач ИмяФайла, Знач Данные ) Экспорт

	Соединение = ПолучитьСоединениеПоАдресуПубликации( Адрес );
	
	Ответ = КоннекторHTTP.Post( Соединение.Адрес, Данные, ПолучитьПараметрыЗапроса(Соединение, ИмяФайла) );
	
	Сообщение = СоздатьТекстСообщения( Ответ, Соединение.Адрес, ИмяФайла );
	
	Если ( НЕ СервисыHTTP.КодыСостояния().IsOk(Ответ.КодСостояния) ) Тогда
		
		ВызватьИсключение Сообщение;
		
	КонецЕсли;
		
	Возврат Сообщение;
		
КонецФункции

// ОтправитьФайлыВФоне формирует и возвращает запущенные фоновые задания по отправке файлов
// во внешние информационные базы.
//
// Параметры:
// 	Файлы - Массив из Структура - см. описание метода Маршрутизация.ОписаниеФайла
// 	Структура - свойства файла:
// 		* CommitSHA - Строка - идентификатор коммита;
// 		* FileName - Строка - имя файла;
// 		* BinaryData - Неопределено, ДвоичныеДанные - данные файла;
// 		* Routes - Массив из Строка - конечные точки сервисов доставки (URL);
//
// Возвращаемое значение:
// 	Массив из см. РезультатОтправкиФайла
//
Функция ОтправитьФайлыВФоне( Знач Файлы ) Экспорт

	Результат = Новый Массив(); // Массив из см. РезультатОтправкиФайла
	
	Для Каждого Файл Из Файлы Цикл
		
		Для Каждого Адрес Из Файл.Routes Цикл
		
			Задание = Неопределено;
			
			Ошибка = Неопределено;
			
			Попытка
				
				Параметры = Новый Массив(); // Массив из Строка, ДвоичныеДанные
				Параметры.Добавить( Адрес );
				Параметры.Добавить( Файл.FileName );
				Параметры.Добавить( Файл.BinaryData );
				
				Ключ = Файл.CommitSHA + "|" + Адрес + "|" + Файл.FileName;
				
				Задание = ФоновыеЗадания.Выполнить( "Получатели.ОтправитьФайл", Параметры, Ключ );
				
			Исключение
				
				Ошибка = ИнформацияОбОшибке();
				
			КонецПопытки;
			
			Результат.Добавить( РезультатОтправкиФайла(Задание, Ошибка) );
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Ответ()
	
	Результат = Новый Структура();
	Результат.Вставить( "КодСостояния", 0 );
	Результат.Вставить( "ТелоОтвета", "" );
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПолучателяПоАдресуПубликации( Знач Адрес )
	
	ПараметрыПодключения = Справочники.Получатели.НайтиПоАдресуПубликации( Адрес );
	
	Если ( НЕ ЗначениеЗаполнено(ПараметрыПодключения) ) Тогда
		
		Возврат Справочники.Получатели.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ( ПараметрыПодключения.Количество() > 1 ) Тогда
		
		ВызватьИсключение СтрШаблон( Логи.Сообщения().DUPLICATE_BASE_URL, Адрес );
		
	КонецЕсли;
		
	Возврат ПараметрыПодключения.Получить(0);

КонецФункции

Функция ПолучитьСоединениеПоАдресуПубликации( Знач Адрес )
	
	Результат = ПолучателиКлиентСервер.ПараметрыСоединения();
	
	Получатель = НайтиПолучателяПоАдресуПубликации( Адрес );

	Если ( Получатель.Пустая() ) Тогда
		
		ЗаполнитьЗначенияСвойств( Результат, НастройкиСервисов.ПолучитьГлобальныеНастройкиВнешнегоСервиса() );
		
		Результат.Адрес = Адрес;
		
	Иначе
		
		Результат = Справочники.Получатели.ПолучитьСоединениеКСервисуЗагрузкиФайла( Получатель );
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область Запрос

Функция Аутентификация()
	
	Возврат Новый Структура( "Пользователь, Пароль", "", "" );
	
КонецФункции

Функция ПолучитьАутентификацию( Знач Соединение )

	Результат = Аутентификация();
	
	ЗаполнитьЗначенияСвойств( Результат, Соединение );
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьАутентификацией( Результат, Знач Соединение )
	
	Если ( СтрНайти(Соединение.Адрес, "@") ) Тогда
		
		Возврат;
		
	КонецЕсли;
		
	Результат.Вставить( "Аутентификация", ПолучитьАутентификацию(Соединение) );
	
КонецПроцедуры

Процедура ДополнитьТаймаутом( Результат, Знач Соединение )
	
	Результат.Вставить( "Таймаут", Соединение.Таймаут );
	
КонецПроцедуры

Функция ПолучитьЗаголовкиОписанияФайла( Знач ИмяФайла )
	
	Заголовки = Новый Соответствие();
	
	Заголовки.Вставить( "name", КодироватьСтроку(ИмяФайла, СпособКодированияСтроки.КодировкаURL) );
	
	Возврат Заголовки;
	
КонецФункции

Процедура ДополнитьЗаголовками(Результат, Знач ИмяФайла)

	Если ( НЕ ЗначениеЗаполнено(ИмяФайла) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат.Вставить( "Заголовки", ПолучитьЗаголовкиОписанияФайла(ИмяФайла) );
	
КонецПроцедуры

Функция ПолучитьПараметрыЗапроса( Знач Соединение, Знач ИмяФайла = Неопределено )

	Результат = Новый Структура();

	ДополнитьЗаголовками( Результат, ИмяФайла );
	ДополнитьАутентификацией( Результат, Соединение );
	ДополнитьТаймаутом( Результат, Соединение );
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция СоздатьТекстСообщения( Знач Ответ, Знач Адрес, Знач ИмяФайла )
	
	Сообщение = НСтр( "ru = 'URL: %1; имя файла: %2
					|код состояния: %3
					|%4';
					|en = 'URL: %1; filename: %2
					|status code: %3
					|%4'" );
					
	ТелоОтвета = КоннекторHTTP.КакТекст(Ответ, КодировкаТекста.UTF8);
	
	Возврат СтрШаблон( Сообщение, Адрес, ИмяФайла, Ответ.КодСостояния, ТелоОтвета );
	
КонецФункции

// РезультатОтправкиФайла возвращает структурированный результат отправки файла.
// 
// Параметры:
//  Задание - Неопределено, ФоновоеЗадание - фоновое задание;
//  Ошибка - Неопределено, ИнформацияОбОшибке - информация об ошибке;
// 
// Возвращаемое значение:
//  Структура - результат отправки файла:
// * BackgroundJob - Неопределено, ФоновоеЗадание - созданное фоновое задание;
// * ErrorInfo - Неопределено, ИнформацияОбОшибке - ошибка при создании фонового, если она была;
//
Функция РезультатОтправкиФайла( Знач Задание, Знач Ошибка ) //TODO фоновые возвращают этот "тип", возможно надо сделать экспортным?
	
	Результат = Новый Структура();
	Результат.Вставить( "BackgroundJob", Задание );
	Результат.Вставить( "ErrorInfo", Ошибка );
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
