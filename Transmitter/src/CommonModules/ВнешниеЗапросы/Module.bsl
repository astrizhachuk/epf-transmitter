// @strict-types

#Область ПрограммныйИнтерфейс

// ПолучитьПараметрыХранилища возвращает описание внешнего сервиса источника данных на основании данных запроса
// и пользовательских настроек.
// 
// Параметры:
//  ВнешнийЗапрос - см. ОбработкаОбъект.ВнешнийЗапрос
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - параметры:
// * Сервис - ПеречислениеСсылка.ИсточникиЗапроса - сервис, с которого поступает внешний запрос;
// * Проект - Строка - идентификатор проекта;
// * ПараметрыСоединения - ФиксированнаяСтруктура - параметры соединения:
// 	** АдресСервера - Строка - адрес сервера (URL);
// 	** Токен - Строка - токен доступа;
// 	** Таймаут - Число - таймаут соединения, сек;
//
Функция ПолучитьПараметрыХранилища( Знач ВнешнийЗапрос ) Экспорт
	
	Результат = ПараметрыХранилища( ВнешнийЗапрос );
	
	ТипИсточника = ВнешнийЗапрос.ПолучитьТипИсточника();
	
	Если ( ТипИсточника = Перечисления.ИсточникиЗапроса.Гитлаб ) Тогда
		
		Результат.Сервис = ТипИсточника;
		
		Результат.Проект = ВнешнийЗапрос.ПолучитьИдентификаторПроекта();
		
		Результат.ПараметрыСоединения = Гитлаб.ПолучитьПараметрыСоединения( ВнешнийЗапрос.ПолучитьАдресСервера() );
		
	КонецЕсли;
	
	Возврат ( Новый ФиксированнаяСтруктура(Результат) );

КонецФункции

// ОпределитьФайлыКЗагрузке формирует сводный список файлов для загрузки их из внешнего хранилища.
// В список включаются:
// - файлы схем маршрутизации для каждого коммита, входящего во внешний запрос;
// - актуальные версии каждого измененного или добавленного файла данных, взятые из самого
//   позднего коммита в рамках запроса, затрагивающего данный файл.
// 
// Параметры:
//  ВнешнийЗапрос - ОбработкаОбъект.ВнешнийЗапрос- экземпляр внешнего запроса.
//  ИмяФайла - Строка - имя файла со схемами маршрутов.
// 
// Возвращаемое значение:
//  Массив из см. ФайловыеМодели.ФайлИзХранилища
//
Функция ОпределитьФайлыКЗагрузке( Знач ВнешнийЗапрос, Знач ИмяФайла ) Экспорт
	
	Файлы = Новый Массив(); // Массив из см. ФайловыеМодели.ФайлИзХранилища
	
	Если ( ПустаяСтрока(ИмяФайла) ) Тогда
		
		Возврат Файлы;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив( Файлы, ПолучитьОписаниеФайловМаршрутизации(ВнешнийЗапрос, ИмяФайла) );
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив( Файлы, ПолучитьОписаниеФайловСДанными(ВнешнийЗапрос) );
	
	Возврат Файлы;
	
КонецФункции

// ПараметрыСоединения возвращает описание параметров подключения к внешнему источнику данных.
// 
// Возвращаемое значение:
//  Структура - параметры соединения:
// * АдресСервера - Строка - адрес сервера (URL);
// * Токен - Строка - токен доступа;
// * Таймаут - Число - таймаут соединения, сек;
//
Функция ПараметрыСоединения() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить( "АдресСервера", "" );
	Результат.Вставить( "Токен", "" );
	Результат.Вставить( "Таймаут", 0 );
	
	Возврат Результат;
	
КонецФункции

// ДанныеЗаполнения возвращает коллекцию свойств объекта внешнего запроса для последующего заполнения ее данными.
// 
// Возвращаемое значение:
// Структура - содержит ключевые данные объекта для дальнейшей обработки:
// * ТипИсточника - см. Перечисление.ИсточникиЗапроса
// * JSON - см. Обработка.ВнешнийЗапрос.JSON
// * ProjectId - см. Обработка.ВнешнийЗапрос.ProjectId
// * АдресПроекта - см. Обработка.ВнешнийЗапрос.АдресПроекта
// * ServerURL - см. Обработка.ВнешнийЗапрос.ServerURL
// * Дата - см. Обработка.ВнешнийЗапрос.Дата
// * Идентификатор - Строка
// * Сообщение - см. Обработка.ВнешнийЗапрос.Сообщение
// * Коммиты - Массив из Структура - перечень коммитов:
//	** Идентификатор - см. Обработка.ВнешнийЗапрос.Коммиты.Идентификатор
//	** Дата - см. Обработка.ВнешнийЗапрос.Коммиты.Дата
//	** Заголовок - см. Обработка.ВнешнийЗапрос.Коммиты.Заголовок
// * ДобавленныеФайлы - Массив из Структура - перечень добавленных файлов:
// 	** Идентификатор - см. Обработка.ВнешнийЗапрос.ДобавленныеФайлы.Идентификатор
// 	** ПутьКФайлу - см. Обработка.ВнешнийЗапрос.ДобавленныеФайлы.ПутьКФайлу
// * ИзмененныеФайлы - Массив из Структура - перечень измененных файлов:
// 	** Идентификатор - см. Обработка.ВнешнийЗапрос.ИзмененныеФайлы.Идентификатор
// 	** ПутьКФайлу - см. Обработка.ВнешнийЗапрос.ИзмененныеФайлы.ПутьКФайлу
// * СхемыМаршрутов - Массив из Структура - перечень схем маршрутов:
// 	** Идентификатор - см. Обработка.ВнешнийЗапрос.СхемыМаршрутов.Идентификатор
// 	** Представление - см. Обработка.ВнешнийЗапрос.СхемыМаршрутов.Представление
// 	** Пользовательская - см. Обработка.ВнешнийЗапрос.СхемыМаршрутов.Пользовательская
//
Функция ДанныеЗаполнения() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить( "ТипИсточника", Перечисления.ИсточникиЗапроса.ПустаяСсылка() );
	Результат.Вставить( "JSON", "" );
	Результат.Вставить( "ProjectId", "" );
	Результат.Вставить( "АдресПроекта", "" );
	Результат.Вставить( "ServerURL", "" );
	Результат.Вставить( "Дата", Дата(1, 1, 1) );
	Результат.Вставить( "Идентификатор", "" );
	Результат.Вставить( "Сообщение", "" );
	Результат.Вставить( "Коммиты", Новый Массив() );
	Результат.Вставить( "ДобавленныеФайлы", Новый Массив() );
	Результат.Вставить( "ИзмененныеФайлы", Новый Массив() );
	Результат.Вставить( "СхемыМаршрутов", Новый Массив() );
	
	Возврат Результат;

КонецФункции

// Создать возвращает объект внешнего запроса, сформированный из тела внешнего запроса в формате JSON.
// 
// Параметры:
//	JSON - Строка - тело внешнего запроса в формате JSON.
// 	
// Возвращаемое значение:
// 	ОбработкаОбъект.ВнешнийЗапрос - заполненный из JSON экземпляр объекта.
//
Функция Создать( Знач JSON ) Экспорт
	
	Если ( ТипЗнч(JSON) = Тип("Строка") ) Тогда
	
			Результат = Обработки.ВнешнийЗапрос.Создать();
			Данные = Гитлаб.ПолучитьДанныеЗаполнения( JSON );
			Данные.JSON = JSON;
			Результат.Заполнить( Данные );
			
			Возврат Результат;
			
	Иначе
		
		ВызватьИсключение Логи.Сообщения().INVALID_DATA_TYPE;
		
	КонецЕсли;
	
КонецФункции

// СоздатьИзСериализованныхДанных возвращает объект внешнего запроса, сформированный из сериализованных данных.
// 
// Параметры:
//  Данные - Строка - сериализованные данные внешнего запроса.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ВнешнийЗапрос - заполненный из сериализованных данных экземпляр объекта.
//
Функция СоздатьИзСериализованныхДанных( Знач Данные ) Экспорт
	
	РезультатДесериализации = Десериализовать( Данные );
	
	Если ( ТипЗнч(РезультатДесериализации) <> Тип("Структура") ) Тогда
		
		ВызватьИсключение Логи.Сообщения().INVALID_DATA_TYPE;
		
	Иначе
		
		Результат = Обработки.ВнешнийЗапрос.Создать();
		
		Результат.Заполнить( РезультатДесериализации );
	
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Сохранить выполняет сохранение в информационную базу сериализованного внешнего запроса.
// 
// Параметры:
// 	Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов, для которого
// 																сохраняется внешний запрос;
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор запроса;
// 	ВнешнийЗапрос - ОбработкаОбъект.ВнешнийЗапрос - сохраняемый экземпляр объекта;
//
Процедура Сохранить( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос ) Экспорт
	
	РегистрыСведений.ВнешниеЗапросы.ЗаписатьДанные( Обработчик,
		Идентификатор,
		ВнешнийЗапрос.Сериализовать(),
		ВнешнийЗапрос.ПолучитьСообщениеСобытия(),
		ВнешнийЗапрос.ПолучитьДатуСобытия() );
	
КонецПроцедуры

// Восстановить возвращает найденный в информационной базе десериализованный экземпляр внешнего запроса.
// 
// Параметры:
// 	Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов, для которого
// 																необходимо восстановить внешний запрос;
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор события (запроса);
// 	
// Возвращаемое значение:
// 	- Неопределено - данные не найдены;
// 	- ОбработкаОбъект.ВнешнийЗапрос - десериализованный экземпляр объекта;
//
Функция Восстановить( Знач Обработчик, Знач Идентификатор ) Экспорт
	
	Данные = НайтиДанные( Обработчик, Идентификатор );
	
	Если ( ТипЗнч(Данные) <> Тип("Строка") ) Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Результат = Обработки.ВнешнийЗапрос.Создать();
		
		Результат.Заполнить( Десериализовать(Данные) );
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// ОписаниеПользовательскойСхемыМаршрутов создает конструктор данных с описанием схемы маршрутов.
//
// Параметры:
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита, к которому принадлежит схема.
//  Представление - Строка - схема маршрутов в формате JSON.
//
// Возвращаемое значение:
//  Структура - описание схемы:
//   * Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита, к которому принадлежит схема.
//   * Представление - Строка - схема маршрутов в формате JSON.
//
Функция ОписаниеПользовательскойСхемыМаршрутов( Знач Идентификатор, Знач Представление ) Экспорт
	
	Возврат ( Новый Структура("Идентификатор, Представление", Идентификатор, Представление) );
	
КонецФункции

// ЗаменитьПользовательскиеСхемы атомарно заменяет набор пользовательских схем в сериализованных данных.
// Все существующие пользовательские схемы удаляются, а затем добавляются новые, переданные в параметре ОписанияСхем.
//
// Параметры:
//  Данные - Строка - сериализованные данные внешнего запроса.
//  ОписанияСхем - Массив из см. ОписаниеПользовательскойСхемыМаршрутов
//
// Возвращаемое значение:
//  Строка - сериализованные данные внешнего запроса с обновленным набором пользовательских схем.
//
Функция ЗаменитьПользовательскиеСхемы( Знач Данные, Знач ОписанияСхем ) Экспорт
	
	ВнешнийЗапрос = СоздатьИзСериализованныхДанных( Данные );
	
	ВнешнийЗапрос.УдалитьПользовательскиеСхемыМаршрутов();
	
	Для Каждого ОписаниеСхемы Из ОписанияСхем Цикл
		
		ВнешнийЗапрос.ДобавитьСхемуМаршрутов( ОписаниеСхемы.Идентификатор, ОписаниеСхемы.Представление, Истина );
		
	КонецЦикла;
	
	Возврат ВнешнийЗапрос.Сериализовать();
	
КонецФункции

// ПолучитьИсходнуюСхемуМаршрутов возвращает исходную (не пользовательскую) схему маршрутов для указанного коммита.
//
// Параметры:
//  Данные - Строка - сериализованные данные внешнего запроса.
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита.
//
// Возвращаемое значение:
//  Строка - исходная схема маршрутов в формате JSON.
//
Функция ПолучитьИсходнуюСхемуМаршрутов( Знач Данные, Знач Идентификатор ) Экспорт
	
	ВнешнийЗапрос = СоздатьИзСериализованныхДанных( Данные );
	
	Возврат ВнешнийЗапрос.ПолучитьПредставлениеСхемыМаршрутов( Идентификатор, Ложь );
	
КонецФункции

// ПолучитьСводныеСхемыМаршрутов формирует сводный список схем маршрутов.
// Для каждого коммита из внешнего запроса определяется одна актуальная схема маршрута:
// - если для коммита есть пользовательская схема, используется она;
// - иначе используется исходная (непользовательская) схема.
//
// Параметры:
//  Данные - Строка - сериализованные данные внешнего запроса.
//
// Возвращаемое значение:
//  Массив из см. ОписаниеСхемыМаршрутов
//
Функция ПолучитьСводныеСхемыМаршрутов( Знач Данные ) Экспорт
	
	ВнешнийЗапрос = СоздатьИзСериализованныхДанных( Данные );
	
	Результат = Новый Массив(); // Массив из см. ОписаниеСхемыМаршрутов
	
	Для Каждого СвойствоСхемы Из ВнешнийЗапрос.ПолучитьОписанияСхемМаршрутовКИсполнению() Цикл

		Идентификатор = СвойствоСхемы.Ключ; 

		Коммит = ВнешнийЗапрос.ПолучитьКоммит( Идентификатор );

		НоваяСхема = ОписаниеСхемыМаршрутов();
		НоваяСхема.Идентификатор = Идентификатор;
		НоваяСхема.Дата = Коммит.Дата;
		НоваяСхема.Комментарий = Коммит.Заголовок;
		НоваяСхема.Представление = СвойствоСхемы.Значение.Представление;
		НоваяСхема.Пользовательская = СвойствоСхемы.Значение.Пользовательская;
		
		Результат.Добавить( НоваяСхема );
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// ПолучитьКоммиты возвращает коллекцию коммитов из сериализованных данных.
//
// Параметры:
//  Данные - Строка - сериализованные данные внешнего запроса.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
// 	* Ключ - ОпределяемыйТип.ИдентификаторКоммита -  идентификатор коммита (commit SHA).
// 	* Значение - Структура - описание коммита:
//		** Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита (commit SHA). 
// 		** Дата - Дата - дата коммита.
// 		** Заголовок - Строка - заголовок коммита.
//
Функция ПолучитьКоммиты( Знач Данные ) Экспорт
	
	ВнешнийЗапрос = СоздатьИзСериализованныхДанных( Данные );
	
	Результат = Новый Соответствие();
	
	Для Каждого Коммит Из ВнешнийЗапрос.ПолучитьКоммиты() Цикл
		
		Результат.Вставить( Коммит.Идентификатор, Коммит );
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыХранилища( Знач ВнешнийЗапрос )
	
	Результат = Новый Структура();
	Результат.Вставить( "Сервис", Перечисления.ИсточникиЗапроса.ПустаяСсылка() );
	Результат.Вставить( "Проект", "" );
	Результат.Вставить( "ПараметрыСоединения", Новый ФиксированнаяСтруктура(ПараметрыСоединения()) );
		
	Возврат Результат;
	
КонецФункции

// ОписаниеСхемыМаршрутов возвращает описание схемы маршрутов.
// 
// Возвращаемое значение:
//  Структура - описание схемы:
//	* Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита, в котором создана схема.
//	* Дата - Дата - дата коммита со схемой;
//	* Комментарий - Строка - комментарий к коммиту со схемой.
//	* Представление - Строка - схема маршрутов в формате JSON.
//	* Пользовательская - Булево - Истина, если для коммита используется пользовательская схема.
// 
Функция ОписаниеСхемыМаршрутов()
	
	Результат = Новый Структура();
	Результат.Вставить( "Идентификатор", "" );
	Результат.Вставить( "Дата", Дата(1, 1, 1) );
	Результат.Вставить( "Комментарий", "" );
	Результат.Вставить( "Представление", "" );
	Результат.Вставить( "Пользовательская", Ложь );
	
	Возврат Результат;
	
КонецФункции

// НайтиДанные возвращает результат поиска данных в информационной базе.
// 
// Параметры:
// 	Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов.
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор запроса.
// 	
// Возвращаемое значение:
// 	- Неопределено - данные не найдены.
// 	- Строка - сериализованные данные внешнего запроса.
// 	
Функция НайтиДанные( Знач Обработчик, Знач Идентификатор )
	
	Возврат РегистрыСведений.ВнешниеЗапросы.НайтиДанные( Обработчик, Идентификатор );
	
КонецФункции

// Десериализовать выполняет десериализацию переданных в метод данных.
// 
// Параметры:
//  Данные - Строка - сериализованные данные внешнего запроса.
// 
// Возвращаемое значение:
//  см. ДанныеЗаполнения
// 
Функция Десериализовать( Знач Данные )

	Чтение = Новый ЧтениеJSON();
	
	Чтение.УстановитьСтроку( Данные );
	
	Возврат СериализаторXDTO.ПрочитатьJSON( Чтение );
	
КонецФункции

Процедура ДобавитьОписание( Файлы, Знач Файл, Знач Действие )
	
	НовыйФайл = ФайловыеМодели.ФайлИзХранилища();
	
	ЗаполнитьЗначенияСвойств( НовыйФайл, Файл );
	
	НовыйФайл.Действие = Действие;
	
	Файлы.Добавить( НовыйФайл );
	
КонецПроцедуры

Функция ПолучитьСрезПоследних( Знач Файлы )
	
	УникальныеФайлы = Новый Соответствие();
	
	Для Каждого ТекущийФайл Из Файлы Цикл
		
		СуществующийЭлемент = УникальныеФайлы.Получить( ТекущийФайл.ПутьКФайлу ); // см. ФайловыеМодели.ФайлИзХранилища
		
		Если ( СуществующийЭлемент = Неопределено ) Тогда
			
			УникальныеФайлы.Вставить( ТекущийФайл.ПутьКФайлу, ТекущийФайл );
			
			Продолжить;
			
		КонецЕсли;
		
		Если ( ТекущийФайл.Дата >= СуществующийЭлемент.Дата ) Тогда
		
			УникальныеФайлы.Вставить( ТекущийФайл.ПутьКФайлу, ТекущийФайл );
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Массив(); // Массив из см. ФайловыеМодели.ФайлИзХранилища
	
	Для Каждого КлючИЗначение Из УникальныеФайлы Цикл
		
		Результат.Добавить( КлючИЗначение.Значение );
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОписаниеФайловСДанными( Знач ВнешнийЗапрос )
	
	Файлы = Новый Массив(); // Массив из см. ФайловыеМодели.ФайлИзХранилища
	
	Для Каждого Файл Из ВнешнийЗапрос.ПолучитьДобавленныеФайлы() Цикл
		
		ДобавитьОписание( Файлы, Файл, Перечисления.ВидыИзмененийФайла.Добавлен );
	
	КонецЦикла;

	Для Каждого Файл Из ВнешнийЗапрос.ПолучитьИзмененныеФайлы() Цикл
		
		ДобавитьОписание( Файлы, Файл, Перечисления.ВидыИзмененийФайла.Изменен );
	
	КонецЦикла;
	
	Возврат ПолучитьСрезПоследних( Файлы );
		
КонецФункции

Функция ПолучитьОписаниеФайловМаршрутизации( Знач ВнешнийЗапрос, Знач ИмяФайла )
	
	Файлы = Новый Массив(); // Массив из см. ФайловыеМодели.ФайлИзХранилища
	
	Для Каждого Коммит Из ВнешнийЗапрос.ПолучитьКоммиты() Цикл // Структура
		
		Коммит.Вставить( "ПутьКФайлу", ИмяФайла );

		ДобавитьОписание( Файлы, Коммит, Перечисления.ВидыИзмененийФайла.ПустаяСсылка() );

	КонецЦикла;
	
	Возврат Файлы;

КонецФункции

#КонецОбласти
