// @strict-types

#Область ПрограммныйИнтерфейс

// ПолучитьПараметрыХранилища возвращает описание внешнего сервиса источника данных на основании данных запроса
// и пользовательских настроек.
// 
// Параметры:
//  ВнешнийЗапрос - см. ОбработкаОбъект.ВнешнийЗапрос
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - параметры:
// * Сервис - ПеречислениеСсылка.ИсточникЗапроса - сервис, с которого поступает внешний запрос;
// * Проект - Строка - идентификатор проекта;
// * ПараметрыСоединения - ФиксированнаяСтруктура - параметры соединения:
// 	** URL - Строка - адрес сервера (URL);
// 	** Token - Строка - токен доступа;
// 	** Timeout - Число - таймаут соединения, сек;
//
Функция ПолучитьПараметрыХранилища( Знач ВнешнийЗапрос ) Экспорт
	
	Результат = ПараметрыХранилища();
	
	Если ( ВнешнийЗапрос.Type = Перечисления.ИсточникЗапроса.ПустаяСсылка() ) Тогда
		
		Результат.ПараметрыСоединения = Новый ФиксированнаяСтруктура( Результат.ПараметрыСоединения );
		
		Возврат ( Новый ФиксированнаяСтруктура(Результат) );
		
	КонецЕсли;
	
	Результат.Сервис = ВнешнийЗапрос.Type; // TODO прямое обращение к реквизиту, добавить метод
	
	Результат.Проект = ВнешнийЗапрос.ПолучитьИдентификаторПроекта();
	
	Если ( Результат.Сервис = Перечисления.ИсточникЗапроса.Гитлаб ) Тогда
		
		Результат.ПараметрыСоединения = Гитлаб.ПолучитьПараметрыСоединения( ВнешнийЗапрос.ПолучитьАдресСервера() );
		
	КонецЕсли;

	Возврат ( Новый ФиксированнаяСтруктура(Результат) );

КонецФункции

// ОпределитьФайлыКЗагрузке по данным внешнего запроса возвращает список файлов
// для загрузки из внешнего источника данных.
// 
// Параметры:
//  ВнешнийЗапрос - ОбработкаОбъект.ВнешнийЗапрос- экземпляр внешнего запроса;
//  ИмяФайла - Строка - имя файла со схемами маршрутов;
// 
// Возвращаемое значение:
//  Массив из см. ФайлыВнешнегоХранилища.ОписаниеФайла
//
Функция ОпределитьФайлыКЗагрузке( Знач ВнешнийЗапрос, Знач ИмяФайла ) Экспорт
	
	Файлы = Новый Массив(); // Массив из см. ФайлыВнешнегоХранилища.ОписаниеФайла
	
	Если ( ПустаяСтрока(ИмяФайла) ) Тогда
		
		Возврат Файлы;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив( Файлы, ПолучитьОписаниеФайловМаршрутизации(ВнешнийЗапрос, ИмяФайла) );
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив( Файлы, ПолучитьОписаниеФайловСДанными(ВнешнийЗапрос) );
	
	Возврат Файлы;
	
КонецФункции

// ПараметрыСоединения возвращает описание параметров подключения к внешнему источнику данных.
// 
// Возвращаемое значение:
//  Структура - параметры соединения:
// * URL - Строка - адрес сервера (URL);
// * Token - Строка - токен доступа;
// * Timeout - Число - таймаут соединения, сек;
//
Функция ПараметрыСоединения() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить( "URL", "" );
	Результат.Вставить( "Token", "" );
	Результат.Вставить( "Timeout", 0 );
	
	Возврат Результат;
	
КонецФункции

// ДанныеЗаполнения возвращает коллекцию свойств объекта внешнего запроса для последующего заполнения ее данными.
// 
// Возвращаемое значение:
// Структура - содержит ключевые данные объекта для дальнейшей обработки:
// * Type - см. Перечисление.ИсточникЗапроса
// * JSON - см. Обработка.ВнешнийЗапрос.JSON
// * ProjectId - см. Обработка.ВнешнийЗапрос.ProjectId
// * ProjectURL - см. Обработка.ВнешнийЗапрос.ProjectURL
// * ServerURL - см. Обработка.ВнешнийЗапрос.ServerURL
// * CheckoutSHA - см. Обработка.ВнешнийЗапрос.CheckoutSHA
// * Commits - Массив из Структура - массив коммитов из табличной части:
//	** Id - см. Обработка.ВнешнийЗапрос.Commits.Id
//	** Date - см. Обработка.ВнешнийЗапрос.Commits.Date
// * ModifiedFiles - Массив из Структура - массив модифицированных файлов из табличной части:
// 	** Id - см. Обработка.ВнешнийЗапрос.ModifiedFiles.Id
// 	** FilePath - см. Обработка.ВнешнийЗапрос.ModifiedFiles.FilePath
// * Routes - Массив из Структура - массив схем маршрутов из табличной части:
// 	** Id - см. Обработка.ВнешнийЗапрос.Routes.Id
// 	** JSON - см. Обработка.ВнешнийЗапрос.Routes.JSON
// 	** IsCustom - см. Обработка.ВнешнийЗапрос.Routes.IsCustom
//
Функция ДанныеЗаполнения() Экспорт

	Результат = Новый Структура();
	Результат.Вставить( "Type", Перечисления.ИсточникЗапроса.ПустаяСсылка() );
	Результат.Вставить( "JSON", "" );
	Результат.Вставить( "ProjectId", "" );
	Результат.Вставить( "ProjectURL", "" );
	Результат.Вставить( "ServerURL", "" );
	Результат.Вставить( "CheckoutSHA", "" );
	Результат.Вставить( "Commits", Новый Массив() );
	Результат.Вставить( "ModifiedFiles", Новый Массив() );
	Результат.Вставить( "Routes", Новый Массив() );
	
	Возврат Результат;

КонецФункции

// Создать возвращает объект внешнего запроса, сформированный из тела внешнего запроса в формате JSON.
// 
// Параметры:
//	JSON - Строка - тело внешнего запроса в формате JSON;
// 	
// Возвращаемое значение:
// 	ОбработкаОбъект.ВнешнийЗапрос - заполненный из JSON экземпляр объекта;
//
Функция Создать( Знач JSON ) Экспорт
	
	Если ( ТипЗнч(JSON) = Тип("Строка") ) Тогда
	
			Результат = Обработки.ВнешнийЗапрос.Создать();
			Данные = Гитлаб.ПолучитьДанныеЗаполнения( JSON );
			Данные.JSON = JSON;
			Результат.Заполнить( Данные );
			
			Возврат Результат;
			
	Иначе
		
		ВызватьИсключение Логи.Сообщения().INVALID_DATA_TYPE;
		
	КонецЕсли;
	
КонецФункции

// СоздатьИзСериализованныхДанных возвращает объект внешнего запроса, сформированный из сериализованных данных.
// 
// Параметры:
//  Данные - Строка -сериализованные данные;
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ВнешнийЗапрос - заполненный из сериализованных данных экземпляр объекта;
//
Функция СоздатьИзСериализованныхДанных( Знач Данные ) Экспорт
	
	РезультатДесериализации = Десериализовать( Данные );
	
	Если ( ТипЗнч(РезультатДесериализации) <> Тип("Структура") ) Тогда
		
		ВызватьИсключение Логи.Сообщения().INVALID_DATA_TYPE;
		
	Иначе
		
		Результат = Обработки.ВнешнийЗапрос.Создать();
		
		Результат.Заполнить( РезультатДесериализации );
	
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Сохранить выполняет сохранение в информационную базу сериализованного внешнего запроса.
// 
// Параметры:
// 	Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов, для которого
// 																сохраняется внешний запрос;
//  Идентификатор - Строка - идентификатор запроса;
// 	ВнешнийЗапрос - ОбработкаОбъект.ВнешнийЗапрос - сохраняемый экземпляр объекта;
//
Процедура Сохранить( Знач Обработчик, Знач Идентификатор, Знач ВнешнийЗапрос ) Экспорт
	
	РегистрыСведений.ВнешниеЗапросы.ЗаписатьДанные( Обработчик,	Идентификатор, ВнешнийЗапрос.Сериализовать() );
	
КонецПроцедуры

// Восстановить возвращает найденный в информационной базе десериализованный экземпляр внешнего запроса.
// 
// Параметры:
// 	Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов, для которого
// 																необходимо восстановить внешний запрос;
//  Идентификатор - Строка - идентификатор запроса;
// 	
// Возвращаемое значение:
// 	- Неопределено - данные не найдены;
// 	- ОбработкаОбъект.ВнешнийЗапрос - десериализованный экземпляр объекта;
//
Функция Восстановить( Знач Обработчик, Знач Идентификатор ) Экспорт
	
	Данные = НайтиДанные( Обработчик, Идентификатор );
	
	Если ( ТипЗнч(Данные) <> Тип("Строка") ) Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Результат = Обработки.ВнешнийЗапрос.Создать();
		
		Результат.Заполнить( Десериализовать(Данные) );
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// СохранитьПользовательскуюСхемуМаршрутов для сохраненного в информационной базе внешнего запроса добавляет
// схему пользовательских маршрутов в формате JSON. Добавляемой схеме присваивается признак пользовательской
// схемы маршрутов.
//
// Параметры:
//   Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов, для которого
// 																сохраняется схема маршрутов;
//   Идентификатор - Строка - идентификатор запроса;
//   Ключ - Строка - идентификатор сохраняемой схемы маршрутов;
//   Схема - Строка - схема маршрутов в формате JSON;
//
Процедура СохранитьПользовательскуюСхемуМаршрутов( Знач Обработчик, Знач Идентификатор, Знач Ключ, Знач Схема ) Экспорт
	
	ВнешнийЗапрос = Восстановить( Обработчик, Идентификатор );
	
	Если ( ВнешнийЗапрос = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;

	ВнешнийЗапрос.ДобавитьСхемуМаршрутов( Ключ, Схема, Истина );
	
	Сохранить( Обработчик, Идентификатор, ВнешнийЗапрос );

КонецПроцедуры

// УдалитьПользовательскуюСхемуМаршрутов для сохраненного в информационной базе внешнего запроса
// удаляет схему пользовательских маршрутов. Возвращает схему маршрутов, созданную при первичной маршрутизации
// внешнего запроса.
// 
// Параметры:
//   Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов, для которого
// 																выполняется удаление схемы маршрутов;
//   Идентификатор - Строка - идентификатор запроса;
//   Ключ - Строка - идентификатор сохраняемой схемы маршрутов;
// 	
// Возвращаемое значение:
// 	Строка - схема маршрутов по умолчанию в формате JSON;
//
Функция УдалитьПользовательскуюСхемуМаршрутов( Знач Обработчик, Знач Идентификатор, Знач Ключ ) Экспорт
	
	ВнешнийЗапрос = Восстановить( Обработчик, Идентификатор );
	
	Результат = ВнешнийЗапрос.ПолучитьПредставлениеСхемыМаршрутов( Ключ, Ложь );
	
	ВнешнийЗапрос.УдалитьСхемуМаршрутов( Ключ, Истина );

	Сохранить( Обработчик, Идентификатор, ВнешнийЗапрос );
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыХранилища()
	
	Результат = Новый Структура();
	Результат.Вставить( "Сервис", Перечисления.ИсточникЗапроса.ПустаяСсылка() );
	Результат.Вставить( "Проект", "" );
	Результат.Вставить( "ПараметрыСоединения", ПараметрыСоединения() );
	
	Возврат Результат;
	
КонецФункции

// НайтиДанные возвращает результат поиска данных в информационной базе.
// 
// Параметры:
// 	Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов;
//  Идентификатор - Строка - идентификатор запроса;
// 	
// Возвращаемое значение:
// 	- Неопределено - данные не найдены;
// 	- Строка - сериализованные данные внешнего запроса;
// 	
Функция НайтиДанные( Знач Обработчик, Знач Идентификатор )
	
	Возврат РегистрыСведений.ВнешниеЗапросы.НайтиДанные(Обработчик, Идентификатор);
	
КонецФункции

// Десериализовать выполняет десериализацию переданных в метод данных.
// 
// Параметры:
//  Данные - Строка - сериализованные данные;
// 
// Возвращаемое значение:
//  см. ДанныеЗаполнения
// 
Функция Десериализовать( Знач Данные )

	Чтение = Новый ЧтениеJSON();
	
	Чтение.УстановитьСтроку( Данные );
	
	Возврат СериализаторXDTO.ПрочитатьJSON( Чтение );
	
КонецФункции

Процедура ДобавитьОписание( Файлы, Знач Файл, Знач Действие )
	
	НовыйФайл = ФайлыВнешнегоХранилища.ОписаниеФайла();
	
	ЗаполнитьЗначенияСвойств( НовыйФайл, Файл );
	
	НовыйФайл.Action = Действие;
	НовыйФайл.CommitSHA = Файл.Id;	
	
	Файлы.Добавить( НовыйФайл );
	
КонецПроцедуры

Функция ПолучитьСрезПоследних( Знач Файлы, Знач Действие )
	
	Если ( НЕ ЗначениеЗаполнено(Файлы) ) Тогда
		
		Возврат Файлы;
		
	КонецЕсли;
	
	УникальныеФайлы = Новый Соответствие();
	
	Для Каждого ТекущийФайл Из Файлы Цикл
		
		СуществующийЭлемент = УникальныеФайлы.Получить( ТекущийФайл.FilePath ); // см. ФайлыВнешнегоХранилища.ОписаниеФайла
		
		Если ( СуществующийЭлемент = Неопределено ) Тогда
			
			УникальныеФайлы.Вставить( ТекущийФайл.FilePath, ТекущийФайл );
			
			Продолжить;
			
		КонецЕсли;
		
		Если ( ТипЗнч(СуществующийЭлемент) = Тип("Структура") И ТекущийФайл.Date > СуществующийЭлемент.Date ) Тогда
		
			УникальныеФайлы.Вставить( ТекущийФайл.FilePath, ТекущийФайл );
			
		КонецЕсли;
		
	КонецЦикла;
	
	Файлы = Новый Массив(); // Массив из см. ФайлыВнешнегоХранилища.ОписаниеФайла
	
	Для Каждого КлючИЗначение Из УникальныеФайлы Цикл
		
		Файлы.Добавить( КлючИЗначение.Значение );
		
	КонецЦикла;
	
	Возврат Файлы;
	
КонецФункции

Функция ПолучитьОписаниеФайловСДанными( Знач ВнешнийЗапрос )
	
	Файлы = Новый Массив(); // Массив из см. ФайлыВнешнегоХранилища.ОписаниеФайла

	Для Каждого Файл Из ВнешнийЗапрос.ПолучитьМодифицированныеФайлы() Цикл
		
		ДобавитьОписание( Файлы, Файл, "modified" );
	
	КонецЦикла;
	
	Возврат ПолучитьСрезПоследних( Файлы, "modified" );
		
КонецФункции

Функция ПолучитьОписаниеФайловМаршрутизации( Знач ВнешнийЗапрос, Знач ИмяФайла )
	
	Файлы = Новый Массив(); // Массив из см. ФайлыВнешнегоХранилища.ОписаниеФайла
	
	Для Каждого Коммит Из ВнешнийЗапрос.ПолучитьКоммиты() Цикл // Структура
		
		Коммит.Вставить( "FilePath", ИмяФайла );

		ДобавитьОписание( Файлы, Коммит, "" );

	КонецЦикла;
	
	Возврат Файлы;

КонецФункции

#КонецОбласти
