// BSLLS-off
// 
// HTTPStatusCodes - https://github.com/astrizhachuk/HTTPStatusCodes
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Copyright © 2020 Alexander Strizhachuk
// version: 2.0.2
//
//	Коды состояния (RFC 2068, 2518, 3229, 4918, 5842, 6585, 7231-7233):
//		100, "CONTINUE", "Continue"
// 		101, "SWITCHING_PROTOCOLS", "Switching Protocols"
//      102, "PROCESSING", "Processing"
//      103, "CHECKPOINT", "Checkpoint"
//
//		200, "OK", "OK"
//		201, "CREATED", "Created"
//		202, "ACCEPTED", "Accepted"
//		203, "NON_AUTHORITATIVE_INFORMATION", "Non-Authoritative Information"
//		204, "NO_CONTENT", "No Content"
//		205, "RESET_CONTENT", "Reset Content"
//		206, "PARTIAL_CONTENT", "Partial Content"
//		207, "MULTI_STATUS", "Multi-Status"
//		208, "ALREADY_REPORTED", "Already Reported"
//		226, "IM_USED", "IM Used"
//
//		300, "MULTIPLE_CHOICES", "Multiple сhoices"
//		301, "MOVED_PERMANENTLY", "Moved Permanently"
//		302, "FOUND", "Found"
//		303, "SEE_OTHER", "See Other"
//		304, "NOT_MODIFIED", "Not Modified"
//		305, "USE_PROXY", "Use Proxy"
//		307, "TEMPORARY_REDIRECT", "Temporary Redirect"
//		308, "PERMANENT_REDIRECT", "Permanent Redirect"
//
//		400, "BAD_REQUEST", "Bad Request"
//		401, "UNAUTHORIZED", "Unauthorized"
//		402, "PAYMENT_REQUIRED", "Payment Required"
//		403, "FORBIDDEN", "Forbidden"
//		404, "NOT_FOUND", "Not Found"
//		405, "METHOD_NOT_ALLOWED", "Method Not Allowed"
//		406, "NOT_ACCEPTABLE", "Not Acceptable"
//		407, "PROXY_AUTHENTICATION_REQUIRED", "Proxy Authentication Required"
//		408, "REQUEST_TIMEOUT", "Request Timeout"
//		409, "CONFLICT", "Conflict"
//		410, "GONE", "Gone"
//		411, "LENGTH_REQUIRED", "Length Required"
//		412, "PRECONDITION_FAILED", "Precondition Failed"
//		413, "PAYLOAD_TOO_LARGE", "Payload Too Large"
//		414, "URI_TOO_LONG", "URI Too Long"
//		415, "UNSUPPORTED_MEDIA_TYPE", "Unsupported Media Type"
//		416, "REQUESTED_RANGE_NOT_SATISFIABLE", "Requested range not satisfiable"
//		417, "EXPECTATION_FAILED", "Expectation Failed"
//		418, "I_AM_A_TEAPOT", "I'm a teapot"
//		421, "DESTINATION_LOCKED", "Destination Locked"
//		422, "UNPROCESSABLE_ENTITY", "Unprocessable Entity"
//		423, "LOCKED", "Locked"
//		424, "FAILED_DEPENDENCY", "Failed Dependency"
//		426, "UPGRADE_REQUIRED", "Upgrade Required"
//		428, "PRECONDITION_REQUIRED", "Precondition Required"
//		429, "TOO_MANY_REQUESTS", "Too Many Requests"
//		431, "REQUEST_HEADER_FIELDS_TOO_LARGE", "Request Header Fields Too Large"
//		451, "UNAVAILABLE_FOR_LEGAL_REASONS", "Unavailable For Legal Reasons"
//
//		500, "INTERNAL_SERVER_ERROR", "Internal Server Error"
//		501, "NOT_IMPLEMENTED", "Not Implemented"
//		502, "BAD_GATEWAY", "Bad Gateway"
//		503, "SERVICE_UNAVAILABLE", "Service Unavailable"
//		504, "GATEWAY_TIMEOUT", "Gateway Timeout"
//		505, "HTTP_VERSION_NOT_SUPPORTED", "HTTP Version not supported"
//		506, "VARIANT_ALSO_NEGOTIATES", "Variant Also Negotiates"
//		507, "INSUFFICIENT_STORAGE", "Insufficient Storage"
//		508, "LOOP_DETECTED", "Loop Detected"
//		509, "BANDWIDTH_LIMIT_EXCEEDED", "Bandwidth Limit Exceeded"
//		510, "NOT_EXTENDED", "Not Extended"
//		511, "NETWORK_AUTHENTICATION_REQUIRED", "Network Authentication Required"

// BSLLS:CachedPublic-off
// BSLLS:Typo-off
#Область ПрограммныйИнтерфейс

// Возвращает трехзначный числовой код состояния HTTP по его идентификатору.
//
// Параметры:
//  Идентификатор - Строка - идентификатор кода состояния HTTP;
// 
// Возвращаемое значение:
//	- Неопределено - код не найден;
//	- Число - трехзначный числовой код состояния HTTP;
//
Функция НайтиКодПоИдентификатору( Знач Идентификатор ) Экспорт
	
	Перем КодыСостояния;
	
	КодыСостояния = КодыСостоянияHTTPКлиентСерверПовтИсп.КодыСостоянияПовтИсп();
	
	Возврат КодыСостояния.Получить( ВРег(Идентификатор) ); // Неопределено, Число
	
КонецФункции

// Возвращает идентификатор кода состояния HTTP по его трехзначному числовому коду.
//
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP; 
// 
// Возвращаемое значение:
//	- Неопределено - идентификатор не найден;
//	- Строка - идентификатор кода состояния HTTP;
//
Функция НайтиИдентификаторПоКоду( Знач Код ) Экспорт
	
	Перем ИдентификаторыКодовСостояния;
	
	ИдентификаторыКодовСостояния = КодыСостоянияHTTPКлиентСерверПовтИсп.ИдентификаторыКодовСостоянияПовтИсп();

	Возврат ИдентификаторыКодовСостояния.Получить( Код );

КонецФункции

// Возвращает описание кода состояния HTTP (причину) по его идентификатору.
//
// Параметры:
//  Идентификатор - Строка - идентификатор кода состояния HTTP;
// 
// Возвращаемое значение:
//	- Неопределено - описание (причина) не найдено;
//	- Строка - описание (причина) кода состояния HTTP;
//
Функция НайтиОписаниеПоИдентификатору( Знач Идентификатор ) Экспорт
	
	Перем ОписанияКодовСостояния;
	
	ОписанияКодовСостояния = КодыСостоянияHTTPКлиентСерверПовтИсп.ПричиныКодовСостоянияПовтИсп();
	
	Возврат ОписанияКодовСостояния.Получить( ВРег(Идентификатор) );

КонецФункции

// Возвращает строковое представление класса кодов состояния HTTP по его трехзначному числовому коду.
//
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
// 	- Неопределено - класс кода состояния не найден;
//  - Строка - возможные значения: "Informational", "Success", "Redirection", "ClientError", "ServerError";
//
Функция КлассКодаСостояния( Знач Код ) Экспорт
	
	Перем НомерГруппы;
	Перем Результат;

	КОЛИЧЕСТВО_КОДОВ_В_ГРУППЕ = 100;
	ПЕРВЫЙ_КЛАСС = 1;
	ПОСЛЕДНИЙ_КЛАСС = 5;
	
	Результат = Неопределено;
	
	Если ( НайтиИдентификаторПоКоду( Код ) = Неопределено ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;

	НомерГруппы = Цел( Код / КОЛИЧЕСТВО_КОДОВ_В_ГРУППЕ );
	
	Если ( НомерГруппы < ПЕРВЫЙ_КЛАСС И НомерГруппы > ПОСЛЕДНИЙ_КЛАСС ) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат КлассыКодовСостояния()[ НомерГруппы - 1 ];
	
КонецФункции

// Определяет принадлежность кода состояния HTTP к классу "Informational".
//
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, код состояния относится к классу "Informational", иначе - Ложь;
//
Функция ЭтоИнформация( Знач Код ) Экспорт
	
	Возврат ( КлассКодаСостояния( Код ) = "Informational" );
	
КонецФункции

// Определяет принадлежность кода состояния HTTP к классу "Success".
//
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, код состояния относится к классу "Success", иначе - Ложь;
//
Функция ЭтоУспех( Знач Код ) Экспорт
	
	Возврат ( КлассКодаСостояния( Код ) = "Success" );
	
КонецФункции

// Определяет принадлежность кода состояния HTTP к классу "Redirection".
//
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, код состояния относится к классу "Redirection", иначе - Ложь;
//
Функция ЭтоПеренаправление( Знач Код ) Экспорт
	
	Возврат ( КлассКодаСостояния( Код ) = "Redirection" );
	
КонецФункции

// Определяет принадлежность кода состояния HTTP к классу "ClientError".
//
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, код состояния относится к классу "ClientError", иначе - Ложь;
//
Функция ЭтоОшибкаКлиента( Знач Код ) Экспорт
	
	Возврат ( КлассКодаСостояния( Код ) = "ClientError" );
	
КонецФункции

// Определяет принадлежность кода состояния HTTP к классу "ServerError".
//
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, код состояния относится к классу "ServerError", иначе - Ложь;
//
Функция ЭтоОшибкаСервера( Знач Код ) Экспорт
	
	Возврат ( КлассКодаСостояния( Код ) = "ServerError" );
	
КонецФункции

#Область Informational_1xx

// Определяет принадлежность значения к коду 100, "CONTINUE", "Continue".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsContinue( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["CONTINUE"] );
	
КонецФункции

// Определяет принадлежность значения к коду 101, "SWITCHING_PROTOCOLS", "Switching Protocols".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsSwitchingProtocols( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["SWITCHING_PROTOCOLS"] );
	
КонецФункции

// Определяет принадлежность значения к коду 102, "PROCESSING", "Processing".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsProcessing( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["PROCESSING"] );
	
КонецФункции

// Определяет принадлежность значения к коду 103, "CHECKPOINT", "Checkpoint".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsCheckpoint( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["CHECKPOINT"] );
	
КонецФункции

#КонецОбласти

#Область Success_2xx

// Определяет принадлежность значения к коду 200, "OK", "OK".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsOk( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["OK"] );

КонецФункции

// Определяет принадлежность значения к коду 201, "CREATED", "Created".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsCreated( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["CREATED"] );

КонецФункции

// Определяет принадлежность значения к коду 202, "ACCEPTED", "Accepted".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsAccepted( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["ACCEPTED"] );

КонецФункции

// Определяет принадлежность значения к коду 203, "NON_AUTHORITATIVE_INFORMATION", "Non-Authoritative Information".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsNonAuthoritative( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["NON_AUTHORITATIVE_INFORMATION"] );

КонецФункции

// Определяет принадлежность значения к коду 204, "NO_CONTENT", "No Content".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsNoContent( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["NO_CONTENT"] );

КонецФункции

// Определяет принадлежность значения к коду 205, "RESET_CONTENT", "Reset Content".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsResetContent( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["RESET_CONTENT"] );

КонецФункции

// Определяет принадлежность значения к коду 206, "PARTIAL_CONTENT", "Partial Content".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsPartialContent( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["PARTIAL_CONTENT"] );

КонецФункции

// Определяет принадлежность значения к коду 207, "MULTI_STATUS", "Multi-Status".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsMultiStatus( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["MULTI_STATUS"] );

КонецФункции

// Определяет принадлежность значения к коду 208, "ALREADY_REPORTED", "Already Reported".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsAlreadyReported( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["ALREADY_REPORTED"] );

КонецФункции

// Определяет принадлежность значения к коду 226, "IM_USED", "IM Used".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsIMUsed( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["IM_USED"] );

КонецФункции

#КонецОбласти

#Область Redirection_3xx

// Определяет принадлежность значения к коду 300, "MULTIPLE_CHOICES", "Multiple сhoices".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsMultipleChoices( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["MULTIPLE_CHOICES"] );

КонецФункции

// Определяет принадлежность значения к коду 301, "MOVED_PERMANENTLY", "Moved Permanently".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsMovedPermanently( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["MOVED_PERMANENTLY"] );

КонецФункции

// Определяет принадлежность значения к коду 302, "FOUND", "Found".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsFound( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["FOUND"] );

КонецФункции

// Определяет принадлежность значения к коду 303, "SEE_OTHER", "See Other".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsSeeOther( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["SEE_OTHER"] );

КонецФункции

// Определяет принадлежность значения к коду 304, "NOT_MODIFIED", "Not Modified".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsNotModified( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["NOT_MODIFIED"] );

КонецФункции

// Определяет принадлежность значения к коду 305, "USE_PROXY", "Use Proxy".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsUseProxy( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["USE_PROXY"] );

КонецФункции

// Определяет принадлежность значения к коду 307, "TEMPORARY_REDIRECT", "Temporary Redirect".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsTemporaryRedirect( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["TEMPORARY_REDIRECT"] );

КонецФункции

// Определяет принадлежность значения к коду 308, "PERMANENT_REDIRECT", "Permanent Redirect".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsPermanentRedirect( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["PERMANENT_REDIRECT"] );

КонецФункции

#КонецОбласти

#Область ClientError_4xx

// Определяет принадлежность значения к коду 400, "BAD_REQUEST", "Bad Request".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsBadRequest( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["BAD_REQUEST"] );

КонецФункции

// Определяет принадлежность значения к коду 401, "UNAUTHORIZED", "Unauthorized".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsUnauthorized( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["UNAUTHORIZED"] );

КонецФункции

// Определяет принадлежность значения к коду 402, "PAYMENT_REQUIRED", "Payment Required".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsPaymentRequired( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["PAYMENT_REQUIRED"] );

КонецФункции

// Определяет принадлежность значения к коду 403, "FORBIDDEN", "Forbidden".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsForbidden( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["FORBIDDEN"] );

КонецФункции

// Определяет принадлежность значения к коду 404, "NOT_FOUND", "Not Found".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsNotFound( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["NOT_FOUND"] );

КонецФункции

// Определяет принадлежность значения к коду 405, "METHOD_NOT_ALLOWED", "Method Not Allowed".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsMethodNotAllowed( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["METHOD_NOT_ALLOWED"] );

КонецФункции

// Определяет принадлежность значения к коду 406, "NOT_ACCEPTABLE", "Not Acceptable".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsNotAcceptable( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["NOT_ACCEPTABLE"] );

КонецФункции

// Определяет принадлежность значения к коду 407, "PROXY_AUTHENTICATION_REQUIRED", "Proxy Authentication Required".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsProxyAuthentication( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["PROXY_AUTHENTICATION_REQUIRED"] );

КонецФункции

// Определяет принадлежность значения к коду 408, "REQUEST_TIMEOUT", "Request Timeout".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsRequestTimeout( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["REQUEST_TIMEOUT"] );

КонецФункции

// Определяет принадлежность значения к коду 409, "CONFLICT", "Conflict".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsConflict( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["CONFLICT"] );

КонецФункции

// Определяет принадлежность значения к коду 410, "GONE", "Gone".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsGone( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["GONE"] );

КонецФункции

// Определяет принадлежность значения к коду 411, "LENGTH_REQUIRED", "Length Required".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsLengthRequired( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["LENGTH_REQUIRED"] );

КонецФункции

// Определяет принадлежность значения к коду 412, "PRECONDITION_FAILED", "Precondition Failed".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsPreconditionFailed( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["PRECONDITION_FAILED"] );

КонецФункции

// Определяет принадлежность значения к коду 413, "PAYLOAD_TOO_LARGE", "Payload Too Large".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsPayloadTooLarge( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["PAYLOAD_TOO_LARGE"] );

КонецФункции

// Определяет принадлежность значения к коду 414, "URI_TOO_LONG", "URI Too Long".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsURITooLong( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["URI_TOO_LONG"] );

КонецФункции

// Определяет принадлежность значения к коду 415, "UNSUPPORTED_MEDIA_TYPE", "Unsupported Media Type".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsUnsupportedMedia( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["UNSUPPORTED_MEDIA_TYPE"] );

КонецФункции

// Определяет принадлежность значения к коду 416, "REQUESTED_RANGE_NOT_SATISFIABLE", "Requested range not satisfiable".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsRequestedRangeNotSatisfiable( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["REQUESTED_RANGE_NOT_SATISFIABLE"] );

КонецФункции

// Определяет принадлежность значения к коду 417, "EXPECTATION_FAILED", "Expectation Failed".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsExpectationFailed( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["EXPECTATION_FAILED"] );

КонецФункции

// Определяет принадлежность значения к коду 418, "I_AM_A_TEAPOT", "I'm a teapot".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsImATeapot( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["I_AM_A_TEAPOT"] );

КонецФункции

// Определяет принадлежность значения к коду 421, "DESTINATION_LOCKED", "Destination Locked".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsDestinationLocked( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["DESTINATION_LOCKED"] );

КонецФункции

// Определяет принадлежность значения к коду 422, "UNPROCESSABLE_ENTITY", "Unprocessable Entity".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsUnprocessableEntity( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["UNPROCESSABLE_ENTITY"] );

КонецФункции

// Определяет принадлежность значения к коду 423, "LOCKED", "Locked".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsLocked( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["LOCKED"] );

КонецФункции

// Определяет принадлежность значения к коду 424, "FAILED_DEPENDENCY", "Failed Dependency".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsFailedDependency( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["FAILED_DEPENDENCY"] );

КонецФункции

// Определяет принадлежность значения к коду 426, "UPGRADE_REQUIRED", "Upgrade Required".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsUpgradeRequired( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["UPGRADE_REQUIRED"] );

КонецФункции

// Определяет принадлежность значения к коду 428, "PRECONDITION_REQUIRED", "Precondition Required".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsPreconditionRequired( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["PRECONDITION_REQUIRED"] );

КонецФункции

// Определяет принадлежность значения к коду 429, "TOO_MANY_REQUESTS", "Too Many Requests".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsTooManyRequests( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["TOO_MANY_REQUESTS"] );

КонецФункции

// Определяет принадлежность значения к коду 431, "REQUEST_HEADER_FIELDS_TOO_LARGE", "Request Header Fields Too Large".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsRequestHeaderTooLarge( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["REQUEST_HEADER_FIELDS_TOO_LARGE"] );

КонецФункции

// Определяет принадлежность значения к коду 451, "UNAVAILABLE_FOR_LEGAL_REASONS", "Unavailable For Legal Reasons".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsUnavailableReasons( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["UNAVAILABLE_FOR_LEGAL_REASONS"] );

КонецФункции

#КонецОбласти

#Область ServerError_5xx

// Определяет принадлежность значения к коду 500, "INTERNAL_SERVER_ERROR", "Internal Server Error".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsInternalServerError( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["INTERNAL_SERVER_ERROR"] );

КонецФункции

// Определяет принадлежность значения к коду 501, "NOT_IMPLEMENTED", "Not Implemented".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsNotImplemented( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["NOT_IMPLEMENTED"] );

КонецФункции

// Определяет принадлежность значения к коду 502, "BAD_GATEWAY", "Bad Gateway".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsBadGateway( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["BAD_GATEWAY"] );

КонецФункции

// Определяет принадлежность значения к коду 503, "SERVICE_UNAVAILABLE", "Service Unavailable".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsServiceUnavailable( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["SERVICE_UNAVAILABLE"] );

КонецФункции

// Определяет принадлежность значения к коду 504, "GATEWAY_TIMEOUT", "Gateway Timeout".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsGatewayTimeout( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["GATEWAY_TIMEOUT"] );

КонецФункции

// Определяет принадлежность значения к коду 505, "HTTP_VERSION_NOT_SUPPORTED", "HTTP Version not supported".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsHTTPVersionNotSupported( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["HTTP_VERSION_NOT_SUPPORTED"] );

КонецФункции

// Определяет принадлежность значения к коду 506, "VARIANT_ALSO_NEGOTIATES", "Variant Also Negotiates".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsVariantAlsoNegotiates( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["VARIANT_ALSO_NEGOTIATES"] );

КонецФункции

// Определяет принадлежность значения к коду 507, "INSUFFICIENT_STORAGE", "Insufficient Storage".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsInsufficientStorage( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["INSUFFICIENT_STORAGE"] );

КонецФункции

// Определяет принадлежность значения к коду 508, "LOOP_DETECTED", "Loop Detected".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsLoopDetected( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["LOOP_DETECTED"] );

КонецФункции

// Определяет принадлежность значения к коду 509, "BANDWIDTH_LIMIT_EXCEEDED", "Bandwidth Limit Exceeded".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsBandwidthLimitExceeded( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["BANDWIDTH_LIMIT_EXCEEDED"] );

КонецФункции

// Определяет принадлежность значения к коду 510, "NOT_EXTENDED", "Not Extended".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsNotExtended( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["NOT_EXTENDED"] );

КонецФункции

// Определяет принадлежность значения к коду 511, "NETWORK_AUTHENTICATION_REQUIRED", "Network Authentication Required".
// 
// Параметры:
//  Код - Число - трехзначный числовой код состояния HTTP;
// 
// Возвращаемое значение:
//   - Булево - Истина, значение принадлежит данному коду состояния HTTP, иначе - Ложь;
//
Функция IsNetworkAuthentication( Знач Код ) Экспорт
	
	Возврат ( Код = КодыСостоянияПовтИсп()["NETWORK_AUTHENTICATION_REQUIRED"] );

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция КодыСостоянияПовтИсп() Экспорт
	
	Перем КодыСостояния;
	Перем Результат;
	
	КодыСостояния = КодыСостояния();
	
	Результат = Новый Соответствие();
	
	Для каждого ОписаниеКода Из КодыСостояния Цикл
		
	 	Результат.Вставить( ОписаниеКода.Значение.Идентификатор, ОписаниеКода.Значение.Код );
		
	КонецЦикла;
	
	Возврат ( Новый ФиксированноеСоответствие(Результат) );
	
КонецФункции

Функция ИдентификаторыКодовСостоянияПовтИсп() Экспорт
	
	Перем КодыСостояния;
	Перем Результат;
	
	КодыСостояния = КодыСостояния();
	
	Результат = Новый Соответствие();
	
	Для каждого ОписаниеКода Из КодыСостояния Цикл
		
	 	Результат.Вставить( ОписаниеКода.Значение.Код, ОписаниеКода.Значение.Идентификатор );
		
	КонецЦикла;
	
	Возврат ( Новый ФиксированноеСоответствие(Результат) );
	
КонецФункции

Функция ПричиныКодовСостоянияПовтИсп() Экспорт
	
	Перем КодыСостояния;
	Перем Результат;
	
	КодыСостояния = КодыСостояния();
	
	Результат = Новый Соответствие();
	
	Для каждого ОписаниеКода Из КодыСостояния Цикл
		
	 	Результат.Вставить( ОписаниеКода.Значение.Идентификатор, ОписаниеКода.Значение.Причина );
		
	КонецЦикла;
	
	Возврат ( Новый ФиксированноеСоответствие(Результат) );
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлассыКодовСостояния()
	
	Перем Результат;
	
	Результат = Новый Массив();
	Результат.Добавить( "Informational" );
	Результат.Добавить( "Success" );
	Результат.Добавить( "Redirection" );
	Результат.Добавить( "ClientError" );
	Результат.Добавить( "ServerError" );
	
	Возврат Результат;

КонецФункции

Функция КодыСостояния()
	
	Перем Результат;
	
	Результат = Новый Соответствие();
	
	ДобавитьКодСостояния( Результат, 100, "CONTINUE", "Continue");
	ДобавитьКодСостояния( Результат, 101, "SWITCHING_PROTOCOLS", "Switching Protocols");
	ДобавитьКодСостояния( Результат, 102, "PROCESSING", "Processing");
	ДобавитьКодСостояния( Результат, 103, "CHECKPOINT", "Checkpoint");
	
	ДобавитьКодСостояния( Результат, 200, "OK", "OK" );
	ДобавитьКодСостояния( Результат, 201, "CREATED", "Created" );
	ДобавитьКодСостояния( Результат, 202, "ACCEPTED", "Accepted" );
	ДобавитьКодСостояния( Результат, 203, "NON_AUTHORITATIVE_INFORMATION", "Non-Authoritative Information" );
	ДобавитьКодСостояния( Результат, 204, "NO_CONTENT", "No Content" );
	ДобавитьКодСостояния( Результат, 205, "RESET_CONTENT", "Reset Content" );
	ДобавитьКодСостояния( Результат, 206, "PARTIAL_CONTENT", "Partial Content" );
	ДобавитьКодСостояния( Результат, 207, "MULTI_STATUS", "Multi-Status" );
	ДобавитьКодСостояния( Результат, 208, "ALREADY_REPORTED", "Already Reported" );
	ДобавитьКодСостояния( Результат, 226, "IM_USED", "IM Used" );
	
	ДобавитьКодСостояния( Результат, 300, "MULTIPLE_CHOICES", "Multiple сhoices" );
	ДобавитьКодСостояния( Результат, 301, "MOVED_PERMANENTLY", "Moved Permanently" );
	ДобавитьКодСостояния( Результат, 302, "FOUND", "Found" );
	ДобавитьКодСостояния( Результат, 303, "SEE_OTHER", "See Other" );
	ДобавитьКодСостояния( Результат, 304, "NOT_MODIFIED", "Not Modified" );
	ДобавитьКодСостояния( Результат, 305, "USE_PROXY", "Use Proxy" );
	ДобавитьКодСостояния( Результат, 307, "TEMPORARY_REDIRECT", "Temporary Redirect" );
	ДобавитьКодСостояния( Результат, 308, "PERMANENT_REDIRECT", "Permanent Redirect" );
	
	ДобавитьКодСостояния( Результат, 400, "BAD_REQUEST", "Bad Request" );
	ДобавитьКодСостояния( Результат, 401, "UNAUTHORIZED", "Unauthorized" );
	ДобавитьКодСостояния( Результат, 402, "PAYMENT_REQUIRED", "Payment Required" );
	ДобавитьКодСостояния( Результат, 403, "FORBIDDEN", "Forbidden" );
	ДобавитьКодСостояния( Результат, 404, "NOT_FOUND", "Not Found" );
	ДобавитьКодСостояния( Результат, 405, "METHOD_NOT_ALLOWED", "Method Not Allowed" );
	ДобавитьКодСостояния( Результат, 406, "NOT_ACCEPTABLE", "Not Acceptable" );
	ДобавитьКодСостояния( Результат, 407, "PROXY_AUTHENTICATION_REQUIRED", "Proxy Authentication Required" );
	ДобавитьКодСостояния( Результат, 408, "REQUEST_TIMEOUT", "Request Timeout" );
	ДобавитьКодСостояния( Результат, 409, "CONFLICT", "Conflict" );
	ДобавитьКодСостояния( Результат, 410, "GONE", "Gone" );
	ДобавитьКодСостояния( Результат, 411, "LENGTH_REQUIRED", "Length Required" );
	ДобавитьКодСостояния( Результат, 412, "PRECONDITION_FAILED", "Precondition Failed" );
	ДобавитьКодСостояния( Результат, 413, "PAYLOAD_TOO_LARGE", "Payload Too Large" );
	ДобавитьКодСостояния( Результат, 414, "URI_TOO_LONG", "URI Too Long" );
	ДобавитьКодСостояния( Результат, 415, "UNSUPPORTED_MEDIA_TYPE", "Unsupported Media Type" );
	ДобавитьКодСостояния( Результат, 416, "REQUESTED_RANGE_NOT_SATISFIABLE", "Requested range not satisfiable" );
	ДобавитьКодСостояния( Результат, 417, "EXPECTATION_FAILED", "Expectation Failed" );
	ДобавитьКодСостояния( Результат, 418, "I_AM_A_TEAPOT", "I'm a teapot" );
	ДобавитьКодСостояния( Результат, 421, "DESTINATION_LOCKED", "Destination Locked" );
	ДобавитьКодСостояния( Результат, 422, "UNPROCESSABLE_ENTITY", "Unprocessable Entity" );
	ДобавитьКодСостояния( Результат, 423, "LOCKED", "Locked" );
	ДобавитьКодСостояния( Результат, 424, "FAILED_DEPENDENCY", "Failed Dependency" );
	ДобавитьКодСостояния( Результат, 426, "UPGRADE_REQUIRED", "Upgrade Required" );
	ДобавитьКодСостояния( Результат, 428, "PRECONDITION_REQUIRED", "Precondition Required" );
	ДобавитьКодСостояния( Результат, 429, "TOO_MANY_REQUESTS", "Too Many Requests" );
	ДобавитьКодСостояния( Результат, 431, "REQUEST_HEADER_FIELDS_TOO_LARGE", "Request Header Fields Too Large" );
	ДобавитьКодСостояния( Результат, 451, "UNAVAILABLE_FOR_LEGAL_REASONS", "Unavailable For Legal Reasons" );

	ДобавитьКодСостояния( Результат, 500, "INTERNAL_SERVER_ERROR", "Internal Server Error" );
	ДобавитьКодСостояния( Результат, 501, "NOT_IMPLEMENTED", "Not Implemented" );
	ДобавитьКодСостояния( Результат, 502, "BAD_GATEWAY", "Bad Gateway" );
	ДобавитьКодСостояния( Результат, 503, "SERVICE_UNAVAILABLE", "Service Unavailable" );
	ДобавитьКодСостояния( Результат, 504, "GATEWAY_TIMEOUT", "Gateway Timeout" );
	ДобавитьКодСостояния( Результат, 505, "HTTP_VERSION_NOT_SUPPORTED", "HTTP Version not supported" );
	ДобавитьКодСостояния( Результат, 506, "VARIANT_ALSO_NEGOTIATES", "Variant Also Negotiates" );
	ДобавитьКодСостояния( Результат, 507, "INSUFFICIENT_STORAGE", "Insufficient Storage" );
	ДобавитьКодСостояния( Результат, 508, "LOOP_DETECTED", "Loop Detected" );
	ДобавитьКодСостояния( Результат, 509, "BANDWIDTH_LIMIT_EXCEEDED", "Bandwidth Limit Exceeded" );
	ДобавитьКодСостояния( Результат, 510, "NOT_EXTENDED", "Not Extended" );
	ДобавитьКодСостояния( Результат, 511, "NETWORK_AUTHENTICATION_REQUIRED", "Network Authentication Required" );

	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКодСостояния( Результат, Знач Код, Знач Идентификатор, Знач Причина )
	
	Перем Описание;
	
	Описание = Новый Структура();
	Описание.Вставить( "Код", Код );
	Описание.Вставить( "Идентификатор", Идентификатор );
	Описание.Вставить( "Причина", Причина );

	Результат.Вставить( Код, Описание );

КонецПроцедуры

#КонецОбласти