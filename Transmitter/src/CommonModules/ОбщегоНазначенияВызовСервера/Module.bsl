// @strict-types

#Область ПрограммныйИнтерфейс

// СоздатьИнформациюОбОшибке создает и возвращает новый объект ИнформацияОбОшибке() с заданным сообщением об ошибке.
// 
// Параметры:
// 	Сообщение - Строка - текст сообщения об ошибке;
// 	
// Возвращаемое значение:
// 	ИнформацияОбОшибке - новый экземпляр ИнформацияОбОшибке с заданным текстом описания ошибки;
//
Функция СоздатьИнформациюОбОшибке( Знач Сообщение ) Экспорт
	
	Попытка
		
		ВызватьИсключение Сообщение;
		
	Исключение
		
		Возврат ИнформацияОбОшибке();
		
	КонецПопытки;
	
КонецФункции

// JsonВОбъект возвращает результат выполнения преобразования строки в формате JSON
// в универсальную коллекцию данных типа Соответствие.
// 
// Параметры:
// 	Текст - Строка - текст в формате JSON;
// 	
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - десериализованный JSON:
// 		* Ключ - Строка - ключ элемента JSON;
// 		* Значение - Произвольный - значение для ключа; 
//
Функция JsonВОбъект( Знач Текст ) Экспорт
		
	Параметры = Новый Структура();
	Параметры.Вставить( "ПрочитатьВСоответствие", Истина );
	Параметры.Вставить( "ИменаСвойствСоЗначениямиДата", "timestamp" );
	
	Возврат КоннекторHTTP.JsonВОбъект( Текст, , Параметры );

КонецФункции

#Область БСП

// BSLLS-off

// Преобразует строку таблицы значений в структуру.
// Свойства структуры и их значения совпадают с колонками переданной строки.
//
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений - строка таблицы значений.
//
// Возвращаемое значение:
//  Структура - преобразованная строка таблицы значений.
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

//@skip-check doc-comment-collection-item-type
//
// Преобразует таблицу значений в массив структур.
// Может использоваться для передачи на клиент данных в том случае, если таблица
// значений содержит только такие значения, которые могут
// быть переданы с сервера на клиент.
//
// Полученный массив содержит структуры, каждая из которых повторяет
// структуру колонок таблицы значений.
//
// Не рекомендуется использовать для преобразования таблиц значений
// с большим количеством строк.
//
// Параметры:
//  ТаблицаЗначений - ТаблицаЗначений - исходная таблица значений.
//
// Возвращаемое значение:
//  Массив - коллекция строк таблицы в виде структур.
//
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		//@skip-check typed-value-adding-to-untyped-collection
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции

// Возвращает таблицу значений на основании массива структур
// 
// Параметры:
//	МассивСтруктур - МассивСтруктур - массив структур, которые будут преобразованы в таблиц значений.
//										Свойства структуры первого элемента массива определяют состав колонок результирующей таблицы.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений, созданная из массива структур.
// 
//@skip-check method-param-value-type
//@skip-check doc-comment-type
Функция МассивВТаблицуЗначений(МассивСтруктур) Экспорт
	Таблица = Новый ТаблицаЗначений;
	// Создадим колонки по первой структуре массива
	Если ТипЗнч(МассивСтруктур) = Тип("Массив")
		И МассивСтруктур.Количество() <> 0 Тогда
		ПерваяСтруктура = МассивСтруктур[0];
		Для Каждого Свойство Из ПерваяСтруктура Цикл 
			//@skip-check property-return-type
			//@skip-check invocation-parameter-type-intersect
			Таблица.Колонки.Добавить(Свойство.Ключ, ОписаниеТиповПоТипу(ТипЗнч(Свойство.Значение)));
		КонецЦикла;
		
		Для Каждого Структура Из МассивСтруктур Цикл 
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
КонецФункции

// Возвращает описание типов по переданному типу
// 
// Параметры:
//	Тип - Тип - тип значения
//
// Возвращаемое значение:
//	ОписаниеТипов - созданное на основании переданного типа описание типов.
//
Функция ОписаниеТиповПоТипу(Тип) Экспорт
	МассивТипов = Новый Массив;
	//@skip-check typed-value-adding-to-untyped-collection
	МассивТипов.Добавить(Тип);
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Возврат ОписаниеТипов;
КонецФункции

// BSLLS-on

#КонецОбласти

#КонецОбласти
