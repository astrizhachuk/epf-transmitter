// @strict-types

#Область ОбработчикиСобытийФормы

// ПриЧтенииНаСервере обрабатывает событие чтения данных.
// 
// Параметры:
//  ТекущийОбъект - РегистрСведенийМенеджерЗаписи.ВнешниеФайлы - объект, считанный из информационной базы.
//
&НаСервере
Процедура ПриЧтенииНаСервере( ТекущийОбъект )

	Данные = ТекущийОбъект.Данные.Получить(); // Массив из см. ФайловыеМодели.ФайлИзХранилища
	
	ИмяФайлаСхемы = НастройкиСервисов.ПолучитьИмяФайлаСхемыМаршрута();
	
	ЗаполнитьКоммиты( Данные, ПолучитьОписанияКоммитов(ТекущийОбъект), ИмяФайлаСхемы );

	ЗаполнитьФайлы( Данные, ИмяФайлаСхемы );

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере( Отказ, СтандартнаяОбработка )
	
	Если ( Параметры.ТолькоПросмотрФайлов ) Тогда

		Элементы.ГруппаЗапись.Видимость = Ложь;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКоммиты

&НаКлиенте
Процедура КоммитыПриАктивизацииСтроки( Элемент )
	
	ФайлыПоИдентификатору.Очистить();

	// BSLLS:LineLength-off
	ТекущиеДанные = Элемент.ТекущиеДанные; // ДанныеФормыЭлементКоллекции: см. РегистрСведений.ВнешниеФайлы.Форма.ФормаЗаписи.Коммиты
	// BSLLS:LineLength-on

	Если ( ТекущиеДанные = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ОписаниеФайла Из Файлы Цикл
		
		Если ( ОписаниеФайла.Идентификатор = ТекущиеДанные.Идентификатор ) Тогда

			НовыйФайл = ФайлыПоИдентификатору.Добавить();
			
			ЗаполнитьЗначенияСвойств( НовыйФайл, ОписаниеФайла );

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьДанныеВнешнегоЗапроса( Знач ТекущийОбъект )
	
	Отбор = Новый Структура( "Обработчик, Идентификатор", ТекущийОбъект.Обработчик, ТекущийОбъект.Идентификатор );
	
	//@skip-check property-return-type
	Данные = РегистрыСведений.ВнешниеЗапросы.Получить( Отбор ).Данные; // ХранилищеЗначения
	
	Возврат ( Данные.Получить() );
	
КонецФункции

&НаСервере
Функция ПолучитьОписанияКоммитов( Знач ТекущийОбъект )

	ДанныеВнешнегоЗапроса = ПолучитьДанныеВнешнегоЗапроса( ТекущийОбъект );
	
	Если ( ТипЗнч(ДанныеВнешнегоЗапроса) = Тип("Строка") ) Тогда
		
		Возврат ВнешниеЗапросы.ПолучитьКоммиты( ДанныеВнешнегоЗапроса );
		
	Иначе
		
		Возврат ( Новый Соответствие() );

	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКоммиты( Знач ОписанияФайлов, Знач ОписанияКоммитов, Знач ИмяФайлаСхемы )
	
	Коммиты.Очистить();

	ДобавленныеИдентификаторы = Новый Соответствие();
	
	Для Каждого ОписаниеФайла Из ОписанияФайлов Цикл
		
		Если ( ОписаниеФайла.ИмяФайла = ИмяФайлаСхемы ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ( ДобавленныеИдентификаторы.Получить(ОписаниеФайла.Идентификатор) <> Неопределено ) Тогда
			
			Продолжить;
			
		КонецЕсли;

		ДобавленныеИдентификаторы.Вставить( ОписаниеФайла.Идентификатор, Истина );
		
		НовыйКоммит = Коммиты.Добавить();
		
		НовыйКоммит.Идентификатор = ОписаниеФайла.Идентификатор;
		
		НовыйКоммит.КраткийИдентификатор = ОписаниеФайла.Идентификатор;
		
		ОписаниеКоммита = ОписанияКоммитов.Получить( ОписаниеФайла.Идентификатор );

		Если ( ОписаниеКоммита <> Неопределено ) Тогда

			НовыйКоммит.Дата = ОписаниеКоммита.Дата;
			
			НовыйКоммит.Комментарий = ОписаниеКоммита.Заголовок;

		КонецЕсли;
			
	КонецЦикла;
	
	Коммиты.Сортировать( "Дата Убыв" );
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФайлы( Знач Данные, Знач ИмяФайлаСхемы )
	
	Файлы.Очистить();

	Для Каждого ОписаниеФайла Из Данные Цикл // ФайловыеМодели.ФайлИзХранилища

		Если ( ОписаниеФайла.ИмяФайла = ИмяФайлаСхемы ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НовыйФайл = Файлы.Добавить();
		
		ЗаполнитьЗначенияСвойств( НовыйФайл, ОписаниеФайла );

	КонецЦикла;
	
	Файлы.Сортировать( "ИмяФайла Возр" );
	
КонецПроцедуры

#КонецОбласти
