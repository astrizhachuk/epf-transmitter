// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// ЗаписатьДанные сохраняет данные в информационной базе.
// 
// Параметры:
// 	Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов,
// 																для которого производится запись;
//  Идентификатор - Строка - уникальный идентификатор данных для обработчика;
// 	Данные - Произвольный - произвольные данные;
//
Процедура ЗаписатьДанные( Знач Обработчик, Знач Идентификатор, Знач Данные ) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Обработчик.Установить( Обработчик );
	НаборЗаписей.Отбор.Идентификатор.Установить( Идентификатор );
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.Обработчик = Обработчик;
	Запись.Идентификатор = Идентификатор;
	Запись.Данные = Новый ХранилищеЗначения( Данные );
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

// НайтиДанные выполняет поиск данных в информационной базе по заданным параметрам
// с извлечением результата поиска из контейнера ХранилищеЗначения.
// 
// Параметры:
// 	Обработчик - СправочникСсылка.ОбработчикиВнешнихЗапросов - обработчик внешних запросов,
// 																для которого производится поиск записи;
//  Идентификатор - Строка - уникальный идентификатор данных для обработчика;
// 
// Возвращаемое значение:
// 	Произвольный - результат поиска, извлеченный из ХранилищеЗначения;
//  
Функция НайтиДанные( Знач Обработчик, Знач Идентификатор ) Экспорт
	
	Отбор = Новый Структура( "Обработчик, Идентификатор", Обработчик, Идентификатор );
	
	//@skip-check property-return-type
	Данные = Получить( Отбор ).Данные; // ХранилищеЗначения
	
	Возврат Данные.Получить();
	
КонецФункции

#КонецОбласти

#КонецЕсли