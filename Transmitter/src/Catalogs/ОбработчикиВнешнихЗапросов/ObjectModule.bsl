// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// ЗагрузитьИсториюСобытий загружает отобранные данные из журнала регистрации в табличную часть обработчика.
// 
// Параметры:
// 	ДатаНачала - Дата - дата начала отбора данных;
// 	ДатаОкончания - Дата - дата окончания отбора данных;
//
Процедура ЗагрузитьИсториюСобытий( Знач ДатаНачала, Знач ДатаОкончания ) Экспорт
	
	Отбор = Новый Структура( "ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания );
	
	ЖурналРегистрации = Логи.ПолучитьИсториюСобытий( Логи.ПредставленияСобытий(), Отбор );
	
	ИсторияСобытий.Очистить();
	
	Для Каждого ЗаписьЖурналаРегистрации Из ЖурналРегистрации Цикл
		
		Если ( ЗаписьЖурналаРегистрации.Данные = Неопределено ИЛИ ЗаписьЖурналаРегистрации.Данные = Ссылка ) Тогда
			
			ЗаполнитьЗначенияСвойств( ИсторияСобытий.Добавить(), ЗаписьЖурналаРегистрации );
			
		КонецЕсли;
		
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью( Отказ )
	
	Если ( Отказ Или ОбменДанными.Загрузка ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Обработчики = Справочники.ОбработчикиВнешнихЗапросов.НайтиПоАдресуПроекта( ProjectURL );
	
	Для Каждого Обработчик Из Обработчики Цикл
		
		Если ( Ссылка = Обработчик.Обработчик ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Сообщение = НСтр("ru = 'Такой проект уже существует';en = 'This project already exists'");
		
		//@skip-check invocation-parameter-type-intersect
		ОбщегоНазначения.СообщитьПользователю( Сообщение, ЭтотОбъект, "ProjectURL", , Отказ );
		
		Возврат;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
