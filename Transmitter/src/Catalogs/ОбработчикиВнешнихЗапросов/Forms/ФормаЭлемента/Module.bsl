// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере( Отказ, СтандартнаяОбработка )
	
	КодСостоянияОК = КодыСостоянияHTTPКлиентСерверПовтИсп.НайтиКодПоИдентификатору( "OK" );
	
	ИсточникКлючаЗапросов = Перечисления.ИсточникиКлючаЗаписи.ПолученныеЗапросы;
	
	УстановитьОформлениеИсторииСобытий( ИсторияСобытий.КомпоновщикНастроек.Настройки.УсловноеОформление );
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии( Отказ )
	
	УстановитьОтбор( ПолученныеЗапросы.Отбор, "Обработчик", Объект.Ссылка );
	
	УстановитьОтбор( ИсторияСобытий.Отбор, "Ссылка", Объект.Ссылка );
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолученныеЗапросы

&НаКлиенте
Процедура ПолученныеЗапросыВыбор( Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка )
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИсториюСобытий( Command )
	
	ОткрытьФорму( "Справочник.ОбработчикиВнешнихЗапросов.Форма.ОтборИсторииСобытий", , ЭтотОбъект, , , ,
		Новый ОписаниеОповещения( "ВыполнитьПослеУстановкиОтбораИсторииСобытий", ЭтотОбъект ),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца );

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРепозиторийНаСервере( Команда )
	
	Если ( ПустаяСтрока(Объект.АдресПроекта) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке( Объект.АдресПроекта );
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьОбработку( Команда )
	
	ТекущаяСтрока = Элементы.ПолученныеЗапросы.ТекущаяСтрока; // РегистрСведенийКлючЗаписи.ВнешниеЗапросы
	
	Если ( ТекущаяСтрока = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПовторитьОбработкуДанных( ТекущаяСтрока );
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Запущено задание на повторную обработку запроса.'; en = 'Request reprocessing job started.'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТелоЗапроса( Команда )
	
	ТекущаяСтрока = Элементы.ПолученныеЗапросы.ТекущаяСтрока; // РегистрСведенийКлючЗаписи.ВнешниеЗапросы
	
	Если ( ТекущаяСтрока = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Данные = ПолучитьТелоЗапроса( ТекущаяСтрока );
	
	Если ( ПустаяСтрока(Данные) ) Тогда

		Возврат;

	КонецЕсли;

	ПараметрыОткрытия = Новый Структура( "Данные", Данные );

	ОткрытьФорму( "Справочник.ОбработчикиВнешнихЗапросов.Форма.ТелоЗапроса",
		 ПараметрыОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца );
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФоновыеЗадания( Команда )
	
	ТекущаяСтрока = Элементы.ПолученныеЗапросы.ТекущаяСтрока; // РегистрСведенийКлючЗаписи.ВнешниеЗапросы
	
	Если ( ТекущаяСтрока = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Запрещается использовать параметр с типом "Произвольный" для передачи
	// структуры параметров для инициализации формы (см. Справка.1C:Code style V8.Проверки.Типизация кода).
	// Дополнительный вызов сервера для определения идентификатора, т.к. ТекущиеДанные могут их не содержать.
	ПараметрыОткрытия = Новый Структура( "Ключ", ПолучитьИдентификатор(ТекущаяСтрока) );

	ОткрытьФорму( "Справочник.ОбработчикиВнешнихЗапросов.Форма.ФоновыеЗадания",
		ПараметрыОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца );
				 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьОтбор( Знач ОтборКомпоновкиДанных, Знач Поле, Знач Значение )
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ОтборКомпоновкиДанных,
		Поле, ВидСравненияКомпоновкиДанных.Равно, Значение );

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификатор( Знач КлючЗаписи )
	
	Возврат КлючЗаписи.Идентификатор;

КонецФункции

&НаСервере
Функция ЗагрузитьИсториюСобытийВОбъект( Знач Период )
	
	Обработчик = РеквизитФормыВЗначение( "Объект" );
	
	Обработчик.ЗагрузитьИсториюСобытий( Период.ДатаНачала, Период.ДатаОкончания );
	
	ЗначениеВРеквизитФормы( Обработчик, "Объект" );
	
	Возврат Обработчик.ИсторияСобытий.Количество();
	
КонецФункции

// Выполняет действия после установки отбора истории событий.
//
// Параметры:
//   Период - Неопределено, СтандартныйПериод - период выборки данных.
//   ДополнительныеПараметры - Неопределено - не используетсся.
//
&НаКлиенте
Процедура ВыполнитьПослеУстановкиОтбораИсторииСобытий( Знач Период, Знач ДополнительныеПараметры ) Экспорт
	
	Таймаут = 5;
	
	Если ( Период = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// TODO сейчас нет фильтра по метаданным и попадут как события гитлаб, так и события произвольных запросов
	// так как произвольные запросы не реализованы, то работает корректно, при включении произвольных - сломается
		
	КоличествоЗаписей = ЗагрузитьИсториюСобытийВОбъект( Период );
	
	Сообщение = СтрШаблон( НСтр( "ru = 'Загружено записей: %1';en = 'Records loaded: %1'" ), КоличествоЗаписей );
	
	Заголовок = НСтр( "ru = 'Загрузка истории событий';en = 'Loading history events'" );

	ПоказатьПредупреждение( Неопределено, Сообщение, Таймаут, Заголовок );
	
	Элементы.ИсторияСобытий.Обновить();
	
КонецПроцедуры

// ПолучитьТелоЗапроса возвращает тело внешнего запроса по указанному ключу записи.
//
// Параметры:
//   КлючЗаписи - РегистрСведенийКлючЗаписи.ВнешниеЗапросы - ключ записи внешнего запроса.
//
// Возвращаемое значение:
//   Строка - тело внешнего запроса.
//
&НаСервереБезКонтекста
Функция ПолучитьТелоЗапроса( Знач КлючЗаписи )

	ВнешнийЗапрос = ВнешниеЗапросы.Восстановить( КлючЗаписи.Обработчик, КлючЗаписи.Идентификатор );
	
	Если ( ВнешнийЗапрос = Неопределено ) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат ВнешнийЗапрос.ПолучитьТело();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПовторитьОбработкуДанных( Знач КлючЗаписи )
	
	ОбработкаДанных.ОбработатьЗагруженныеДанные( КлючЗаписи.Обработчик, КлючЗаписи.Идентификатор );
	
КонецПроцедуры

#Область УсловноеОформлениеИсторииСобытий

&НаСервере
Процедура УстановитьОформлениеИсторииСобытий( Знач Настройки )
	
	УстановитьОформлениеУспешнойОперации( Настройки.Элементы.Добавить() );
	УстановитьОформлениеОшибочнойОперации( Настройки.Элементы.Добавить() );
	УстановитьОформлениеСобытияОбработчика( Настройки.Элементы.Добавить() );
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеУспешнойОперации( Знач ЭлементКомпоновки )
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ЭлементКомпоновки.Отбор,
		"КодСостояния", ВидСравненияКомпоновкиДанных.Равно, КодСостоянияОК );
	
	ЭлементКомпоновки.Оформление.УстановитьЗначениеПараметра( "ЦветТекста",
		Метаданные.ЭлементыСтиля.ЦветТекстаУспешнойОперации.Значение );
	
	ОформляемоеПоле = ЭлементКомпоновки.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных( "КодСостояния" );
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеОшибочнойОперации( Знач ЭлементКомпоновки )
	
	ГруппаОтбора = ЭлементКомпоновки.Отбор.Элементы.Добавить( Тип("ГруппаЭлементовОтбораКомпоновкиДанных") );
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ГруппаОтбора,
		"КодСостояния", ВидСравненияКомпоновкиДанных.Больше, КодСостоянияОК );
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ГруппаОтбора,
		"Уровень", ВидСравненияКомпоновкиДанных.Равно, Строка(УровеньЖурналаРегистрации.Ошибка) );
	
	ЭлементКомпоновки.Оформление.УстановитьЗначениеПараметра( "ЦветТекста",
		Метаданные.ЭлементыСтиля.ЦветТекстаОшибочнойОперации.Значение );
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеСобытияОбработчика( Знач ЭлементКомпоновки )
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ЭлементКомпоновки.Отбор,
		"ТекущийОбработчик", ВидСравненияКомпоновкиДанных.Равно, Истина );
	
	ЭлементКомпоновки.Оформление.УстановитьЗначениеПараметра( "Шрифт",
		Метаданные.ЭлементыСтиля.ЖирныйШрифт.Значение );
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
