// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере( Отказ, СтандартнаяОбработка )
	
	КодСостоянияОК = КодыСостоянияHTTPКлиентСерверПовтИсп.НайтиКодПоИдентификатору( "OK" );
	
	УстановитьОформлениеИсторииСобытий( ИсторияСобытий.КомпоновщикНастроек.Настройки.УсловноеОформление );
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии( Отказ )
	
	УстановитьОтбор( ПолученныеЗапросы.Отбор, "Обработчик", Объект.Ссылка );
	
	// TODO получается, мы грузим по всем обработчикам, а нам нужен только по текущему + общие события
	// получаются расхождения в кол-ве записей загруженных и доп.фильтр уже в дин.списке
	// какая-то ерундистика, подумать о том, чтобы не загружать лишние обработчики и убрать фильтр по дин.списку
	УстановитьОтбор( ИсторияСобытий.Отбор, "Ссылка", Объект.Ссылка );
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПолученныеЗапросы

&НаКлиенте
Процедура ПолученныеЗапросыВыбор( Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка )
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьРепозиторийНаСервере( Команда )
	
	Если ( ПустаяСтрока(Объект.АдресПроекта) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке( Объект.АдресПроекта );
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТелоЗапроса( Команда )
	
	ТекущаяСтрока = Элементы.ПолученныеЗапросы.ТекущаяСтрока; // РегистрСведенийКлючЗаписи.ВнешниеЗапросы
	
	Если ( ТекущаяСтрока = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Данные = ПолучитьТелоЗапроса( ТекущаяСтрока );
	
	Если ( ПустаяСтрока(Данные) ) Тогда

		Возврат;

	КонецЕсли;

	ПараметрыОткрытия = Новый Структура( "Данные", Данные );

	ОткрытьФорму( ВызываемаяФорма("ТелоЗапроса"),
		 ПараметрыОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца );
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторМаршрутов( Команда )
	
	ТекущаяСтрока = Элементы.ПолученныеЗапросы.ТекущаяСтрока; // РегистрСведенийКлючЗаписи.ВнешниеЗапросы
	
	Если ( ТекущаяСтрока = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура( "Ключ", ТекущаяСтрока );

	ОткрытьФорму( ВызываемаяФорма("РедакторМаршрутов"),
		 ПараметрыОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца );

КонецПроцедуры







&AtClient
Procedure OpenBackgrounds( Command )
	
	CurrentRow = Items.ПолученныеЗапросы.CurrentRow;
	
	If ( CurrentRow = Undefined ) Then
		
		Return;
		
	EndIf;
	
	Options = New Structure();
	Options.Insert( "КлючЗаписи", CurrentRow );
	OpenForm( ВызываемаяФорма("Backgrounds"), Options, ThisObject, , , , , FormWindowOpeningMode.LockOwnerWindow );
				 
EndProcedure

&AtClient
Procedure HandleRequest( Command )
	
	CurrentRow = Items.ПолученныеЗапросы.CurrentRow;
	
	If ( CurrentRow = Undefined ) Then
		
		Return;
		
	EndIf;
	
	HandleRequestManually( CurrentRow );
	
	ShowMessageBox( , NStr("ru = 'Задание на обработку запроса запущено.'; en = 'Request processing job started.'") );
		
EndProcedure

&AtClient
Procedure ЗагрузитьИсториюСобытий( Command )
	
	Notify = New NotifyDescription( "DoAfterSelectEventsFilter", ThisObject );
	OpenForm( ВызываемаяФорма("ОтборИсторииСобытий"), , ThisObject, , , , Notify, FormWindowOpeningMode.LockOwnerWindow );

EndProcedure

&AtClient
Procedure DoAfterSelectEventsFilter( Val Period, Val Params ) Export
	
	TIMEOUT = 5;
	
	If ( Period = Undefined ) Then
		
		Return;
		
	EndIf;
		
	Records = LoadEventsHistoryAtServer( Period );
	
	Message = NStr( "ru = 'Загружено записей: ';en = 'Records loaded: '" ) + Records;
	MessageBoxTitle = NStr( "ru = 'Загрузка истории событий';en = 'Loading history events'" );
	ShowMessageBox( Undefined, Message, TIMEOUT, MessageBoxTitle );
	
	Items.ИсторияСобытий.Refresh();
	
EndProcedure

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьОтбор( Знач ОтборКомпоновкиДанных, Знач Поле, Знач Значение )
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ОтборКомпоновкиДанных,
		Поле, ВидСравненияКомпоновкиДанных.Равно, Значение );

КонецПроцедуры

&НаКлиенте
Функция ВызываемаяФорма( Знач Имя )
	
	Возврат "Справочник.ОбработчикиВнешнихЗапросов.Форма." + Имя;
	
КонецФункции

// ПолучитьТелоЗапроса возвращает тело внешнего запроса по указанному ключу записи.
//
// Параметры:
//   КлючЗаписи - РегистрСведенийКлючЗаписи.ВнешниеЗапросы - ключ записи внешнего запроса.
//
// Возвращаемое значение:
//   Строка - тело внешнего запроса.
//
&НаСервереБезКонтекста
Функция ПолучитьТелоЗапроса( Знач КлючЗаписи )

	ВнешнийЗапрос = ВнешниеЗапросы.Восстановить( КлючЗаписи.Обработчик, КлючЗаписи.Идентификатор );
	
	Если ( ВнешнийЗапрос = Неопределено ) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат ВнешнийЗапрос.ПолучитьТело();
	
КонецФункции

#Область УсловноеОформлениеИсторииСобытий

&НаСервере
Процедура УстановитьОформлениеИсторииСобытий( Знач Настройки )
	
	УстановитьОформлениеУспешнойОперации( Настройки.Элементы.Добавить() );
	УстановитьОформлениеОшибочнойОперации( Настройки.Элементы.Добавить() );
	УстановитьОформлениеСобытияОбработчика( Настройки.Элементы.Добавить() );
	УстановитьОформлениеНеидентифицируемыхСобытий( Настройки.Элементы.Добавить() );
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеУспешнойОперации( Знач ЭлементКомпоновки )
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ЭлементКомпоновки.Отбор,
		"КодСостояния", ВидСравненияКомпоновкиДанных.Равно, КодСостоянияОК );
	
	ЭлементКомпоновки.Оформление.УстановитьЗначениеПараметра( "ЦветТекста",
		Метаданные.ЭлементыСтиля.ЦветТекстаУспешнойОперации.Значение );
	
	ОформляемоеПоле = ЭлементКомпоновки.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных( "КодСостояния" );
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеОшибочнойОперации( Знач ЭлементКомпоновки )
	
	ГруппаОтбора = ЭлементКомпоновки.Отбор.Элементы.Добавить( Тип("ГруппаЭлементовОтбораКомпоновкиДанных") );
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ГруппаОтбора,
		"КодСостояния", ВидСравненияКомпоновкиДанных.Больше, КодСостоянияОК );
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ГруппаОтбора,
		"Уровень", ВидСравненияКомпоновкиДанных.Равно, Строка(УровеньЖурналаРегистрации.Ошибка) );
	
	ЭлементКомпоновки.Оформление.УстановитьЗначениеПараметра( "ЦветТекста",
		Метаданные.ЭлементыСтиля.ЦветТекстаОшибочнойОперации.Значение );
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеСобытияОбработчика( Знач ЭлементКомпоновки )
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ЭлементКомпоновки.Отбор,
		"ТекущийОбработчик", ВидСравненияКомпоновкиДанных.Равно, Истина );
	
	ЭлементКомпоновки.Оформление.УстановитьЗначениеПараметра( "Шрифт",
		Метаданные.ЭлементыСтиля.ЖирныйШрифт.Значение );
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеНеидентифицируемыхСобытий( Знач ЭлементКомпоновки )
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки( ЭлементКомпоновки.Отбор,
		"ТекущийОбработчик", ВидСравненияКомпоновкиДанных.Равно, Ложь );
	
	ЭлементКомпоновки.Оформление.УстановитьЗначениеПараметра( "Шрифт",
		Метаданные.ЭлементыСтиля.КурсивныйШрифт.Значение );
	
КонецПроцедуры

#КонецОбласти

&AtServerNoContext
Procedure HandleRequestManually( Val КлючЗаписи )
	
	ОбработкаДанных.ОбработатьЗагруженныеДанные( КлючЗаписи.Обработчик, КлючЗаписи.Идентификатор );
	
EndProcedure

&AtServer
Function LoadEventsHistoryAtServer( Знач Период )
	
	Обработчик = РеквизитФормыВЗначение( "Объект" );
	Обработчик.ЗагрузитьИсториюСобытий( Период.ДатаНачала, Период.ДатаОкончания );
	ValueToFormAttribute( Обработчик, "Объект" );
	
	Return Обработчик.ИсторияСобытий.Count();
	
EndFunction

#КонецОбласти
