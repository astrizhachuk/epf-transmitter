// @strict-types

#Область ОбработчикиСобытийФормы

// ПриЧтенииНаСервере обрабатывает событие чтения данных.
// 
// Параметры:
//  ТекущийОбъект - РегистрСведенийМенеджерЗаписи.ВнешниеЗапросы - объект, считанный из информационной базы.
//
&НаСервере
Процедура ПриЧтенииНаСервере( ТекущийОбъект )

	Маршруты.Очистить();
	
	СчитанныеДанные = ТекущийОбъект.Data.Получить();
	
	Если ( ТипЗнч(СчитанныеДанные) = Тип("Строка") ) Тогда
		
		ДанныеЗапроса = СчитанныеДанные;
		
		ЗаполнитьМаршруты( Маршруты, ДанныеЗапроса );
		
		Маршруты.Сортировать( "Дата Убыв" );
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью( Отказ, ПараметрыЗаписи )
	
	Если ( НЕ Модифицированность ) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// ПередЗаписьюНаСервере обрабатывает событие перед записью объекта на сервере.
//
// Параметры:
//   Отказ - Булево - признак отказа от записи.
//   ТекущийОбъект - РегистрСведенийМенеджерЗаписи.ВнешниеЗапросы - объект, который будет записан в информационную базу.
//   ПараметрыЗаписи - Структура - параметры записи объекта.
//
&НаСервере
Процедура ПередЗаписьюНаСервере( Отказ, ТекущийОбъект, ПараметрыЗаписи )
	
	Попытка
		
		КлючЗаписи = Параметры.Ключ; // см. РегистрСведенийКлючЗаписи.ВнешниеЗапросы
		
		ВыполнитьПроверкуПользовательскихСхем( Маршруты, КлючЗаписи );
	
		ОбновитьПользовательскиеСхемы( ТекущийОбъект, Маршруты );
		
	Исключение

		Отказ = Истина;

	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МаршрутыПользовательскаяСхемаПриИзменении( Элемент )

	// BSLLS:LineLength-off
	ТекущиеДанные = Элементы.Маршруты.ТекущиеДанные; // ДанныеФормыЭлементКоллекции: см. Справочник.ОбработчикиВнешнихЗапросов.Форма.РедакторМаршрутов.Маршруты
	// BSLLS:LineLength-on
	
	Если ( ТекущиеДанные = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ( ТекущиеДанные.Пользовательская ) Тогда
		
		УстановитьДоступностьРедактора( ТекущиеДанные.Пользовательская );
		
	Иначе
		
		ВосстановитьИсходнуюСхемуМаршрутизации( ТекущиеДанные );
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМаршруты

&НаКлиенте
Процедура МаршрутыПриАктивизацииСтроки( Элемент )

	// BSLLS:LineLength-off
	ТекущиеДанные = Элемент.ТекущиеДанные; // ДанныеФормыЭлементКоллекции: см. Справочник.ОбработчикиВнешнихЗапросов.Форма.РедакторМаршрутов.Маршруты
	// BSLLS:LineLength-on

	Если ( ТекущиеДанные = Неопределено ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДоступностьРедактора( ТекущиеДанные.Пользовательская );

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьМаршруты( Маршруты, Знач Данные )

	ДлинаИдентификатора = 8;
	
	Для Каждого СхемаМаршрута Из ВнешниеЗапросы.ПолучитьСводныеСхемыМаршрутов(Данные) Цикл
		
		НовыйМаршрут = Маршруты.Добавить();

		ЗаполнитьЗначенияСвойств( НовыйМаршрут, СхемаМаршрута );
		
		НовыйМаршрут.КраткийИдентификатор = Лев( НовыйМаршрут.Идентификатор, ДлинаИдентификатора );
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРедактора( Знач РедактированиеРазрешено )
	
	Элементы.Редактор.ТолькоПросмотр = ( НЕ РедактированиеРазрешено );
		
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьИсходнуюСхемуМаршрутизации( Знач ТекущиеДанные )

	Оповещение = Новый ОписаниеОповещения( "ВыполнитьПослеЗакрытияВопросаВосстановленияСхемы",
		ЭтотОбъект, ТекущиеДанные );

	ПоказатьВопрос(
		Оповещение,
		НСтр( "ru = 'Восстановить исходную схему маршрутизации?';
					|en = 'Restore the original routing schema?'" ),
		РежимДиалогаВопрос.ДаНет );
	
КонецПроцедуры

// ВыполнитьПослеЗакрытияВопросаВосстановленияСхемы вызывается после закрытия вопроса восстановления схемы.
// 
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога
//  ТекущиеДанные - ДанныеФормыЭлементКоллекции: см. Справочник.ОбработчикиВнешнихЗапросов.Форма.РедакторМаршрутов.Маршруты // BSLLS:LineLength-off
//
&НаКлиенте
Процедура ВыполнитьПослеЗакрытияВопросаВосстановленияСхемы( РезультатВопроса, ТекущиеДанные ) Экспорт // BSLLS:MissingParameterDescription-off
	
	Если ( РезультатВопроса = КодВозвратаДиалога.Нет ) Тогда
		
		ТекущиеДанные.Пользовательская = Истина;
		
		Возврат;
		
	КонецЕсли;

	ТекущиеДанные.Представление = ПолучитьИсходнуюСхемуМаршрутов( ДанныеЗапроса, ТекущиеДанные.Идентификатор );

	УстановитьДоступностьРедактора( ТекущиеДанные.Пользовательская );
	
КонецПроцедуры

// ПолучитьИсходнуюСхемуМаршрутов возвращает исходную схему маршрутов по идентификатору коммита.
// 
// Параметры:
//  ДанныеЗапроса - Строка - сериализованные данные запроса.
//  Идентификатор - ОпределяемыйТип.ИдентификаторКоммита - идентификатор коммита.
// 
// Возвращаемое значение:
//  Строка - исходная схема маршрутов в формате JSON.
//
&НаСервереБезКонтекста
Функция ПолучитьИсходнуюСхемуМаршрутов( Знач ДанныеЗапроса, Знач Идентификатор )
	
	Возврат ВнешниеЗапросы.ПолучитьИсходнуюСхемуМаршрутов( ДанныеЗапроса, Идентификатор );
	
КонецФункции

#Область Запись

&НаСервере
Процедура ПроверитьФормат( Знач Текст )

	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку( Текст );
	Чтение.Прочитать();

КонецПроцедуры

// Выполнить проверку пользовательских схем.
// 
// Параметры:
//  Маршруты - см. Справочник.ОбработчикиВнешнихЗапросов.Форма.РедакторМаршрутов.Маршруты
//  КлючЗаписи - РегистрСведенийКлючЗаписи.ВнешниеЗапросы - ключ обрабатываемой записи.
//
&НаСервере
Процедура ВыполнитьПроверкуПользовательскихСхем( Знач Маршруты, Знач КлючЗаписи )
	
	Для Каждого ОписаниеСхемы Из Маршруты Цикл
		
		Если ( НЕ ОписаниеСхемы.Пользовательская ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Попытка

			ПроверитьФормат( ОписаниеСхемы.Представление );

		Исключение
			
			ТекстСообщения = НСтр(
				"ru = '%1: Значение в редакторе схемы не является корректным значением JSON.';
				|en = '%1: The value in the schema editor is not a valid JSON value.'");
			ТекстСообщения = СтрШаблон( ТекстСообщения, Маршруты[Маршруты.Индекс(ОписаниеСхемы)].КраткийИдентификатор );
			
			//@skip-check invocation-parameter-type-intersect
			ОбщегоНазначения.СообщитьПользователю( ТекстСообщения,
				КлючЗаписи,
				"Маршруты[" + Маршруты.Индекс(ОписаниеСхемы) + "].КраткийИдентификатор" );

			ВызватьИсключение;

		КонецПопытки;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьПользовательскиеСхемы( Знач ОписанияСхем ) 
	
	Результат = Новый Массив(); // Массив из см. ВнешниеЗапросы.ОписаниеПользовательскойСхемыМаршрутов

	Для Каждого ОписаниеСхемы Из ОписанияСхем Цикл // см. ВнешниеЗапросы.ОписаниеПользовательскойСхемыМаршрутов
		
		Если ( НЕ ОписаниеСхемы.Пользовательская ) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
			ОписаниеПользовательскойСхемы = ВнешниеЗапросы.ОписаниеПользовательскойСхемыМаршрутов(
					ОписаниеСхемы.Идентификатор, ОписаниеСхемы.Представление);

		Результат.Добавить( ОписаниеПользовательскойСхемы );

	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьПользовательскиеСхемы( ТекущийОбъект, Знач Маршруты )

	// BSLLS:LineLength-off	
	ПользовательскиеСхемы = ОпределитьПользовательскиеСхемы( Маршруты ); // Массив из см. ВнешниеЗапросы.ОписаниеПользовательскойСхемыМаршрутов
	// BSLLS:LineLength-on
		
	НовыеДанные = ВнешниеЗапросы.ЗаменитьПользовательскиеСхемы( ДанныеЗапроса, ПользовательскиеСхемы );
		
	ТекущийОбъект.Data = Новый ХранилищеЗначения( НовыеДанные );
	
	ДанныеЗапроса = НовыеДанные;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
