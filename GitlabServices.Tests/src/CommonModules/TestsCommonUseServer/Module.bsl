#Region Internal

// @unit-test:fast
// Параметры:
// 	Фреймворк - ФреймворкТестирования - Фреймворк тестирования
//
Procedure МокСерверДоступен(Фреймворк) Export
	
	// given
	URL = "http://mock-server:1080";
	Мок = Обработки.MockServerClient.Создать();
	Мок.Сервер(URL, , Истина).ОжидатьOpenAPI("file:/tmp/receiver.yml", """version"": ""200""");
	Мок = Неопределено;
	// when
	Результат = HTTPConnector.Get(URL + "/version");
	// then
	Фреймворк.ПроверитьРавенство(Результат.КодСостояния, 200);
	ТелоОтвета = HTTPConnector.КакТекст(Результат, КодировкаТекста.UTF8);
	Фреймворк.ПроверитьВхождение(ТелоОтвета, """message""");

EndProcedure

// @unit-test
Procedure AppendCollectionFromStream(Фреймворк) Export
	
	Поток = Новый ПотокВПамяти();
	ЗаписьТекста = Новый ЗаписьТекста(Поток);
	Значение = "Туточки текст потока";
	ЗаписьТекста.Записать(Значение);
   	ЗаписьТекста.Закрыть();

	Коллекция = Новый Структура("Ключ1", "Значение1");
	CommonUseServerCall.AppendCollectionFromStream(Коллекция, "Ключ2", Поток);
   	Поток.Закрыть();

   	Фреймворк.ПроверитьРавенство( Значение, Коллекция.Ключ2 );

EndProcedure

#EndRegion

#Region Private

Procedure Пауза(Знач Ждать) Export
	ОкончаниеПаузы = ТекущаяДата() + Ждать;
	Пока (Истина) Цикл
		Если ТекущаяДата() >= ОкончаниеПаузы Тогда
			Возврат;
		КонецЕсли; 
	КонецЦикла; 
EndProcedure

Function КакТекст(Знач Ответ, Знач Кодировка = Неопределено) Export
	
	Возврат HTTPConnector.КакТекст(Ответ, Кодировка);

EndFunction

Procedure СправочникиУдалитьВсеДанные( Знач ИменаСправочников ) Export
	
	МассивИмен = СтрРазделить(ИменаСправочников, ",");
	
	Для Каждого Элемент Из МассивИмен Цикл
		
		ЭлементыСправочника = Справочники[СокрЛП(Элемент)].Выбрать();
		Пока ЭлементыСправочника.Следующий() Цикл
			Объект = ЭлементыСправочника.ПолучитьОбъект();
			Объект.Удалить();
		КонецЦикла;
	
	КонецЦикла;
	
EndProcedure

Procedure РегистрыСведенийУдалитьВсеДанные( Знач ИменаРегистровСведений ) Export
	
	МассивИмен = СтрРазделить(ИменаРегистровСведений, ",");
	
	Для Каждого Элемент Из МассивИмен Цикл
		НаборЗаписей = РегистрыСведений[СокрЛП(Элемент)].СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
	КонецЦикла;
	
EndProcedure

Function ОтборЖурналаРегистрации( Знач Событие, Знач Уровень = "Информация" ) Export
	
	Возврат Новый Структура("StartDate, Level, Event", ТекущаяДата(), УровеньЖурналаРегистрации[Уровень], Событие);
	
EndFunction

Function СобытияЖурналаРегистрации( Знач Отбор, Знач Секунд = 2 ) Export

	Пауза(Секунд);
	Результат = Новый ТаблицаЗначений();
	ВыгружаемыеКолонки = "Date, EventPresentation, MetadataPresentation, DataPresentation, Comment";
	ВыгрузитьЖурналРегистрации(Результат, Отбор, ВыгружаемыеКолонки);
	
	Возврат Результат;
	
EndFunction

#EndRegion
