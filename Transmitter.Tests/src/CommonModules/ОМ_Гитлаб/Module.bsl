#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("ПолучитьПараметрыСоединения")
			.ВТранзакции()
		.ДобавитьТест("ПолучитьПутьКНеобработанномуФайлу")
			// TODO проверить issue проекта и что возвращает в имени файла гитлаб
			// Помню, была проблема с кодировкой в имени файла, чекнуть "UTF-8", "ISO-8859-1"
			// кириллицу в заголовках то ли коверкало, то ли не читало. Поэтому потесить надо еще на других параметрах
			// но надо curl'ом собрать инфу с сервера гитлаб о результате чтения данных с него через HTTP коннектор (Get)
		.ДобавитьТест("ПолучитьНеобработанныеФайлы")
			.СПараметрами("/а/б.epf", "б.epf", ПолучитьДвоичныеДанныеИзСтроки("{}"))
		.ДобавитьТест("ПолучитьНеобработанныеФайлыПутиКФайламНеЗаполнены")
		.ДобавитьТест("ПолучитьНеобработанныеФайлыПутиКФайламСодержатПустойПуть")
		.ДобавитьТест("ПолучитьНеобработанныеФайлыСервисОтсутствует")
			.СПараметрами("/а")
			.СПараметрами("/а/б.epf")
		.ДобавитьТест("ПолучитьНеобработанныеФайлыОшибкаСервиса404")
		.ДобавитьТест("ПолучитьДанныеЗаполнения")
		.ДобавитьТест("ПолучитьДанныеЗаполненияВыбрасываетИсключениеПриПередачеНеверногоФорматаДанных")
		.ДобавитьТест("ПолучитьДанныеЗаполненияПриОтсутствииДанныхВФорматеJSONВозвращаетМинимальныйНаборДанных")
			.СПараметрами("{}")
			.СПараметрами("{
							|""project"": {
							|	}
							|}")
			.СПараметрами("{
							|""project"": {
							|	""id"": 1
							|	}
							|}")
			.СПараметрами("{
							|""project"": {
							|	""web_url"": ""http://...""
							|	}
							|}")
		.ДобавитьТест("ПолучитьДанныеЗаполненияВозвращаетОбработанныйАдресСервера")
		.ДобавитьТест("ПолучитьДанныеЗаполненияВозвращаетДатуСобытияПоДатеСоответствующегоКоммита")
		.ДобавитьТест("ПолучитьДанныеЗаполненияВозвращаетСообщениеСобытия")
			.СПараметрами(ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256))
		.ДобавитьТест("ПолучитьДанныеЗаполненияВозвращаетПустоеСообщениеСобытия")
			.СПараметрами("{
							|""checkout_sha"": ""123456789"",
							|""message"": null
							|}")
			.СПараметрами("{
							|""checkout_sha"": ""123456789"",
							|""message"": null,
							|""commits"": [
							|		{
							|			""id"": ""000000000"",
							|			""title"": ""commit message""
							|		}
							|	]
							|}")
			.СПараметрами("{
							|""checkout_sha"": ""123456789"",
							|""message"": null,
							|""commits"": [
							|		{
							|			""id"": ""123456789"",
							|			""title"": null
							|		}
							|	]
							|}")
		.ДобавитьТест("ПолучитьДанныеЗаполненияВозвращаетСообщениеСобытияПоЗаголовкуСоответствующегоКоммита")
		.ДобавитьТестовыйНабор("ОбработатьЗапросСобытия")
			.ВТранзакции()
				.ДобавитьТест("ОбработатьЗапросСобытияВозвращает200")
				.ДобавитьТест("ОбработатьЗапросСобытияВозвращаетОшибку400ПриОтсутствииТокена")
				.ДобавитьТест("ОбработатьЗапросСобытияВозвращаетОшибку400ПриОтсутствииСобытия")
				.ДобавитьТест("ОбработатьЗапросСобытияВозвращаетОшибку400ПриНеопределенномМетодеСобытия")
				.ДобавитьТест("ОбработатьЗапросСобытияВозвращаетОшибку400ПриНеверномЗначенииСобытия")
				.ДобавитьТест("ОбработатьЗапросСобытияВозвращаетОшибку401ПриНесовпаденииТокенов")
				.ДобавитьТест("ОбработатьЗапросСобытияВозвращаетОшибку404ПриОстутствииОбработчикаСАдресомПроекта")
				.ДобавитьТест("ОбработатьЗапросСобытияВозвращаетОшибку423ПриОтключенномСервисе")
				.ДобавитьТест("ОбработатьЗапросСобытияВозвращаетОшибку500ПриОшибкеФорматаJSON")
				.ДобавитьТест("ОбработатьЗапросСобытияВозвращаетОшибку500ПриОшибкеЗаполненияОбязательныхПолейВJSON")
	;
	
КонецПроцедуры

Процедура ПолучитьПараметрыСоединения() Экспорт

	// given
	Соединение = ПолучитьФейковоеСоединение();
	Константы.ТокенГитлаб.Установить(Соединение.Токен);
	Константы.ТаймаутГитлаб.Установить(Соединение.Timeout);
	
	// when
	Результат = Гитлаб.ПолучитьПараметрыСоединения(Соединение.URL);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ФиксированнаяСтруктура")
		.ИмеетДлину(3)
		.Свойство("URL")
			.ИмеетТип("Строка")
			.Равно(Соединение.URL)
		.Свойство("Токен")
			.ИмеетТип("Строка")
			.Равно(Соединение.Токен)
		.Свойство("Timeout")
			.ИмеетТип("Число")
			.Равно(Соединение.Timeout)
	
КонецПроцедуры

Процедура ПолучитьПутьКНеобработанномуФайлу() Экспорт
	
	// given
	Ожидание = "/api/v4/projects/1/repository/files/%D0%B0%2F%D0%B1%2F%D0%B2.epf/raw?ref=0123456789";
	
	// when
	Результат = Гитлаб.ПолучитьПутьКНеобработанномуФайлу("а/б/в.epf", "1", "0123456789");
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Ожидание);
		
КонецПроцедуры

Процедура ПолучитьНеобработанныеФайлы(Знач Путь, Знач ИмяФайла, Знач Тело) Экспорт
	
	// given
	ПутиКФайлам = Новый Массив();
	ПутиКФайлам.Добавить(Путь);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Gitlab-File-Name", ИмяФайла);
	
	Ответ = Новый Структура("КодСостояния, Заголовки, Тело", 200, Заголовки, Тело);
	
	ОМ_Тесты.Мокито().Обучение(КоннекторHTTP)
		.Когда("Get")
			.Вернуть(Ответ);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = Гитлаб.ПолучитьНеобработанныеФайлы(ПолучитьФейковоеСоединение(), ПутиКФайлам);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(1)
		.Свойство("[0].ErrorInfo").ЭтоНеопределено()
		.Свойство("[0].FileName").Равно(ИмяФайла)
		.Свойство("[0].RAWFilePath").Равно(Путь)
		.Свойство("[0].BinaryData").Равно(Тело);
	
КонецПроцедуры

Процедура ПолучитьНеобработанныеФайлыПутиКФайламНеЗаполнены() Экспорт
	
	// given
	
	// when
	Результат = Гитлаб.ПолучитьНеобработанныеФайлы(ПолучитьФейковоеСоединение(), Новый Массив());
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.НеЗаполнено();
	
КонецПроцедуры

Процедура ПолучитьНеобработанныеФайлыПутиКФайламСодержатПустойПуть() Экспорт
	
	// given
	ПутиКФайлам = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве("");
	
	Запись = ОМ_Тесты.ЮТест().Предикат()
		.Свойство("BinaryData").Пусто()
		.Свойство("FileName").Пусто()
		.Свойство("RAWFilePath").Пусто()
		.Свойство("ErrorInfo.Описание")
			.СодержитСтрокуПоШаблону(Логи.Сообщения().NO_RAWPATH);
	
	// when
	Результат = Гитлаб.ПолучитьНеобработанныеФайлы(ПолучитьФейковоеСоединение(), ПутиКФайлам);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(1)
		.Содержит(Запись);
	
КонецПроцедуры

Процедура ПолучитьНеобработанныеФайлыСервисОтсутствует(Знач Параметр) Экспорт
	
	// given
	ПутиКФайлам = Новый Массив();
	ПутиКФайлам.Добавить(Параметр);
	
	Запись = ОМ_Тесты.ЮТест().Предикат()
		.Свойство("BinaryData").Пусто()
		.Свойство("FileName").Пусто()
		.Свойство("RAWFilePath").Заполнено()
		.Свойство("ErrorInfo.Описание")
		.СодержитСтрокуПоШаблону("Couldn't resolve host name");
	
	// when
	Результат = Гитлаб.ПолучитьНеобработанныеФайлы(ПолучитьФейковоеСоединение(), ПутиКФайлам);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(1)
		.Содержит(Запись);
	
КонецПроцедуры

Процедура ПолучитьНеобработанныеФайлыОшибкаСервиса404() Экспорт
	
	// given
	ПутиКФайлам = Новый Массив();
	ПутиКФайлам.Добавить("/а");
	ПутиКФайлам.Добавить("/а/б.epf");
	
	Ответ = Новый Структура("КодСостояния", 404);
	
	ОМ_Тесты.Мокито().Обучение(КоннекторHTTP)
		.Когда("Get")
			.Вернуть(Ответ)
			.Вернуть(Ответ);
	ОМ_Тесты.Мокито().Прогон();
	
	Ошибка = ОМ_Тесты.ЮТест().Предикат()
		.Свойство("BinaryData").Пусто()
		.Свойство("FileName").Пусто()
		.Свойство("RAWFilePath").Заполнено()
		.Свойство("ErrorInfo.Описание")
		.СодержитСтрокуПоШаблону(КодыСостоянияHTTPКлиентСерверПовтИсп.НайтиИдентификаторПоКоду(404));
	
	// when
	Результат = Гитлаб.ПолучитьНеобработанныеФайлы(ПолучитьФейковоеСоединение(), ПутиКФайлам);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(2)
		.КаждыйЭлементСоответствуетПредикату(Ошибка);
	
КонецПроцедуры

Процедура ПолучитьДанныеЗаполнения() Экспорт
	
	// given
	Тело = "{
		|""checkout_sha"": ""123456789"",
		|""project"": {
		|	""id"": 1,
		|	""web_url"": ""http://example.com/path/""
		|	},
		|""commits"": [
		|		{
		|			""id"": ""1b11"",
		|			""timestamp"": ""2020-07-21T09:23:30+00:00"",
		|			""modified"": [
		|				""1.epf"",
		|				""2.erf"",
		|				""3""
		|			]
		|		},
		|		{
		|			""id"": ""2b22"",
		|			""timestamp"": ""2020-07-21T09:25:30+00:00""
		|		}
		|	]
		|}";
	
	// when
	Результат = Гитлаб.ПолучитьДанныеЗаполнения(Тело);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Type").Равно(Перечисления.ИсточникЗапроса.Гитлаб)
		.Свойство("ProjectId").Заполнено()
		.Свойство("АдресПроекта").Равно("http://example.com/path/")
		.Свойство("ServerURL").Равно("http://example.com")
		.Свойство("Дата")
			.ИмеетТип(Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)))
			.НеЗаполнено()
		.Свойство("Идентификатор").Равно("123456789")
		.Свойство("Коммиты")
			.ИмеетТип("Массив")
			.ИмеетДлину(2)
		.Свойство("Коммиты[0]").ИмеетТип("Структура")
		.Свойство("Коммиты[0].Идентификатор").Равно("1b11")
		.Свойство("Коммиты[0].Дата")
			.ИмеетТип("Дата")
			.Равно(Дата(2020, 07, 21, 09, 23, 30))
		.Свойство("Коммиты[1].Идентификатор").НеРавно("1b11")
		.Свойство("ModifiedFiles")
			.ИмеетТип("Массив")
			.ИмеетДлину(2)
		.Свойство("ModifiedFiles[0]").ИмеетТип("Структура")
		.Свойство("ModifiedFiles[0].Идентификатор").Равно("1b11")
		.Свойство("ModifiedFiles[0].FilePath").Равно("1.epf")
		.Свойство("ModifiedFiles[1].Идентификатор").Равно("1b11")
		.Свойство("ModifiedFiles[1].FilePath").Равно("2.erf");
	
КонецПроцедуры

Процедура ПолучитьДанныеЗаполненияВыбрасываетИсключениеПриПередачеНеверногоФорматаДанных() Экспорт
	
	// given
	Параметры = Новый Массив();
	Параметры.Добавить("");
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Гитлаб)
		.Метод("ПолучитьДанныеЗаполнения", Параметры)
		.ВыбрасываетИсключение("JSON");

КонецПроцедуры

Процедура ПолучитьДанныеЗаполненияПриОтсутствииДанныхВФорматеJSONВозвращаетМинимальныйНаборДанных(Знач Параметр) Экспорт
	
	// given
	
	// when
	Результат = Гитлаб.ПолучитьДанныеЗаполнения(Параметр);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Type").Равно(Перечисления.ИсточникЗапроса.Гитлаб)
		.Свойство("ProjectId").НеЗаполнено()
		.Свойство("АдресПроекта").НеЗаполнено()
		.Свойство("ServerURL").НеЗаполнено()
		.Свойство("Идентификатор").НеЗаполнено()
		.Свойство("Коммиты").НеЗаполнено()
		.Свойство("ModifiedFiles").НеЗаполнено();
	
КонецПроцедуры

Процедура ПолучитьДанныеЗаполненияВозвращаетОбработанныйАдресСервера() Экспорт
	
	// given
	Тело = "{
		|""checkout_sha"": ""123456789"",
		|""project"": {
		|	""id"": 1,
		|	""web_url"": ""http://example.com/path/""
		|	},
		|""commits"": {}
		|}";
	
	// when
	Результат = Гитлаб.ПолучитьДанныеЗаполнения(Тело);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Type").Равно(Перечисления.ИсточникЗапроса.Гитлаб)
		.Свойство("ProjectId").Заполнено()
		.Свойство("АдресПроекта").Равно("http://example.com/path/")
		.Свойство("ServerURL").Равно("http://example.com");
	
КонецПроцедуры

Процедура ПолучитьДанныеЗаполненияВозвращаетДатуСобытияПоДатеСоответствующегоКоммита() Экспорт
	
	// given
	Тело = "{
		|""checkout_sha"": ""123456789"",
		|""message"": null,
		|""commits"": [
		|		{
		|			""id"": ""000000000"",
		|			""timestamp"": ""2020-07-21T09:23:30+00:00""
		|		},
		|		{
		|			""id"": ""123456789"",
		|			""timestamp"": ""2020-07-25T09:13:33+00:00""
		|		}
		|	]
		|}";
	
	// when
	Результат = Гитлаб.ПолучитьДанныеЗаполнения(Тело);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Type").Равно(Перечисления.ИсточникЗапроса.Гитлаб)
		.Свойство("Дата")
			.ИмеетТип("Дата")
			.Равно(Дата(2020, 07, 25, 09, 13, 33));
	
КонецПроцедуры

Процедура ПолучитьДанныеЗаполненияВозвращаетСообщениеСобытия(Знач Сообщение) Экспорт
	
	// given
	Тело = "{
		|""message"": """ + Сообщение + """
		|}";
	
	// when
	Результат = Гитлаб.ПолучитьДанныеЗаполнения(Тело);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Type").Равно(Перечисления.ИсточникЗапроса.Гитлаб)
		.Свойство("Сообщение").Равно(Сообщение);
	
КонецПроцедуры

Процедура ПолучитьДанныеЗаполненияВозвращаетПустоеСообщениеСобытия(Знач Параметр) Экспорт
	
	// given
	
	// when
	Результат = Гитлаб.ПолучитьДанныеЗаполнения(Параметр);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Type").Равно(Перечисления.ИсточникЗапроса.Гитлаб)
		.Свойство("Сообщение")
			.ИмеетТип("Строка")
			.НеЗаполнено();
	
КонецПроцедуры

Процедура ПолучитьДанныеЗаполненияВозвращаетСообщениеСобытияПоЗаголовкуСоответствующегоКоммита() Экспорт
	
	// given
	Тело = "{
		|""checkout_sha"": ""123456789"",
		|""message"": null,
		|""commits"": [
		|		{
		|			""id"": ""000000000"",
		|			""title"": null
		|		},
		|		{
		|			""id"": ""123456789"",
		|			""title"": ""commit message""
		|		}
		|	]
		|}";
	
	// when
	Результат = Гитлаб.ПолучитьДанныеЗаполнения(Тело);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Type").Равно(Перечисления.ИсточникЗапроса.Гитлаб)
		.Свойство("Сообщение")
			.ИмеетТип("Строка")
			.Равно("commit message");
	
КонецПроцедуры

Процедура ОбработатьЗапросСобытияВозвращает200() Экспорт
	
	// given
	Тест = Заглушка();
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.АдресПроекта = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Истина);
	
	Токен = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Конструктор = ОМ_Тесты.ЮТест().Данные().КонструкторОбъекта(Справочники.ОбработчикиВнешнихЗапросов);
	Конструктор
		.ФикцияОбязательныхПолей()
		.Установить("АдресПроекта", ВнешнийЗапрос.АдресПроекта)
		.Установить("Токен", Токен)
		.Записать( , Истина);
	
	ОМ_Тесты.Мокито().Обучение(ВнешниеЗапросы)
		.Когда("Создать").Вернуть(ВнешнийЗапрос);
	ОМ_Тесты.Мокито().Обучение(ОбработкаДанных)
		.Когда("ОбработатьЗапрос").Пропустить();
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = Гитлаб.ОбработатьЗапросСобытия(ПолучитьФейковыйСервисЗапрос(Токен));
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(200);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НеЗаполнено();
	
КонецПроцедуры

Процедура ОбработатьЗапросСобытияВозвращаетОшибку400ПриОтсутствииТокена() Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Истина);
	
	СервисЗапрос = ОМ_Тесты.ЮТест().Данные().HTTPСервисЗапрос();
	СервисЗапрос.ДобавитьЗаголовок("Content-Type", "application/json");
	СервисЗапрос.ДобавитьЗаголовок("X-Gitlab-Event", "Push Hook");
	
	// when
	Результат = Гитлаб.ОбработатьЗапросСобытия(СервисЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(400);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НачинаетсяС("{")
		.Содержит("""message"":")
		.Содержит(Логи.Сообщения().NO_TOKEN)
		.ЗаканчиваетсяНа("}");
	
КонецПроцедуры

Процедура ОбработатьЗапросСобытияВозвращаетОшибку400ПриОтсутствииСобытия() Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Истина);
	
	СервисЗапрос = ОМ_Тесты.ЮТест().Данные().HTTPСервисЗапрос();
	СервисЗапрос.ДобавитьЗаголовок("Content-Type", "application/json");
	СервисЗапрос.ДобавитьЗаголовок("X-Gitlab-Token", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());

	// when
	Результат = Гитлаб.ОбработатьЗапросСобытия(СервисЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(400);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НачинаетсяС("{")
		.Содержит("""message"":")
		.Содержит(Логи.Сообщения().NO_EVENT)
		.ЗаканчиваетсяНа("}");
	
КонецПроцедуры

Процедура ОбработатьЗапросСобытияВозвращаетОшибку400ПриНеопределенномМетодеСобытия() Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Истина);
	
	СервисЗапрос = ОМ_Тесты.ЮТест().Данные().HTTPСервисЗапрос();
	СервисЗапрос.ДобавитьЗаголовок("Content-Type", "application/json");
	СервисЗапрос.ДобавитьЗаголовок("X-Gitlab-Event", "Push Hook");
	СервисЗапрос.ДобавитьЗаголовок("X-Gitlab-Token", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());

	// when
	Результат = Гитлаб.ОбработатьЗапросСобытия(СервисЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(400);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НачинаетсяС("{")
		.Содержит("""message"":")
		.Содержит(Логи.Сообщения().НеверноеСобытие)
		.ЗаканчиваетсяНа("}");
	
КонецПроцедуры

Процедура ОбработатьЗапросСобытияВозвращаетОшибку400ПриНеверномЗначенииСобытия() Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Истина);
	
	СервисЗапрос = ОМ_Тесты.ЮТест().Данные().HTTPСервисЗапрос();
	СервисЗапрос.ДобавитьЗаголовок("Content-Type", "application/json");
	СервисЗапрос.ДобавитьЗаголовок("X-Gitlab-Event", "Push Hook");
	СервисЗапрос.ДобавитьЗаголовок("X-Gitlab-Token", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	СервисЗапрос.ДобавитьПараметрURL("ИмяМетода", "pull");

	// when
	Результат = Гитлаб.ОбработатьЗапросСобытия(СервисЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(400);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НачинаетсяС("{")
		.Содержит("""message"":")
		.Содержит(Логи.Сообщения().НеверноеСобытие)
		.ЗаканчиваетсяНа("}");
	
КонецПроцедуры

Процедура ОбработатьЗапросСобытияВозвращаетОшибку401ПриНесовпаденииТокенов() Экспорт
	
	// given
	Тест = Заглушка();
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.АдресПроекта = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Истина);
	
	Конструктор = ОМ_Тесты.ЮТест().Данные().КонструкторОбъекта(Справочники.ОбработчикиВнешнихЗапросов);
	Конструктор
		.ФикцияОбязательныхПолей()
		.Установить("АдресПроекта", ВнешнийЗапрос.АдресПроекта)
		.Записать( , Истина);
	
	ОМ_Тесты.Мокито().Обучение(ВнешниеЗапросы)
		.Когда("Создать").Вернуть(ВнешнийЗапрос);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = Гитлаб.ОбработатьЗапросСобытия(ПолучитьФейковыйСервисЗапрос());
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(401);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НеЗаполнено();
	
КонецПроцедуры

Процедура ОбработатьЗапросСобытияВозвращаетОшибку404ПриОстутствииОбработчикаСАдресомПроекта() Экспорт
	
	// given
	Тест = Заглушка();
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.АдресПроекта = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Истина);
	
	Конструктор = ОМ_Тесты.ЮТест().Данные().КонструкторОбъекта(Справочники.ОбработчикиВнешнихЗапросов);
	Конструктор
		.ФикцияОбязательныхПолей()
		.Установить("АдресПроекта", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока())
		.Записать( , Истина);
	
	ОМ_Тесты.Мокито().Обучение(ВнешниеЗапросы)
		.Когда("Создать").Вернуть(ВнешнийЗапрос);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = Гитлаб.ОбработатьЗапросСобытия(ПолучитьФейковыйСервисЗапрос());
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(404);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НеЗаполнено();
	
КонецПроцедуры

Процедура ОбработатьЗапросСобытияВозвращаетОшибку423ПриОтключенномСервисе() Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Ложь);
	
	// when
	Результат = Гитлаб.ОбработатьЗапросСобытия(ПолучитьФейковыйСервисЗапрос());
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(423);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.Равно(Логи.Сообщения().GITLAB_DISABLED);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НеЗаполнено();
	
КонецПроцедуры

Процедура ОбработатьЗапросСобытияВозвращаетОшибку500ПриОшибкеФорматаJSON() Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Истина);
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Гитлаб)
		.Метод("ОбработатьЗапросСобытия", ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПолучитьФейковыйСервисЗапрос()))
		.ВыбрасываетИсключение("Недопустимое состояние потока записи JSON");
	
КонецПроцедуры

Процедура ОбработатьЗапросСобытияВозвращаетОшибку500ПриОшибкеЗаполненияОбязательныхПолейВJSON() Экспорт
	
	// given
	Тест = Заглушка();
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.Идентификатор = "";
	
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Истина);
	
	ОМ_Тесты.Мокито().Обучение(ВнешниеЗапросы)
		.Когда("Создать").Вернуть(ВнешнийЗапрос);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Гитлаб)
		.Метод("ОбработатьЗапросСобытия", ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПолучитьФейковыйСервисЗапрос()))
		.ВыбрасываетИсключение(Логи.Сообщения().BAD_JSON_DATA);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Заглушка()
	
	Результат = Новый Структура();
	Результат.Вставить("Схема", ОМ_ТестовыеДанные.ПолучитьТело(ОМ_Тесты.ЮТНастройкиВыполнения().КаталогПроекта() + "/test/requests/push-repo1-req1.json"));
	Результат.Вставить("ДесериализованнаяСхема", ОМ_ТестовыеДанные.JsonВОбъект(Результат.Схема));
	
	ВнешнийЗапрос = Новый Структура();
	ВнешнийЗапрос.Вставить("Type", Перечисления.ИсточникЗапроса.Гитлаб);
	ВнешнийЗапрос.Вставить("JSON", Результат.Схема);
	ВнешнийЗапрос.Вставить("ProjectId", Строка(Результат.ДесериализованнаяСхема.Получить("project").Получить("id")));
	ВнешнийЗапрос.Вставить("АдресПроекта", Результат.ДесериализованнаяСхема.Получить("project").Получить("web_url"));
	ВнешнийЗапрос.Вставить("ServerURL", "http://mockserver:1080");
	ВнешнийЗапрос.Вставить("Идентификатор", Результат.ДесериализованнаяСхема.Получить("checkout_sha"));

	Коммиты = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.НовыйКоммит(1, ИдентификаторКоммита(Результат, 0), ДатаВремяКоммита(Результат, 0), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)),
		ОМ_ТестовыеДанные.НовыйКоммит(2, ИдентификаторКоммита(Результат, 1), ДатаВремяКоммита(Результат, 1), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)),
		ОМ_ТестовыеДанные.НовыйКоммит(3, ИдентификаторКоммита(Результат, 2), ДатаВремяКоммита(Результат, 2), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)));
	ВнешнийЗапрос.Вставить("Коммиты", Коммиты);
	
	МодифицированныеФайлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		НовыйИзмененныйФайл(1, Результат.ДесериализованнаяСхема.Получить("commits")[0], 3),
		НовыйИзмененныйФайл(2, Результат.ДесериализованнаяСхема.Получить("commits")[1], 3),
		НовыйИзмененныйФайл(3, Результат.ДесериализованнаяСхема.Получить("commits")[2], 2));
	ВнешнийЗапрос.Вставить("ModifiedFiles", МодифицированныеФайлы);
	
	СхемыМаршрутов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.СхемаМаршрутов(1, ИдентификаторКоммита(Результат, 0), ПолучитьФейковыйJSON(), Ложь),
		ОМ_ТестовыеДанные.СхемаМаршрутов(2, ИдентификаторКоммита(Результат, 0), ПолучитьФейковыйJSON(), Истина),
		ОМ_ТестовыеДанные.СхемаМаршрутов(3, ИдентификаторКоммита(Результат, 1), ПолучитьФейковыйJSON(), Истина));
	ВнешнийЗапрос.Вставить("СхемыМаршрутов", СхемыМаршрутов);
	
	Результат.Вставить("ВнешнийЗапрос", ВнешнийЗапрос);
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(Запись, ВнешнийЗапрос, НазначениеТипаXML.Явное);
	
	Результат.Вставить("СериализованныйВнешнийЗапрос", Запись.Закрыть());
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФейковыйJSON()

	Возврат ОМ_ТестовыеДанные.ПолучитьФейковыйJSON();

КонецФункции

Функция НовыйИзмененныйФайл(Знач НомерСтроки, Знач Коммит, Знач Позиция)
	
	Возврат ОМ_ТестовыеДанные.НовыйИзмененныйФайл(НомерСтроки, Коммит, Позиция);
	
КонецФункции

Функция ИдентификаторКоммита(Знач Тест, Знач Позиция)
	
	Возврат ОМ_ТестовыеДанные.ИдентификаторКоммита(Тест, Позиция);
	
КонецФункции

Функция ДатаВремяКоммита(Знач Тест, Знач Позиция)

	Возврат ОМ_ТестовыеДанные.ДатаВремяКоммита(Тест, Позиция);
	
КонецФункции

Функция ПолучитьФейковоеСоединение()
	
	Возврат ОМ_ТестовыеДанные.ФейковоеСоединение();

КонецФункции

Функция ПолучитьФейковыйСервисЗапрос(Токен = Неопределено)
	
	Результат = ОМ_Тесты.ЮТест().Данные().HTTPСервисЗапрос();
	Результат.ДобавитьЗаголовок("Content-Type", "application/json");
	Результат.ДобавитьЗаголовок("X-Gitlab-Event", "Push Hook");
	Если Токен = Неопределено Тогда
		Результат.ДобавитьЗаголовок("X-Gitlab-Token", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	Иначе
		Результат.ДобавитьЗаголовок("X-Gitlab-Token", Токен);
	КонецЕсли;
	Результат.ДобавитьПараметрURL("ИмяМетода", "push");
	Результат.УстановитьТелоКакСтроку("");
	
	Возврат Результат
	
КонецФункции

#КонецОбласти
