#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("ДанныеЗаполнения")
		.ДобавитьТест("Создать")
		.ДобавитьТест("СоздатьВыбрасываетИсключениеПриНеверномТипеПараметра")
		.ДобавитьТест("СоздатьИзСериализованныхДанных")
		.ДобавитьТест("СоздатьИзСериализованныхДанныхВыбрасываетИсключениеПриНеверномТипеДанныхПослеДесериализации")
		.ДобавитьТест("ПараметрыСоединения")
		.ДобавитьТест("ПолучитьПараметрыХранилища")
			.ВТранзакции()
		.ДобавитьТест("ПолучитьПараметрыХранилищаВозвращаетНезаполненноеОписаниеПриОтсутствииИсточникаЗапроса")
		.ДобавитьТест("Сохранить")
		.ДобавитьТест("Восстановить")
			.ВТранзакции()
		.ДобавитьТест("ВосстановитьВозвращаетНеопределеноПриОтсутствииДанных")
		.ДобавитьТест("ОпределитьФайлыКЗагрузкеПриОтсутствииИмениФайлаСхемыВозвращаетПустуюКоллекцию")
		.ДобавитьТест("ОпределитьФайлыКЗагрузкеПриОтсутствииИзмененныхФайловВозвращаетТолькоСхемыМаршрутов")
		.ДобавитьТест("ОпределитьФайлыКЗагрузкеПриНаличииИзмененныхФайловВозвращаетИзмененныеФайлыИСхемыМаршрутов")
		.ДобавитьТест("ОпределитьФайлыКЗагрузкеПриИзмененииФайлаВРазныхКоммитахВозвращаетПоследнийПоДатеФайл")
		.ДобавитьТест("ОписаниеПользовательскойСхемыМаршрутов")
		.ДобавитьТест("ЗаменитьПользовательскиеСхемы")
		.ДобавитьТест("ЗаменитьПользовательскиеСхемыСПустымНаборомУдаляетВсеПользовательскиеСхемы")
		.ДобавитьТест("ПолучитьИсходнуюСхемуМаршрутов")
		.ДобавитьТест("ПолучитьИсходнуюСхемуМаршрутовЕслиСхемаНеНайденаДолженВернутьПустуюСтроку")
		.ДобавитьТест("ПолучитьСводныеСхемыМаршрутов")
	;
	
КонецПроцедуры

Процедура ДанныеЗаполнения() Экспорт
	
	// given
	
	// when
	Результат = ВнешниеЗапросы.ДанныеЗаполнения();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Type").ИмеетТип(Тип("ПеречислениеСсылка.ИсточникЗапроса")).НеЗаполнено()
		.Свойство("JSON").ИмеетТип("Строка").НеЗаполнено()
		.Свойство("ProjectId").ИмеетТип("Строка").НеЗаполнено()
		.Свойство("АдресПроекта").ИмеетТип("Строка").НеЗаполнено()
		.Свойство("ServerURL").ИмеетТип("Строка").НеЗаполнено()
		.Свойство("Дата")
			.ИмеетТип(Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)))
			.НеЗаполнено()
		.Свойство("Идентификатор").ИмеетТип("Строка").НеЗаполнено()
		.Свойство("Сообщение").ИмеетТип("Строка").НеЗаполнено()
		.Свойство("Коммиты").ИмеетТип("Массив").НеЗаполнено()
		.Свойство("ModifiedFiles").ИмеетТип("Массив").НеЗаполнено()
		.Свойство("СхемыМаршрутов").ИмеетТип("Массив").НеЗаполнено();
	
КонецПроцедуры

Процедура Создать() Экспорт
	
	// given
	Тест = Заглушка();
	
	// when
	Результат = ВнешниеЗапросы.Создать(Тест.Схема);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("ОбработкаОбъект.ВнешнийЗапрос"))
		.Свойство("Type").Равно(Тест.ВнешнийЗапрос.Type)
		.Свойство("JSON").Равно(Тест.ВнешнийЗапрос.JSON)
		.Свойство("ProjectId").Равно(Тест.ВнешнийЗапрос.ProjectId)
		.Свойство("АдресПроекта").Равно(Тест.ВнешнийЗапрос.АдресПроекта)
		.Свойство("ServerURL").Равно(Тест.ВнешнийЗапрос.ServerURL)
		.Свойство("Дата").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Дата)
		.Свойство("Идентификатор").Равно(Тест.ВнешнийЗапрос.Идентификатор)
		.Свойство("Коммиты").ИмеетДлину(Тест.ВнешнийЗапрос.Коммиты.Количество())
			.Свойство("Коммиты[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
			.Свойство("Коммиты[0].Дата").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Дата)
			.Свойство("Коммиты[0].Идентификатор").НеРавно(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор)
		.Свойство("ModifiedFiles").ИмеетДлину(Тест.ВнешнийЗапрос.ModifiedFiles.Количество())
			.Свойство("ModifiedFiles[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[0].Идентификатор)
			.Свойство("ModifiedFiles[0].FilePath").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[0].FilePath)
			.Свойство("ModifiedFiles[0].Идентификатор").НеРавно(Тест.ВнешнийЗапрос.ModifiedFiles[1].Идентификатор)
		.Свойство("СхемыМаршрутов").НеЗаполнено();
	
КонецПроцедуры

Процедура СоздатьВыбрасываетИсключениеПриНеверномТипеПараметра() Экспорт
	
	// given
	Параметры = Новый Массив();
	Параметры.Добавить(123);
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешниеЗапросы)
		.Метод("Создать", Параметры)
		.ВыбрасываетИсключение(Логи.Сообщения().INVALID_DATA_TYPE);
	
КонецПроцедуры

Процедура СоздатьИзСериализованныхДанных() Экспорт
	
	// given
	Тест = Заглушка();
	
	// when
	Результат = ВнешниеЗапросы.СоздатьИзСериализованныхДанных(Тест.СериализованныйВнешнийЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Свойство("Type").Равно(Тест.ВнешнийЗапрос.Type)
		.Свойство("JSON").Равно(Тест.ВнешнийЗапрос.JSON)
		.Свойство("ProjectId").Равно(Тест.ВнешнийЗапрос.ProjectId)
		.Свойство("АдресПроекта").Равно(Тест.ВнешнийЗапрос.АдресПроекта)
		.Свойство("ServerURL").Равно(Тест.ВнешнийЗапрос.ServerURL)
		.Свойство("Идентификатор").Равно(Тест.ВнешнийЗапрос.Идентификатор)
		.Свойство("Коммиты").ИмеетДлину(Тест.ВнешнийЗапрос.Коммиты.Количество())
			.Свойство("Коммиты[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
			.Свойство("Коммиты[0].Дата").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Дата)
			.Свойство("Коммиты[0].Идентификатор").НеРавно(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор)
		.Свойство("ModifiedFiles").ИмеетДлину(Тест.ВнешнийЗапрос.ModifiedFiles.Количество())
			.Свойство("ModifiedFiles[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[0].Идентификатор)
			.Свойство("ModifiedFiles[0].FilePath").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[0].FilePath)
			.Свойство("ModifiedFiles[0].Идентификатор").НеРавно(Тест.ВнешнийЗапрос.ModifiedFiles[1].Идентификатор)
		.Свойство("СхемыМаршрутов").ИмеетДлину(Тест.ВнешнийЗапрос.СхемыМаршрутов.Количество())
			.Свойство("СхемыМаршрутов[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Идентификатор)
			.Свойство("СхемыМаршрутов[0].Пользовательская").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Пользовательская)
			.Свойство("СхемыМаршрутов[0].Представление").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Представление)
			.Свойство("СхемыМаршрутов[0].Идентификатор").НеРавно(Тест.ВнешнийЗапрос.СхемыМаршрутов[2].Идентификатор);
	
КонецПроцедуры

Процедура СоздатьИзСериализованныхДанныхВыбрасываетИсключениеПриНеверномТипеДанныхПослеДесериализации() Экспорт
	
	// given
	//TODO везде заменить на ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
	Параметры = Новый Массив();
	Параметры.Добавить("{}");
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешниеЗапросы)
		.Метод("СоздатьИзСериализованныхДанных", Параметры)
		.ВыбрасываетИсключение(Логи.Сообщения().INVALID_DATA_TYPE);
	
КонецПроцедуры

Процедура ПараметрыСоединения() Экспорт
	
	// given

	// when
	Результат = ВнешниеЗапросы.ПараметрыСоединения();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.ИмеетДлину(3)
		.Свойство("URL")
			.ИмеетТип("Строка")
			.НеЗаполнено()
		.Свойство("Токен")
			.ИмеетТип("Строка")
			.НеЗаполнено()
		.Свойство("Timeout")
			.ИмеетТип("Число")
			.НеЗаполнено();

КонецПроцедуры

Процедура ПолучитьПараметрыХранилища() Экспорт // Гитлаб
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	Соединение = ОМ_ТестовыеДанные.ФейковоеСоединение();
	Константы.ТокенГитлаб.Установить(Соединение.Токен);
	Константы.ТаймаутГитлаб.Установить(Соединение.Timeout);

	// when
	Результат = ВнешниеЗапросы.ПолучитьПараметрыХранилища(ВнешнийЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ФиксированнаяСтруктура")
		.Свойство("Сервис").Равно(Перечисления.ИсточникЗапроса.Гитлаб)
		.Свойство("Проект")
			.ИмеетТип("Строка")
			.Равно(Тест.ВнешнийЗапрос.ProjectId)
		.Свойство("ПараметрыСоединения")
			.ИмеетТип("ФиксированнаяСтруктура")
		.Свойство("ПараметрыСоединения.URL")
			.ИмеетТип("Строка")
			.Равно(Тест.ВнешнийЗапрос.ServerURL)
		.Свойство("ПараметрыСоединения.Токен")
			.ИмеетТип("Строка")
			.Равно(Соединение.Токен)
		.Свойство("ПараметрыСоединения.Timeout")
			.ИмеетТип("Число")
			.Равно(Соединение.Timeout);

КонецПроцедуры

Процедура ПолучитьПараметрыХранилищаВозвращаетНезаполненноеОписаниеПриОтсутствииИсточникаЗапроса() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.Type = Перечисления.ИсточникЗапроса.ПустаяСсылка();

	// when
	Результат = ВнешниеЗапросы.ПолучитьПараметрыХранилища(ВнешнийЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ФиксированнаяСтруктура")
		.Свойство("Сервис").НеЗаполнено()
		.Свойство("Проект")
			.ИмеетТип("Строка")
			.НеЗаполнено()
		.Свойство("ПараметрыСоединения")
			.ИмеетТип("ФиксированнаяСтруктура")
		.Свойство("ПараметрыСоединения.URL")
			.ИмеетТип("Строка")
			.НеЗаполнено()
		.Свойство("ПараметрыСоединения.Токен")
			.ИмеетТип("Строка")
			.НеЗаполнено()
		.Свойство("ПараметрыСоединения.Timeout")
			.ИмеетТип("Число")
			.НеЗаполнено();

КонецПроцедуры

Процедура Сохранить() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ФэйковыйОбработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеЗапросы)
		.Когда("ЗаписатьДанные").Пропустить();
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	ВнешниеЗапросы.Сохранить(ФэйковыйОбработчик, Тест.ВнешнийЗапрос.Идентификатор, ВнешнийЗапрос);
	
	Результат = ОМ_Тесты.Мокито()
		.Проверить(РегистрыСведений.ВнешниеЗапросы)
			.Вызовы("ЗаписатьДанные");
	
	// then
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат[0].Параметры[0])
			.Равно(ФэйковыйОбработчик);
	
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат[0].Параметры[1])
			.Равно(Тест.ВнешнийЗапрос.Идентификатор);
			
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат[0].Параметры[2])
			.ИмеетТип("Строка")
			.Содержит("#type");

	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат[0].Параметры[3])
			.Равно(Тест.ВнешнийЗапрос.Сообщение);
			
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат[0].Параметры[4])
			.Равно(Тест.ВнешнийЗапрос.Дата);
	
КонецПроцедуры

Процедура Восстановить() Экспорт
	
	// given
	Тест = Заглушка();
	
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	ОМ_Тесты.Мокито()
		.Обучение(РегистрыСведений.ВнешниеЗапросы)
			.Когда("НайтиДанные").Вернуть(Тест.СериализованныйВнешнийЗапрос);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = ВнешниеЗапросы.Восстановить(ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(), Идентификатор);
	
	// then
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат)
			.ИмеетТип(Тип("ОбработкаОбъект.ВнешнийЗапрос"));
	
КонецПроцедуры

Процедура ВосстановитьВозвращаетНеопределеноПриОтсутствииДанных() Экспорт
	
	// given
	
	// when
	Результат = ВнешниеЗапросы.Восстановить(Неопределено, Неопределено);
	
	// then
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат)
			.ЭтоНеопределено();
	
КонецПроцедуры

Процедура ОпределитьФайлыКЗагрузкеПриОтсутствииИмениФайлаСхемыВозвращаетПустуюКоллекцию() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешниеЗапросы.ОпределитьФайлыКЗагрузке(ВнешнийЗапрос, "");
	
	// then
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.НеЗаполнено();
		
КонецПроцедуры

Процедура ОпределитьФайлыКЗагрузкеПриОтсутствииИзмененныхФайловВозвращаетТолькоСхемыМаршрутов() Экспорт
	
	// given
	Тест = Заглушка();
	Тест.ВнешнийЗапрос.ModifiedFiles.Очистить();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	ФайлСхемы = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов();
	
	// when
	Результат = ВнешниеЗапросы.ОпределитьФайлыКЗагрузке(ВнешнийЗапрос, ФайлСхемы.FileName);
	
	// then
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(3);
		
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 0, "");
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 1, "");
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 2, "");
	
КонецПроцедуры

Процедура ОпределитьФайлыКЗагрузкеПриНаличииИзмененныхФайловВозвращаетИзмененныеФайлыИСхемыМаршрутов() Экспорт
	
	// given
	Тест = Заглушка();

	Файл1 = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Файл2 = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Тест.ВнешнийЗапрос.ModifiedFiles = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		НовыйИзмененныйФайлПереопределяемый(1, Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, Файл1.FilePath),
		НовыйИзмененныйФайлПереопределяемый(2, Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор, Файл2.FilePath)
		);
		
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	ФайлСхемы = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов();
	
	// when
	Результат = ВнешниеЗапросы.ОпределитьФайлыКЗагрузке(ВнешнийЗапрос, ФайлСхемы.FileName);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(5);
		
	СодержитЭлемент(Результат, Тест, Файл1, 0, "modified");
	СодержитЭлемент(Результат, Тест, Файл2, 1, "modified");
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 0, "");
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 1, "");
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 2, "");

КонецПроцедуры

Процедура ОпределитьФайлыКЗагрузкеПриИзмененииФайлаВРазныхКоммитахВозвращаетПоследнийПоДатеФайл() Экспорт
	
	// given
	Тест = Заглушка();

	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Тест.ВнешнийЗапрос.Коммиты[0].Дата = Тест.ВнешнийЗапрос.Коммиты[1].Дата - 1; // Изменим порядок дат (проверка сортировки)
	
	Тест.ВнешнийЗапрос.ModifiedFiles = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		НовыйИзмененныйФайлПереопределяемый(1, Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, Файл.FilePath),
		НовыйИзмененныйФайлПереопределяемый(2, Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор, Файл.FilePath)
		);
		
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	ФайлСхемы = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов();
	
	// when
	Результат =  ВнешниеЗапросы.ОпределитьФайлыКЗагрузке(ВнешнийЗапрос, ФайлСхемы.FileName);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Свойство("[3].Date")
			.Заполнено()
			.Равно(Тест.ВнешнийЗапрос.Коммиты[1].Дата)
		
КонецПроцедуры

Процедура ОписаниеПользовательскойСхемыМаршрутов() Экспорт
	
	// given
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Схема = ОМ_ТестовыеДанные.ПолучитьФейковыйJSON();
	
	// when
	Результат = ВнешниеЗапросы.ОписаниеПользовательскойСхемыМаршрутов(Идентификатор, Схема);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.ИмеетДлину(2)
		.Свойство("Идентификатор")
			.Равно(Идентификатор)
		.Свойство("Представление")
			.Равно(Схема);
	
КонецПроцедуры

Процедура ЗаменитьПользовательскиеСхемы() Экспорт
	
	// given
	Тест = Заглушка();
	
	ОписанияСхем = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		Новый Структура("Идентификатор, Представление", "commit_A                                ", "{""json"":""новая схема A""}"),
		Новый Структура("Идентификатор, Представление", "commit_B                                ", "{""json"":""новая схема B""}")
	);
	
	// when
	Результат = ВнешниеЗапросы.ЗаменитьПользовательскиеСхемы(Тест.СериализованныйВнешнийЗапрос, ОписанияСхем);
	Результат = ОМ_ТестовыеДанные.Десериализовать(Результат);
	
	// then
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат.СхемыМаршрутов)
		.ИмеетТип("Массив")
		.ИмеетДлину(3);
		
	// Проверяем, что осталась старая не-пользовательская схема
	ОригинальнаяСхема = Тест.ВнешнийЗапрос.СхемыМаршрутов[0];
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат.СхемыМаршрутов)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("Идентификатор").Равно(ОригинальнаяСхема.Идентификатор)
				.Свойство("Представление").Равно(ОригинальнаяСхема.Представление)
				.Свойство("Пользовательская").Равно(Ложь)
				.Получить()
		);
		
	// Проверяем, что добавилась новая схема А
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат.СхемыМаршрутов)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("Идентификатор").Равно(ОписанияСхем[0].Идентификатор)
				.Свойство("Представление").Равно(ОписанияСхем[0].Представление)
				.Свойство("Пользовательская").Равно(Истина)
				.Получить()
		);

	// Проверяем, что добавилась новая схема B
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат.СхемыМаршрутов)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("Идентификатор").Равно(ОписанияСхем[1].Идентификатор)
				.Свойство("Представление").Равно(ОписанияСхем[1].Представление)
				.Свойство("Пользовательская").Равно(Истина)
				.Получить()
		);
		
КонецПроцедуры

Процедура ЗаменитьПользовательскиеСхемыСПустымНаборомУдаляетВсеПользовательскиеСхемы() Экспорт
	
	// given
	Тест = Заглушка();

	// when
	Результат = ВнешниеЗапросы.ЗаменитьПользовательскиеСхемы(Тест.СериализованныйВнешнийЗапрос, Новый Массив());
	Результат = ОМ_ТестовыеДанные.Десериализовать(Результат);
	
	// then
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат.СхемыМаршрутов)
		.ИмеетТип("Массив")
		.ИмеетДлину(1);
		
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат.СхемыМаршрутов[0])
		.Свойство("Идентификатор").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Идентификатор)
		.Свойство("Представление").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Представление)
		.Свойство("Пользовательская").Равно(Ложь);

КонецПроцедуры

Процедура ПолучитьИсходнуюСхемуМаршрутов() Экспорт
	
	// given
	Тест = Заглушка();
	ИдентификаторКоммита = Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Идентификатор;
	ИсходнаяСхема = Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Представление;
	
	// when
	ПолученнаяСхема = ВнешниеЗапросы.ПолучитьИсходнуюСхемуМаршрутов(Тест.СериализованныйВнешнийЗапрос, ИдентификаторКоммита);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ПолученнаяСхема)
		.Равно(ИсходнаяСхема);
	
КонецПроцедуры

Процедура ПолучитьИсходнуюСхемуМаршрутовЕслиСхемаНеНайденаДолженВернутьПустуюСтроку() Экспорт
	
	// given
	Тест = Заглушка();
	НесуществующийИдентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	// when
	ПолученнаяСхема = ВнешниеЗапросы.ПолучитьИсходнуюСхемуМаршрутов(Тест.СериализованныйВнешнийЗапрос, НесуществующийИдентификатор);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ПолученнаяСхема)
		.ИмеетТип("Строка")
		.НеЗаполнено();
	
КонецПроцедуры

Процедура ПолучитьСводныеСхемыМаршрутов() Экспорт
	
	// given
	Тест = Заглушка();
	
	// when
	Результат = ВнешниеЗапросы.ПолучитьСводныеСхемыМаршрутов(Тест.СериализованныйВнешнийЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(2); // По одному на каждый коммит
		
	// Проверяем схему для первого коммита (используется пользовательская)
	ОжидаемаяСхема1 = Тест.ВнешнийЗапрос.СхемыМаршрутов[1]; // Пользовательская для коммита 0
	Коммит1 = Тест.ВнешнийЗапрос.Коммиты[0];
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("Идентификатор").Равно(ОжидаемаяСхема1.Идентификатор)
				.Свойство("Дата").Равно(Коммит1.Дата)
				.Свойство("Комментарий").Равно(Коммит1.Заголовок)
				.Свойство("Представление").Равно(ОжидаемаяСхема1.Представление)
				.Свойство("Пользовательская").Равно(Истина)
				.Получить()
		);
		
	// Проверяем схему для второго коммита (используется пользовательская)
	ОжидаемаяСхема2 = Тест.ВнешнийЗапрос.СхемыМаршрутов[2]; // Пользовательская для коммита 1
	Коммит2 = Тест.ВнешнийЗапрос.Коммиты[1];
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("Идентификатор").Равно(ОжидаемаяСхема2.Идентификатор)
				.Свойство("Дата").Равно(Коммит2.Дата)
				.Свойство("Комментарий").Равно(Коммит2.Заголовок)
				.Свойство("Представление").Равно(ОжидаемаяСхема2.Представление)
				.Свойство("Пользовательская").Равно(Истина)
				.Получить()
		);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Заглушка()
	
	Результат = Новый Структура();
	Результат.Вставить("Схема", ОМ_ТестовыеДанные.ПолучитьТело(ОМ_Тесты.ЮТНастройкиВыполнения().КаталогПроекта() + "/test/requests/push-repo1-req1.json"));
	Результат.Вставить("ДесериализованнаяСхема", ОМ_ТестовыеДанные.JsonВОбъект(Результат.Схема));
	
	ВнешнийЗапрос = Новый Структура();
	ВнешнийЗапрос.Вставить("Type", Перечисления.ИсточникЗапроса.Гитлаб);
	ВнешнийЗапрос.Вставить("JSON", Результат.Схема);
	ВнешнийЗапрос.Вставить("ProjectId", Строка(Результат.ДесериализованнаяСхема.Получить("project").Получить("id")));
	ВнешнийЗапрос.Вставить("АдресПроекта", Результат.ДесериализованнаяСхема.Получить("project").Получить("web_url"));
	ВнешнийЗапрос.Вставить("ServerURL", "http://mockserver:1080");
	ВнешнийЗапрос.Вставить("Дата", ОМ_Тесты.ЮТест().Данные().СлучайнаяДата());
	ВнешнийЗапрос.Вставить("Идентификатор", Результат.ДесериализованнаяСхема.Получить("checkout_sha"));
	ВнешнийЗапрос.Вставить("Сообщение", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256));

	Коммиты = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.НовыйКоммит(1, ИдентификаторКоммита(Результат, 0), ДатаВремяКоммита(Результат, 0), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)),
		ОМ_ТестовыеДанные.НовыйКоммит(2, ИдентификаторКоммита(Результат, 1), ДатаВремяКоммита(Результат, 1), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)),
		ОМ_ТестовыеДанные.НовыйКоммит(3, ИдентификаторКоммита(Результат, 2), ДатаВремяКоммита(Результат, 2), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)));
	ВнешнийЗапрос.Вставить("Коммиты", Коммиты);
	
	МодифицированныеФайлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		НовыйИзмененныйФайл(1, Результат.ДесериализованнаяСхема.Получить("commits")[0], 3),
		НовыйИзмененныйФайл(2, Результат.ДесериализованнаяСхема.Получить("commits")[1], 3),
		НовыйИзмененныйФайл(3, Результат.ДесериализованнаяСхема.Получить("commits")[2], 2));
	ВнешнийЗапрос.Вставить("ModifiedFiles", МодифицированныеФайлы);
	
	СхемыМаршрутов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.СхемаМаршрутов(1, ИдентификаторКоммита(Результат, 0), ПолучитьФейковыйJSON(), Ложь),
		ОМ_ТестовыеДанные.СхемаМаршрутов(2, ИдентификаторКоммита(Результат, 0), ПолучитьФейковыйJSON(), Истина),
		ОМ_ТестовыеДанные.СхемаМаршрутов(3, ИдентификаторКоммита(Результат, 1), ПолучитьФейковыйJSON(), Истина));
	ВнешнийЗапрос.Вставить("СхемыМаршрутов", СхемыМаршрутов);
	
	Результат.Вставить("ВнешнийЗапрос", ВнешнийЗапрос);
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(Запись, ВнешнийЗапрос, НазначениеТипаXML.Явное);
	
	Результат.Вставить("СериализованныйВнешнийЗапрос", Запись.Закрыть());
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФейковыйJSON()

	Возврат ОМ_ТестовыеДанные.ПолучитьФейковыйJSON();

КонецФункции

Функция НовыйИзмененныйФайл(Знач НомерСтроки, Знач Коммит, Знач Позиция)
	
	Возврат ОМ_ТестовыеДанные.НовыйИзмененныйФайл(НомерСтроки, Коммит, Позиция);
	
КонецФункции

Функция НовыйИзмененныйФайлПереопределяемый(Знач НомерСтроки, Знач Коммит, Знач ПутьКФайлу)
	
	Результат = Новый Структура();
	Результат.Вставить("НомерСтроки", НомерСтроки);
	Результат.Вставить("Идентификатор", Коммит);
	Результат.Вставить("FilePath", ПутьКФайлу);
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторКоммита(Знач Тест, Знач Позиция)
	
	Возврат ОМ_ТестовыеДанные.ИдентификаторКоммита(Тест, Позиция);
	
КонецФункции

Функция ДатаВремяКоммита(Знач Тест, Знач Позиция)

	Возврат ОМ_ТестовыеДанные.ДатаВремяКоммита(Тест, Позиция);
	
КонецФункции

Процедура СодержитЭлемент(Результат, Тест, Файл, ПозицияВКоммитах, Действие)
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("RAWFilePath")
					.Пусто()
				.Свойство("FileName")
					.Пусто()
				.Свойство("FilePath")
					.Равно(Файл.FilePath)
				.Свойство("CommitSHA")
					.Равно(Тест.ВнешнийЗапрос.Коммиты[ПозицияВКоммитах].Идентификатор)
				.Свойство("Date")
					.Равно(Тест.ВнешнийЗапрос.Коммиты[ПозицияВКоммитах].Дата)
				.Свойство("Action")
					.Равно(Действие)
				.Свойство("BinaryData")
					.Равно(Неопределено)
				.Получить())
				
КонецПроцедуры

#КонецОбласти
