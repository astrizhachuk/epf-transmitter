#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("РаспределитьФайлыЕслиСхемыМаршрутовПустыеТоВозвращаетФайлБезМаршрутов")
		.ДобавитьТест("РаспределитьФайлыЕслиСхемаМаршрутаНекорректнаТоВозвращаетФайлБезМаршрутов") // проверка разных вариантов некорректных, но валидных JSON-схем
			.СПараметрами("{}") // пустой JSON
			.СПараметрами("{""ws"" : null}") // секция ws не определена
			.СПараметрами("{""ws"": [], ""epf"": [{""name"": ""file.epf""}]}") // секция ws пуста
			.СПараметрами("{""ws"": [{""name"": ""s1"", ""enabled"": true}], ""epf"": [{""name"": ""file.epf""}]}") // в сервисе нет url
			.СПараметрами("{""ws"": [{""name"": ""s1"", ""url"": ""http://...""}], ""epf"": [{""name"": ""file.epf""}]}") // в сервисе нет enabled
			.СПараметрами("{""ws"": [{""name"": ""s1"", ""url"": ""http://..."", ""enabled"": true}], ""epf"": []}") // секция epf пуста
			.СПараметрами("{""ws"": [{""name"": ""s1"", ""url"": ""http://..."", ""enabled"": true}], ""epf"": [{}]}") // в правиле epf нет name
		.ДобавитьТест("РаспределитьФайлыПоМаршрутамПриОтсутствииФайловСДаннымиВозвращаетПустоеЗначение")
		.ДобавитьТест("РаспределитьФайлыПоМаршрутамВозвращаетФайлСДвумяМаршрутамиПриОтсутствииИсключенийВМаршрутах")
		.ДобавитьТест("РаспределитьФайлыПоМаршрутамДляНесколькихКоммитовВозвращаетФайлыСРазнымиМаршрутами")
		.ДобавитьТест("РаспределитьФайлыПоМаршрутамЕслиДляФайлаНетПравилаТоВозвращаетФайлБезМаршрутов")
		.ДобавитьТест("РаспределитьФайлыЕслиДляКоммитаФайлаНетСхемыТоВозвращаетФайлБезМаршрутов")
		.ДобавитьТестовыйНабор("Обработка правил исключений")
			.ДобавитьТест("РаспределитьФайлыПоМаршрутамВозвращаетФайлСОднимМаршрутомПриНаличииИсключенийВМаршрутах")
			.ДобавитьТест("РаспределитьФайлыПоМаршрутамВозвращаетФайлСОднимМаршрутомПриНаличииИсключенийПоИмениВМаршрутах")
			.ДобавитьТест("РаспределитьФайлыПоМаршрутамЕслиСервисИсключенПоИмениИАдресуОдновременноТоОнНеПопадаетВМаршрут")
			.ДобавитьТест("РаспределитьФайлыПоМаршрутамЕслиСервисИсключенПоИмениИлиАдресуТоОнНеПопадаетВМаршрут")
		;
	
КонецПроцедуры

Процедура РаспределитьФайлыЕслиСхемыМаршрутовПустыеТоВозвращаетФайлБезМаршрутов() Экспорт
	
	// given
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ПолучитьОписаниеФайла(Файл, Коммит, Перечисления.ВидыИзмененийФайла.Изменен));
		
	// when
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Новый Соответствие(),
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].ДвоичныеДанные").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Данные))
		.Свойство("[0].Маршруты").НеЗаполнено();
		
КонецПроцедуры

Процедура РаспределитьФайлыЕслиСхемаМаршрутаНекорректнаТоВозвращаетФайлБезМаршрутов(Знач НекорректнаяСхема) Экспорт
	
	// given
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	Схемы = Новый Соответствие();
	Схемы.Вставить(Коммит, НекорректнаяСхема);
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ПолучитьОписаниеФайла(Файл, Коммит, Перечисления.ВидыИзмененийФайла.Изменен));
		
	// when
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Схемы,
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].ДвоичныеДанные").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Данные))
		.Свойство("[0].Маршруты").НеЗаполнено();
		
КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамПриОтсутствииФайловСДаннымиВозвращаетПустоеЗначение() Экспорт
	
	// given
	// Файл, который не должен быть обработан, так как является файлом настроек маршрутизации.
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов(); 
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ПолучитьОписаниеФайла(Файл, Коммит, Перечисления.ВидыИзмененийФайла.ПустаяСсылка()));
	
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Новый Соответствие(),
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.НеЗаполнено();

КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамВозвращаетФайлСДвумяМаршрутамиПриОтсутствииИсключенийВМаршрутах() Экспорт
	
	// given
	// --- Подготовка схемы маршрутизации ---
	// Есть 3 сервиса, один из которых выключен. Исключений для файла нет.
	// В результате должно остаться два маршрута.

	АдресКонечнойТочки1 = "http://endpoint1/api/hs/epf/uploadFile";
	АдресКонечнойТочки2 = "http://endpoint2/api/hs/epf/uploadFile";
	АдресКонечнойТочки3 = "http://endpoint3/api/hs/epf/uploadFile";
	
	КонечнаяТочка1 = ОМ_ТестовыеДанные.КонечнаяТочка(Неопределено, АдресКонечнойТочки1, Истина); // Сервис без имени
	КонечнаяТочка2 = ОМ_ТестовыеДанные.КонечнаяТочка("Адрес2", АдресКонечнойТочки2, Ложь); // Выключен
	КонечнаяТочка3 = ОМ_ТестовыеДанные.КонечнаяТочка("Адрес3", АдресКонечнойТочки3, Истина);
	ОписаниеКонечныхТочек = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(КонечнаяТочка1, КонечнаяТочка2, КонечнаяТочка3);
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	ПравилоДляФайла = ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(Файл.ПутьКФайлу); // Без исключений
	МаршрутизацияФайлов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПравилоДляФайла);
	СхемаJSON = ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов);
	
	// --- Подготовка входных данных для вызова ---
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Схемы = Новый Соответствие();
	Схемы.Вставить(Коммит, СхемаJSON);
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ПолучитьОписаниеФайла(Файл, Коммит, Перечисления.ВидыИзмененийФайла.Изменен));
	
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Схемы,
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].Маршруты").ИмеетДлину(2)
		.Свойство("[0].Маршруты").Содержит(АдресКонечнойТочки1)
		.Свойство("[0].Маршруты").НеСодержит(АдресКонечнойТочки2)
		.Свойство("[0].Маршруты").Содержит(АдресКонечнойТочки3)
		.Свойство("[0].ДвоичныеДанные").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Данные));

КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамДляНесколькихКоммитовВозвращаетФайлыСРазнымиМаршрутами() Экспорт
	
	// given
	// Готовим два независимых набора данных, чтобы проверить, что для каждого коммита
	// применяется своя, отдельная схема маршрутизации.
	Схемы = Новый Соответствие();
	Файлы = Новый Массив();
	
	// --- Набор данных №1 ---
	// Файл из этого коммита должен отправиться на Адрес1.
	Коммит1 = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	АдресКонечнойТочки1 = "http://endpoint1/api/hs/epf/uploadFile";
	Файл1 = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	// Имя сервиса не обязательно и не используется в этом сценарии.
	КонечнаяТочка1 = ОМ_ТестовыеДанные.КонечнаяТочка(Неопределено, АдресКонечнойТочки1, Истина);
	ПравилоДляФайла1 = ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(Файл1.ПутьКФайлу);
	СхемаJSON1 = ОМ_ТестовыеДанные.МаршрутизацияJSON(
		ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(КонечнаяТочка1),
		ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПравилоДляФайла1));
	ОписаниеФайла1 = ПолучитьОписаниеФайла(Файл1, Коммит1, Перечисления.ВидыИзмененийФайла.Изменен);
	Схемы.Вставить(Коммит1, СхемаJSON1);
	Файлы.Добавить(ОписаниеФайла1);
		
	// --- Набор данных №2 ---
	// Файл из этого коммита должен отправиться на Адрес2.
	Коммит2 = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	АдресКонечнойТочки2 = "http://endpoint2/api/hs/epf/uploadFile";
	Файл2 = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	// Имя сервиса не обязательно и не используется в этом сценарии.
	КонечнаяТочка2 = ОМ_ТестовыеДанные.КонечнаяТочка(Неопределено, АдресКонечнойТочки2, Истина);
	ПравилоДляФайла2 = ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(Файл2.ПутьКФайлу);
	СхемаJSON2 = ОМ_ТестовыеДанные.МаршрутизацияJSON(
		ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(КонечнаяТочка2),
		ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПравилоДляФайла2));
	ОписаниеФайла2 = ПолучитьОписаниеФайла(Файл2, Коммит2, Перечисления.ВидыИзмененийФайла.Изменен);
	Схемы.Вставить(Коммит2, СхемаJSON2);
	Файлы.Добавить(ОписаниеФайла2);
		
	// when
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Схемы,
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(2)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("Идентификатор").Равно(Коммит1)
				.Свойство("ИмяФайла").Равно(Файл1.ИмяФайла)
				.Свойство("Маршруты").Равно(ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(АдресКонечнойТочки1))
				.Получить()
		)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("Идентификатор").Равно(Коммит2)
				.Свойство("ИмяФайла").Равно(Файл2.ИмяФайла)
				.Свойство("Маршруты").Равно(ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(АдресКонечнойТочки2))
				.Получить()
		);
	
КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамЕслиДляФайлаНетПравилаТоВозвращаетФайлБезМаршрутов() Экспорт
	
	// given
	// --- Подготовка сценария ---
	// Создаем схему маршрутизации, в которой есть правило для некоего файла ("path/to/some/other.epf").
	// В списке измененных файлов коммита присутствует другой файл (`ФайлБезПравила`), для которого правил в схеме нет.
	//
	// --- Ожидаемый результат ---
	// Система должна вернуть `ФайлБезПравила` в результате, но с пустым списком маршрутов,
	// так как для него не найдено правил.
	
	АдресКонечнойТочки = "http://endpoint/api/hs/epf/uploadFile";
	КонечнаяТочка = ОМ_ТестовыеДанные.КонечнаяТочка("endpoint", АдресКонечнойТочки, Истина);
	ОписаниеКонечныхТочек = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(КонечнаяТочка);
	
	ПутьКФайлуСПравилом = "path/to/some/other.epf";
	ПравилоДляФайла = ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(ПутьКФайлуСПравилом);
	МаршрутизацияФайлов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПравилоДляФайла);
	
	ФайлБезПравила = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	СхемаJSON = ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов);
	Схемы = Новый Соответствие();
	Схемы.Вставить(Коммит, СхемаJSON);
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ПолучитьОписаниеФайла(ФайлБезПравила, Коммит, Перечисления.ВидыИзмененийФайла.Изменен));
	
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Схемы,
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(ФайлБезПравила.ИмяФайла)
		.Свойство("[0].Маршруты").НеЗаполнено()
		.Свойство("[0].ДвоичныеДанные").Равно(ПолучитьДвоичныеДанныеИзСтроки(ФайлБезПравила.Данные));
		
КонецПроцедуры

Процедура РаспределитьФайлыЕслиДляКоммитаФайлаНетСхемыТоВозвращаетФайлБезМаршрутов() Экспорт
	
	// given
	// --- Подготовка сценария ---
	// Создаем схему маршрутизации для одного коммита (`КоммитСоСхемой`).
	// В списке измененных файлов присутствует файл из другого коммита (`КоммитБезСхемы`),
	// для которого в переданных схемах нет правил.
	//
	// --- Ожидаемый результат ---
	// Система должна вернуть файл из `КоммитБезСхемы`, но с пустым списком маршрутов.
	
	КоммитСоСхемой = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	КоммитБезСхемы = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	// Создаем валидную схему для первого коммита
	АдресКонечнойТочки = "http://endpoint/api/hs/epf/uploadFile";
	КонечнаяТочка = ОМ_ТестовыеДанные.КонечнаяТочка("endpoint", АдресКонечнойТочки, Истина);
	ПравилоДляФайла = ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными("some.epf");
	СхемаJSON = ОМ_ТестовыеДанные.МаршрутизацияJSON(
		ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(КонечнаяТочка),
		ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПравилоДляФайла)
	);
	
	Схемы = Новый Соответствие();
	Схемы.Вставить(КоммитСоСхемой, СхемаJSON);
	
	// Создаем файл из коммита, для которого нет схемы
	ФайлБезСхемы = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ПолучитьОписаниеФайла(ФайлБезСхемы, КоммитБезСхемы, Перечисления.ВидыИзмененийФайла.Изменен));
		
	// when
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Схемы,
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(КоммитБезСхемы)
		.Свойство("[0].ИмяФайла").Равно(ФайлБезСхемы.ИмяФайла)
		.Свойство("[0].Маршруты").НеЗаполнено();
		
КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамВозвращаетФайлСОднимМаршрутомПриНаличииИсключенийВМаршрутах() Экспорт
	
	// given
	// --- Подготовка схемы маршрутизации ---
	// Есть 3 сервиса, один из которых выключен.
	// Для файла заданы исключения по URL, которые отфильтруют еще один сервис.
	// В результате должен остаться только один маршрут (АдресКонечнойТочки3).

	АдресКонечнойТочки1 = "http://endpoint1/api/hs/epf/uploadFile";
	АдресКонечнойТочки2 = "http://endpoint2/api/hs/epf/uploadFile";
	АдресКонечнойТочки3 = "http://endpoint3/api/hs/epf/uploadFile";
	
	КонечнаяТочка1 = ОМ_ТестовыеДанные.КонечнаяТочка(Неопределено, АдресКонечнойТочки1, Истина);
	КонечнаяТочка2 = ОМ_ТестовыеДанные.КонечнаяТочка(Неопределено, АдресКонечнойТочки2, Ложь); // Выключен
	КонечнаяТочка3 = ОМ_ТестовыеДанные.КонечнаяТочка(Неопределено, АдресКонечнойТочки3, Истина);
	ОписаниеКонечныхТочек = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(КонечнаяТочка1, КонечнаяТочка2, КонечнаяТочка3);
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Исключения = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(АдресКонечнойТочки1, АдресКонечнойТочки2); // Исключаем по URL
	ПравилоДляФайла = ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(Файл.ПутьКФайлу, Исключения);
	МаршрутизацияФайлов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПравилоДляФайла);
	СхемаJSON = ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов);
	
	// --- Подготовка входных данных для вызова ---
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Схемы = Новый Соответствие();
	Схемы.Вставить(Коммит, СхемаJSON);
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ПолучитьОписаниеФайла(Файл, Коммит, Перечисления.ВидыИзмененийФайла.Изменен));
	
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Схемы,
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].Маршруты").ИмеетДлину(1)
		.Свойство("[0].Маршруты[0]").Равно(АдресКонечнойТочки3)
		.Свойство("[0].ДвоичныеДанные").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Данные));

КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамВозвращаетФайлСОднимМаршрутомПриНаличииИсключенийПоИмениВМаршрутах() Экспорт
	
	// given
	// --- Подготовка схемы маршрутизации ---
	// Есть 3 сервиса, один из которых выключен.
	// Для файла заданы исключения по имени, которые отфильтруют еще один сервис.
	// В результате должен остаться только один маршрут (АдресКонечнойТочки3).

	ИмяСервиса1 = "ИмяСервиса1";
	ИмяСервиса2 = "ИмяСервиса2";
	ИмяСервиса3 = "ИмяСервиса3";
	
	АдресКонечнойТочки1 = "http://endpoint1/api/hs/epf/uploadFile";
	АдресКонечнойТочки2 = "http://endpoint2/api/hs/epf/uploadFile";
	АдресКонечнойТочки3 = "http://endpoint3/api/hs/epf/uploadFile";
	
	КонечнаяТочка1 = ОМ_ТестовыеДанные.КонечнаяТочка(ИмяСервиса1, АдресКонечнойТочки1, Истина);
	КонечнаяТочка2 = ОМ_ТестовыеДанные.КонечнаяТочка(ИмяСервиса2, АдресКонечнойТочки2, Ложь); // Выключен
	КонечнаяТочка3 = ОМ_ТестовыеДанные.КонечнаяТочка(ИмяСервиса3, АдресКонечнойТочки3, Истина);
	ОписаниеКонечныхТочек = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(КонечнаяТочка1, КонечнаяТочка2, КонечнаяТочка3);
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Исключения = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ИмяСервиса1); // Исключаем по имени
	ПравилоДляФайла = ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(Файл.ПутьКФайлу, Исключения);
	МаршрутизацияФайлов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПравилоДляФайла);
	СхемаJSON = ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов);
	
	// --- Подготовка входных данных для вызова ---
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Схемы = Новый Соответствие();
	Схемы.Вставить(Коммит, СхемаJSON);
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ПолучитьОписаниеФайла(Файл, Коммит, Перечисления.ВидыИзмененийФайла.Изменен));
	
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Схемы,
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].Маршруты").ИмеетДлину(1)
		.Свойство("[0].Маршруты[0]").Равно(АдресКонечнойТочки3)
		.Свойство("[0].ДвоичныеДанные").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Данные));

КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамЕслиСервисИсключенПоИмениИАдресуОдновременноТоОнНеПопадаетВМаршрут() Экспорт
	
	// given
	// --- Подготовка схемы маршрутизации ---
	// Есть 2 активных сервиса.
	// Для файла заданы исключения, которые включают И имя, И URL одного и того же сервиса.
	// Такая ситуация может возникнуть из-за ошибки пользователя, и так как входные данные
	// дополнительно не проверяются, важно убедиться, что система обработает ее корректно.
	// В результате должен остаться только один маршрут (АдресКонечнойТочки2).

	ИмяСервиса1 = "ИмяСервиса1";
	ИмяСервиса2 = "ИмяСервиса2";
	
	АдресКонечнойТочки1 = "http://endpoint1/api/hs/epf/uploadFile";
	АдресКонечнойТочки2 = "http://endpoint2/api/hs/epf/uploadFile";
	
	КонечнаяТочка1 = ОМ_ТестовыеДанные.КонечнаяТочка(ИмяСервиса1, АдресКонечнойТочки1, Истина);
	КонечнаяТочка2 = ОМ_ТестовыеДанные.КонечнаяТочка(ИмяСервиса2, АдресКонечнойТочки2, Истина);
	ОписаниеКонечныхТочек = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(КонечнаяТочка1, КонечнаяТочка2);
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	// Исключаем Сервис1 по имени И по URL одновременно
	Исключения = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ИмяСервиса1, АдресКонечнойТочки1);
	ПравилоДляФайла = ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(Файл.ПутьКФайлу, Исключения);
	МаршрутизацияФайлов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПравилоДляФайла);
	СхемаJSON = ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов);
	
	// --- Подготовка входных данных для вызова ---
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Схемы = Новый Соответствие();
	Схемы.Вставить(Коммит, СхемаJSON);
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ПолучитьОписаниеФайла(Файл, Коммит, Перечисления.ВидыИзмененийФайла.Изменен));
	
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Схемы,
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].Маршруты").ИмеетДлину(1)
		.Свойство("[0].Маршруты[0]").Равно(АдресКонечнойТочки2)
		.Свойство("[0].ДвоичныеДанные").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Данные));

КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамЕслиСервисИсключенПоИмениИлиАдресуТоОнНеПопадаетВМаршрут() Экспорт
	
	// given
	// --- Подготовка схемы маршрутизации ---
	// Есть 3 активных сервиса.
	// Для файла заданы исключения: один сервис исключается по имени, другой - по URL.
	// В результате должен остаться только один маршрут (АдресКонечнойТочки3).
	// Этот тест проверяет, что логика "НЕ (ИсключенПоАдресу ИЛИ ИсключенПоИмени)" работает корректно.

	ИмяСервиса1 = "ИмяСервиса1";
	ИмяСервиса2 = "ИмяСервиса2";
	ИмяСервиса3 = "ИмяСервиса3";
	
	АдресКонечнойТочки1 = "http://endpoint1/api/hs/epf/uploadFile";
	АдресКонечнойТочки2 = "http://endpoint2/api/hs/epf/uploadFile";
	АдресКонечнойТочки3 = "http://endpoint3/api/hs/epf/uploadFile";
	
	КонечнаяТочка1 = ОМ_ТестовыеДанные.КонечнаяТочка(ИмяСервиса1, АдресКонечнойТочки1, Истина);
	КонечнаяТочка2 = ОМ_ТестовыеДанные.КонечнаяТочка(ИмяСервиса2, АдресКонечнойТочки2, Истина);
	КонечнаяТочка3 = ОМ_ТестовыеДанные.КонечнаяТочка(ИмяСервиса3, АдресКонечнойТочки3, Истина);
	ОписаниеКонечныхТочек = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(КонечнаяТочка1, КонечнаяТочка2, КонечнаяТочка3);
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Исключения = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ИмяСервиса1, АдресКонечнойТочки2); // Исключаем один по имени, другой по URL
	ПравилоДляФайла = ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(Файл.ПутьКФайлу, Исключения);
	МаршрутизацияФайлов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПравилоДляФайла);
	СхемаJSON = ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов);
	
	// --- Подготовка входных данных для вызова ---
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Схемы = Новый Соответствие();
	Схемы.Вставить(Коммит, СхемаJSON);
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ПолучитьОписаниеФайла(Файл, Коммит, Перечисления.ВидыИзмененийФайла.Изменен));
	
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Схемы,
		Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].Маршруты").ИмеетДлину(1)
		.Свойство("[0].Маршруты[0]").Равно(АдресКонечнойТочки3)
		.Свойство("[0].ДвоичныеДанные").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Данные));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОписаниеФайла(Знач Файл, Знач Коммит, Знач Действие)
	
	Результат = Новый Структура();
	Результат.Вставить( "Идентификатор", Коммит );
	Результат.Вставить( "ИмяФайла", Файл.ИмяФайла );
	Результат.Вставить( "ПутьКФайлу", Файл.ПутьКФайлу );
	Результат.Вставить( "ДвоичныеДанные", ПолучитьДвоичныеДанныеИзСтроки(Файл.Данные) );
	Результат.Вставить( "Действие", Действие );

	Возврат Результат;
	
КонецФункции

#КонецОбласти
