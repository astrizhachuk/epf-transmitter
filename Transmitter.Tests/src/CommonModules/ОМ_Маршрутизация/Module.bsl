#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("РаспределитьФайлыПоМаршрутамПриОтсутствииСхемыМаршрутовВозвращаетФайлыБезМаршрутов")
		.ДобавитьТест("РаспределитьФайлыПоМаршрутамПриОтсутствииДанныхВМаршрутизацииВозвращаетФайлыБезМаршрутов")
			.СПараметрами("{}")
			.СПараметрами("{""ws"" : []}")
			.СПараметрами("{""ws"" : [{""name"": null}]}")
			.СПараметрами("{""ws"" : [{""name"": ""name"", ""enabled"": null}]}")
			.СПараметрами("{""ws"" : [{""name"": ""name"", ""enabled"": false}]}")
			.СПараметрами("{""ws"" : [{""name"": ""name"", ""enabled"": true, ""url"": null}]}")
			.СПараметрами("{""ws"" : [{""name"": ""name"", ""enabled"": true, ""url"": ""url""}], ""epf"" : []}")
			.СПараметрами("{""ws"" : [{""name"": ""name"", ""enabled"": true, ""url"": ""url""}], ""epf"" : [{""name"": null}]}")
//			.СПараметрами("{""ws"" : [{""name"": ""name"", ""enabled"": true, ""url"": ""url""}], ""epf"" : [{""name"": ""path/to/file""}]}") // Это рабочий кейс
			.СПараметрами("{""ws"" : [{""name"": ""name"", ""enabled"": true, ""url"": 1}], ""epf"" : [{""name"": ""path/to/file""}]}")
			.СПараметрами("{""ws"" : [{""name"": ""name"", ""enabled"": true, ""url"": ""url""}], ""epf"" : [{""name"": ""path/to/file"", ""exclude"": [""name""]}]}")
		.ДобавитьТест("РаспределитьФайлыПоМаршрутамПриОтсутствииФайловСДаннымиВозвращаетПустоеЗначение")
		.ДобавитьТест("РаспределитьФайлыПоМаршрутамВозвращаетФайлСОднимМаршрутомПриНаличииИсключенийВМаршрутах")
		.ДобавитьТест("РаспределитьФайлыПоМаршрутамВозвращаетФайлСДвумяМаршрутамиПриОтсутствииИсключенийВМаршрутах")
		.ДобавитьТест("РаспределитьФайлыПоМаршрутамПриОтсутствииСоответствияМеждуСхемойМаршрутаИДаннымиВозвращаетФайлБезМаршрутов")
		;
	
КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамПриОтсутствииСхемыМаршрутовВозвращаетФайлыБезМаршрутов() Экспорт
	
	// given
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
		ПолучитьОписаниеФайла(Файл, Коммит, "modifed"));
	
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(Новый Соответствие(), Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].Routes").НеЗаполнено()
		.Свойство("[0].BinaryData").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Data));
		
КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамПриОтсутствииДанныхВМаршрутизацииВозвращаетФайлыБезМаршрутов(Знач JSON) Экспорт
	
	// given
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	Схема = Новый Соответствие();
	Схема.Вставить(Коммит, JSON);
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Файл.Вставить("ИмяФайла", "filename");
	Файл.Вставить("ПутьКФайлу", "path/to/file");
	
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
		ПолучитьОписаниеФайла(Файл, Коммит, "modifed"));
		
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(Схема, Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].Routes").НеЗаполнено()
		.Свойство("[0].BinaryData").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Data));
		
КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамПриОтсутствииФайловСДаннымиВозвращаетПустоеЗначение() Экспорт
	
	// given
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
		ПолучитьОписаниеФайла(ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов(), ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(), ""));

	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(Новый Соответствие(), Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.НеЗаполнено();

КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамВозвращаетФайлСОднимМаршрутомПриНаличииИсключенийВМаршрутах() Экспорт
	
	// given
	Адрес1 = "http://endpoint1";
	Адрес2 = "http://endpoint2";
	Адрес3 = "http://endpoint3";
	
	ОписаниеКонечныхТочек = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.КонечнаяТочка(Адрес1, Истина),
		ОМ_ТестовыеДанные.КонечнаяТочка(Адрес2, Ложь),
		ОМ_ТестовыеДанные.КонечнаяТочка(Адрес3, Истина));
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	
	МаршрутизацияФайлов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(Файл.ПутьКФайлу, ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(Адрес1, Адрес2)));
		
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	Маршруты = Новый Соответствие();
	Маршруты.Вставить(Коммит, ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов));
	Маршруты.Вставить(ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(), ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов));
		
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
		ПолучитьОписаниеФайла(Файл, Коммит, "modifed"));
	
	// when	
	Result = Маршрутизация.РаспределитьФайлыПоМаршрутам(Маршруты, Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Result)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].Routes").ИмеетДлину(1)
		.Свойство("[0].Routes[0]").Равно(Адрес3)
		.Свойство("[0].BinaryData").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Data));

КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамВозвращаетФайлСДвумяМаршрутамиПриОтсутствииИсключенийВМаршрутах() Экспорт
	
	// given
	Адрес1 = "http://endpoint1";
	Адрес2 = "http://endpoint2";
	Адрес3 = "http://endpoint3";
	
	ОписаниеКонечныхТочек = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.КонечнаяТочка(Адрес1, Истина),
		ОМ_ТестовыеДанные.КонечнаяТочка(Адрес2, Ложь),
		ОМ_ТестовыеДанные.КонечнаяТочка(Адрес3, Истина));

	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	
	МаршрутизацияФайлов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(Файл.ПутьКФайлу));
	
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
		
	Маршруты = Новый Соответствие();
	Маршруты.Вставить(Коммит, ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов));
	Маршруты.Вставить(ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(), ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов));
	
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
		ПолучитьОписаниеФайла(Файл, Коммит, "modifed"));
	
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(Маршруты, Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл.ИмяФайла)
		.Свойство("[0].Routes").ИмеетДлину(2)
		.Свойство("[0].Routes").Содержит(Адрес1)
		.Свойство("[0].Routes").НеСодержит(Адрес2)
		.Свойство("[0].Routes").Содержит(Адрес3)
		.Свойство("[0].BinaryData").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Data));

КонецПроцедуры

Процедура РаспределитьФайлыПоМаршрутамПриОтсутствииСоответствияМеждуСхемойМаршрутаИДаннымиВозвращаетФайлБезМаршрутов() Экспорт
	
	// given
	ОписаниеКонечныхТочек = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.КонечнаяТочка("http://endpoint", Истина));
	
	Файл1 = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Файл2 = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	
	МаршрутизацияФайлов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.МаршрутизацияФайлаСДанными(Файл1.ПутьКФайлу));
	
	Коммит = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	Маршруты = Новый Соответствие();
	Маршруты.Вставить(Коммит, ОМ_ТестовыеДанные.МаршрутизацияJSON(ОписаниеКонечныхТочек, МаршрутизацияФайлов));
	
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
		ПолучитьОписаниеФайла(Файл2, Коммит, "modifed"));
	
	// when	
	Результат = Маршрутизация.РаспределитьФайлыПоМаршрутам(Маршруты, Файлы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство("[0].Идентификатор").Равно(Коммит)
		.Свойство("[0].ИмяФайла").Равно(Файл2.ИмяФайла)
		.Свойство("[0].Routes").НеЗаполнено()
		.Свойство("[0].BinaryData").Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл2.Data));
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОписаниеФайла(Знач Файл, Знач Коммит, Знач Действие)
	
	Результат = Новый Структура();
	Результат.Вставить( "ИмяФайла", Файл.ИмяФайла );
	Результат.Вставить( "ПутьКФайлу", Файл.ПутьКФайлу );
	Результат.Вставить( "BinaryData", ПолучитьДвоичныеДанныеИзСтроки(Файл.Data) );
	Результат.Вставить( "Действие", Действие );
	Результат.Вставить( "Идентификатор", Коммит );

	Возврат Результат;
	
КонецФункции

#КонецОбласти
