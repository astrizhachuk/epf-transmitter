#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("ПредставленияСтатуса")
		.ДобавитьТест("ПолучитьСтатусВозвращаетКодСтатусаИТекстОшибкиПриНекорректнойРаботеСервиса")
			.ВТранзакции()
		.ДобавитьТест("ПолучитьСтатусНеПроходитАвторизациюПоДаннымПараметровПодключения")
		.ДобавитьТест("ПолучитьСтатусПроходитАвторизациюПриНаличииПользователяИПароляВАдресеСервиса")
		.ДобавитьТест("ОтправитьФайлВыбрасываетИсключениеПриНеЗаполненныхПараметрах")
		.ДобавитьТест("ОтправитьФайлВыбрасываетИсключениеПриДублированииАдресовПубликации")
			.ВТранзакции()
		.ДобавитьТест("ОтправитьФайлВыбрасываетИсключениеПриНаличииВОтветеЛюбогоКодаСостоянияНеРавного200")
		.ДобавитьТест("ОтправитьФайлПриОтсутствииПолучателя")
			.ВТранзакции()
		.ДобавитьТест("ОтправитьФайлПриНаличииПолучателя")
			.ВТранзакции()
		.ДобавитьТест("ОтправитьФайлыВФоне")
		.ДобавитьТест("ОтправитьФайлыВФонеПриОтсутствииДанныхВозвращаетПустойРезультат")
		.ДобавитьТест("ОтправитьФайлыВФонеВозвращаетОшибку")
	;
	
КонецПроцедуры

Процедура ПредставленияСтатуса() Экспорт
	
	// given
	
	// when
	Результат = Получатели.ПредставленияСтатуса();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.ИмеетДлину(2);
		
КонецПроцедуры

Процедура ПолучитьСтатусВозвращаетКодСтатусаИТекстОшибкиПриНекорректнойРаботеСервиса() Экспорт
	
	// given
	Тест = Заглушка();
	
	// when
	Результат = Получатели.ПолучитьСтатус(Тест);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.ИмеетДлину(2)
		.Свойство("КодСостояния").Равно(500)
		.Свойство("ТелоОтвета").Содержит("or missing URL");
		
КонецПроцедуры

Процедура ПолучитьСтатусНеПроходитАвторизациюПоДаннымПараметровПодключения() Экспорт
	
	// given
	Тест = Заглушка();
	
	ОМ_Тесты.Мокито().Обучение(КоннекторHTTP)
		.Когда("Get")
			.Вернуть(Ответ(200, "что-то"))
		.Когда("Get", ОМ_Тесты.Мокито().МассивПараметров(
			ОМ_Тесты.Мокито().ЛюбойПараметр(),
			Неопределено,
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("Аутентификация.Пользователь").Содержит(Тест.Пользователь)
				.Свойство("Аутентификация.Пароль").Содержит(Тест.Пароль)))
					.Вернуть(Ответ(401, ""));
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = Получатели.ПолучитьСтатус(Тест);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.ИмеетДлину(2)
		.Свойство("КодСостояния").Равно(401)
		.Свойство("ТелоОтвета").НеЗаполнено();
		
КонецПроцедуры

Процедура ПолучитьСтатусПроходитАвторизациюПриНаличииПользователяИПароляВАдресеСервиса() Экспорт
	
	// given
	Тест = Заглушка();
	Тест.Адрес = "http://" + Тест.Пользователь + ":" + Тест.Пароль + "@localhost";
	
	ОМ_Тесты.Мокито().Обучение(КоннекторHTTP)
		.Когда("Get")
			.Вернуть(Ответ(401, ""))
		.Когда("Get", ОМ_Тесты.Мокито().МассивПараметров(
			ОМ_Тесты.ЮТест().Предикат()
				.Содержит(Тест.Адрес),
			Неопределено,
			ОМ_Тесты.Мокито().ЛюбойПараметр()))
				.Вернуть(Ответ(200, "что-то"));
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = Получатели.ПолучитьСтатус(Тест);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.ИмеетДлину(2)
		.Свойство("КодСостояния").Равно(200)
		.Свойство("ТелоОтвета").Заполнено();
		
КонецПроцедуры

Процедура ОтправитьФайлВыбрасываетИсключениеПриНеЗаполненныхПараметрах() Экспорт
	
	// given
	Параметры = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве("", "", "");
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Получатели)
		.Метод("ОтправитьФайл", Параметры)
		.ВыбрасываетИсключение("or missing URL");
	
КонецПроцедуры

Процедура ОтправитьФайлВыбрасываетИсключениеПриДублированииАдресовПубликации() Экспорт
	
	// given
	Адрес = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Конструктор = ОМ_Тесты.ЮТест().Данные().КонструкторОбъекта(Справочники.Получатели);
	Конструктор
		.ФикцияОбязательныхПолей()
		.Установить("АдресИнформационнойБазы", Адрес)
		.Записать( , Истина);
	Конструктор
		.ФикцияОбязательныхПолей()
		.Установить("АдресИнформационнойБазы", Адрес)
		.Записать( , Истина);
	
	Параметры = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(Адрес, "", "");
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Получатели)
		.Метод("ОтправитьФайл", Параметры)
		.ВыбрасываетИсключение(СтрШаблон(Логи.Сообщения().DUPLICATE_BASE_URL, Адрес));
	
КонецПроцедуры

Процедура ОтправитьФайлВыбрасываетИсключениеПриНаличииВОтветеЛюбогоКодаСостоянияНеРавного200() Экспорт
	
	// given
	Адрес = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	ИмяФайла = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	КодСостояния = 401;
	ТекстОшибки = "текст ошибки";
	
	ОМ_Тесты.Мокито().Обучение(КоннекторHTTP)
		.Когда("Post")
			.Вернуть(Ответ(КодСостояния, ТекстОшибки));
	ОМ_Тесты.Мокито().Прогон();
	
	Параметры = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(Адрес, ИмяФайла, ПолучитьДвоичныеДанныеИзСтроки(""));
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Получатели)
		.Метод("ОтправитьФайл", Параметры)
		.ВыбрасываетИсключение("URL: " + Адрес + "; ")
		.ВыбрасываетИсключение("имя файла: " + ИмяФайла)
		.ВыбрасываетИсключение("код состояния: " + КодСостояния)
		.ВыбрасываетИсключение(ТекстОшибки);
	
КонецПроцедуры

Процедура ОтправитьФайлПриОтсутствииПолучателя() Экспорт
	
	// given
	Адрес = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	ИмяФайла = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	КодСостояния = 200;
	ТекстСообщения = "{тутачки текст}";
	
	Пользователь = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Пароль = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Таймаут = ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(1, 10);
	
	Константы.ПользовательВнешнегоСервиса.Установить(Пользователь);
	Константы.ПарольВнешнегоСервиса.Установить(Пароль);
	Константы.ТаймаутВнешнегоСервиса.Установить(Таймаут);
	
	ОМ_Тесты.Мокито().Обучение(КоннекторHTTP)
		.Когда("Post", ОМ_Тесты.Мокито().МассивПараметров(
			ОМ_Тесты.Мокито().ЛюбойПараметр(),
			ПолучитьДвоичныеДанныеИзСтроки(""),
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("Заголовки.name").Равно(КодироватьСтроку(ИмяФайла, СпособКодированияСтроки.КодировкаURL))
				.Свойство("Аутентификация.Пользователь").Содержит(Пользователь)
				.Свойство("Аутентификация.Пароль").Содержит(Пароль)
				.Свойство("Таймаут").Равно(Таймаут)))
			.Вернуть(Ответ(КодСостояния, ТекстСообщения));
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = Получатели.ОтправитьФайл(Адрес, ИмяФайла, ПолучитьДвоичныеДанныеИзСтроки(""));
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит("URL: " + Адрес + "; ")
		.Содержит("имя файла: " + ИмяФайла)
		.Содержит("код состояния: " + КодСостояния)
		.ЗаканчиваетсяНа(ТекстСообщения);
	
КонецПроцедуры

Процедура ОтправитьФайлПриНаличииПолучателя() Экспорт
	
	// given
	ИмяФайла = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	КодСостояния = 200;
	ТекстСообщения = "{тутачки текст}";
	
	Конструктор = ОМ_Тесты.ЮТест().Данные().КонструкторОбъекта(Справочники.Получатели);
	Ожидание = Конструктор
		.ФикцияОбязательныхПолей()
		.Записать(Истина, Истина);
	
	ОМ_Тесты.Мокито().Обучение(КоннекторHTTP)
		.Когда("Post", ОМ_Тесты.Мокито().МассивПараметров(
			ОМ_Тесты.Мокито().ЛюбойПараметр(),
			ПолучитьДвоичныеДанныеИзСтроки(""),
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("Заголовки.name").Равно(КодироватьСтроку(ИмяФайла, СпособКодированияСтроки.КодировкаURL))
				.Свойство("Аутентификация.Пользователь").Содержит(Ожидание.Пользователь)
				.Свойство("Аутентификация.Пароль").Содержит(Ожидание.Пароль)))
			.Вернуть(Ответ(КодСостояния, ТекстСообщения));
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = Получатели.ОтправитьФайл(Ожидание.АдресИнформационнойБазы, ИмяФайла, ПолучитьДвоичныеДанныеИзСтроки(""));
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит("URL: " + Ожидание.АдресИнформационнойБазы +Ожидание.ПутьКЗагрузкеФайла + "; ")
		.Содержит("имя файла: " + ИмяФайла)
		.Содержит("код состояния: " + КодСостояния)
		.ЗаканчиваетсяНа(ТекстСообщения);
	
КонецПроцедуры

Процедура ОтправитьФайлыВФоне() Экспорт
	
	// given
	ФайлыКОтправке = ФайлКОтправке(
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными(),
		ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве("Маршрут1", "Маршрут2"));
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ФайлыКОтправке);
	
	// when
	Результат = Получатели.ОтправитьФайлыВФоне(Файлы);

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(2)
		.Свойство("[0].BackgroundJob.Состояние").Равно(СостояниеФоновогоЗадания.Активно)
		.Свойство("[0].ИнформацияОбОшибке").ЭтоНеопределено()
		.Свойство("[1].BackgroundJob.Состояние").Равно(СостояниеФоновогоЗадания.Активно)
		.Свойство("[1].ИнформацияОбОшибке").ЭтоНеопределено();
	
КонецПроцедуры

Процедура ОтправитьФайлыВФонеПриОтсутствииДанныхВозвращаетПустойРезультат() Экспорт
	
	// given
	
	// when
	Результат = Получатели.ОтправитьФайлыВФоне(Новый Массив());

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.НеЗаполнено();
	
КонецПроцедуры

Процедура ОтправитьФайлыВФонеВозвращаетОшибку() Экспорт
	
	// given
	ФайлыКОтправке = ФайлКОтправке(
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными(),
		ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(Новый HTTPЗапрос()));
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ФайлыКОтправке);
	
	// when
	Результат = Получатели.ОтправитьФайлыВФоне(Файлы);

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(1)
		.Свойство("[0].BackgroundJob").ЭтоНеопределено()
		.Свойство("[0].ИнформацияОбОшибке").ИмеетТип("ИнформацияОбОшибке");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Заглушка()
	
	Результат = Новый Структура();
	Результат.Вставить("Адрес", "");
	Результат.Вставить("Пользователь", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	Результат.Вставить("Пароль", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	Результат.Вставить("Таймаут", ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(1, 60));
	
	Возврат Результат;
	
КонецФункции

Функция Ответ(Знач КодСостояния, Знач Тело)
	
	Результат = Новый Структура();
	Результат.Вставить("КодСостояния", КодСостояния);
	Результат.Вставить("Кодировка", Неопределено);
	Результат.Вставить("Заголовки",  Новый Соответствие());
	Результат.Вставить("Тело", ПолучитьДвоичныеДанныеИзСтроки(Тело));
	
	Возврат Результат;
	
КонецФункции

Функция ФайлКОтправке(Знач Коммит, Файл, Маршруты)
	
	Результат = Новый Структура();
	Результат.Вставить("Идентификатор", Коммит);
	Результат.Вставить("ИмяФайла", Файл.ИмяФайла);
	Результат.Вставить("Routes", Маршруты);
	Результат.Вставить("BinaryData", ПолучитьДвоичныеДанныеИзСтроки(Файл.Data));
	
	Return Результат;
	
КонецФункции

#КонецОбласти
