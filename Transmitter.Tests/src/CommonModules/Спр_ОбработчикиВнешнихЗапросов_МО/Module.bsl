#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ВТранзакции()
			.ДобавитьТест("ЗаписатьНовогоЭлементаВыбрасываетИсключениеПриСовпаденииProjectURL")
			.ДобавитьТест("ЗаписатьПерезаписываетРанееСозданныйЭлемент")
			.ДобавитьТест("ЗагрузитьИсториюСобытий")
			.ДобавитьТест("ЗагрузитьИсториюСобытийЗагружаетОбщиеДанныеИДанныеПоОбработчику")
	;
	
КонецПроцедуры

Процедура ЗаписатьНовогоЭлементаВыбрасываетИсключениеПриСовпаденииProjectURL() Экспорт
	
	// given
	ProjectURL = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	ОМ_Тесты.ЮТест().Данные().КонструкторОбъекта(Справочники.ОбработчикиВнешнихЗапросов)
		.ФикцияОбязательныхПолей()
		.Установить("ProjectURL", ProjectURL)
		.Записать(, Истина);
	
	Обработчик = Справочники.ОбработчикиВнешнихЗапросов.СоздатьЭлемент();
	Обработчик.ProjectURL = ProjectURL;
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Обработчик)
		.Метод("Записать")
		.ВыбрасываетИсключение("Не удалось записать: ""Обработчики внешних запросов""");

КонецПроцедуры

Процедура ЗаписатьПерезаписываетРанееСозданныйЭлемент() Экспорт
	
	// given
	ProjectURL = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Обработчик = ОМ_Тесты.ЮТест().Данные().КонструкторОбъекта(Справочники.ОбработчикиВнешнихЗапросов)
		.ФикцияОбязательныхПолей()
		.Установить("ProjectURL", ProjectURL)
		.Записать(Истина, Истина);
	
	// when
	Обработчик.Записать();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Обработчик)
		.Свойство("ProjectURL")
			.Равно(ProjectURL);

КонецПроцедуры

Процедура ЗагрузитьИсториюСобытий() Экспорт
	
	// given
	Дата = ОМ_Тесты.ЮТест().Данные().СлучайнаяДата();
	Обработчик = ОМ_Тесты.ЮТест().Данные().КонструкторОбъекта(Справочники.ОбработчикиВнешнихЗапросов)
		.ФикцияОбязательныхПолей()
		.ТабличнаяЧасть("ИсторияСобытий")
		.ДобавитьСтроку()
			.ФикцияОбязательныхПолей()
		.Записать(Истина, Истина);
	
	ЖурналРегистрации = ЖурналРегистрации();
	ЗаписьЖурналаРегистрации = ДобавитьОбработчикВЗаписьЖурналаРегистрации(ЖурналРегистрации, Дата, Обработчик.Ссылка);
	
	ОМ_Тесты.Мокито().Обучение(Логи)
		.Когда("ПолучитьИсториюСобытий").Вернуть(ЖурналРегистрации);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Обработчик.ЗагрузитьИсториюСобытий(НачалоДня(Дата), КонецДня(Дата));
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Обработчик.ИсторияСобытий)
		.ИмеетДлину(1)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Реквизит("Дата")
					.Равно(ЗаписьЖурналаРегистрации.Дата)
				.Реквизит("Уровень")
					.Равно(Строка(ЗаписьЖурналаРегистрации.Уровень))
				.Реквизит("Событие")
					.Равно(ЗаписьЖурналаРегистрации.Событие)
				.Реквизит("ПредставлениеДанных")
					.Равно(Строка(Обработчик.Ссылка))
				.Реквизит("ИмяПользователя")
					.Равно(ЗаписьЖурналаРегистрации.ИмяПользователя)
				.Реквизит("ПредставлениеПриложения")
					.Равно(ЗаписьЖурналаРегистрации.ПредставлениеПриложения)
				.Реквизит("Комментарий")
					.Равно(ЗаписьЖурналаРегистрации.Комментарий)
				.Реквизит("КодСостояния")
					.Равно(ЗаписьЖурналаРегистрации.КодСостояния));

КонецПроцедуры

Процедура ЗагрузитьИсториюСобытийЗагружаетОбщиеДанныеИДанныеПоОбработчику() Экспорт
	
	// given
	Дата = ОМ_Тесты.ЮТест().Данные().СлучайнаяДата();
	Обработчик = ОМ_Тесты.ЮТест().Данные().КонструкторОбъекта(Справочники.ОбработчикиВнешнихЗапросов)
		.ФикцияОбязательныхПолей()
		.Записать(Истина, Истина);
	НеожидаемыйОбработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	
	ЖурналРегистрации = ЖурналРегистрации();
	ДобавитьОбработчикВЗаписьЖурналаРегистрации(ЖурналРегистрации, Дата, Обработчик.Ссылка);
	ДобавитьОбработчикВЗаписьЖурналаРегистрации(ЖурналРегистрации, Дата, НеожидаемыйОбработчик);
	ДобавитьОбработчикВЗаписьЖурналаРегистрации(ЖурналРегистрации, Дата, Неопределено);
	
	ОМ_Тесты.Мокито().Обучение(Логи)
		.Когда("ПолучитьИсториюСобытий").Вернуть(ЖурналРегистрации);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Обработчик.ЗагрузитьИсториюСобытий(НачалоДня(Дата), КонецДня(Дата));
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Обработчик.ИсторияСобытий)
		.ИмеетДлину(2)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Реквизит("ПредставлениеДанных").Равно(Строка(Обработчик.Ссылка)))
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Реквизит("ПредставлениеДанных").Пусто())
		.НеСодержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Реквизит("ПредставлениеДанных").Равно(Строка(НеожидаемыйОбработчик)));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЖурналРегистрации()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Дата");
	Результат.Колонки.Добавить("Уровень");
	Результат.Колонки.Добавить("Событие");
	Результат.Колонки.Добавить("Данные");
	Результат.Колонки.Добавить("ПредставлениеДанных");
	Результат.Колонки.Добавить("ИмяПользователя");
	Результат.Колонки.Добавить("ПредставлениеПриложения");
	Результат.Колонки.Добавить("Комментарий");
	Результат.Колонки.Добавить("КодСостояния");
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьОбработчикВЗаписьЖурналаРегистрации(ЖурналРегистрации, Дата, Обработчик)
	
	Результат = ЖурналРегистрации.Добавить();
	Результат.Дата = Дата;
	Результат.Уровень = УровеньЖурналаРегистрации.Информация;
	Результат.Событие = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Результат.Данные = Обработчик;
	Результат.ПредставлениеДанных = Строка(Результат.Данные);
	Результат.ИмяПользователя = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Результат.ПредставлениеПриложения = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Результат.Комментарий = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Результат.КодСостояния = ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(200, 500);

	Возврат Результат;
	
КонецФункции

#КонецОбласти
