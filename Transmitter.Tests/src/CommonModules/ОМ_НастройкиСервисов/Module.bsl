#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ВТранзакции()
			.ДобавитьТест("ОбработкаЗапросаВключенаВозвращаетУстановленноеЗначениеГитлабНастройки")
				.СПараметрами(Истина)
				.СПараметрами(Ложь)
			.ДобавитьТест("ОбработкаЗапросаВключенаВозвращаетУстановленноеЗначениеПользовательскойНастройки")
				.СПараметрами(Истина)
				.СПараметрами(Ложь)
			.ДобавитьТест("ПолучитьСтатусКакОтветСервисаВозвращаетЗначениеГитлабНастройки")
				.СПараметрами(Истина)
				.СПараметрами(Ложь)
			.ДобавитьТест("ПолучитьСтатусКакОтветСервисаВозвращаетЗначениеПользовательскойНастройки")
				.СПараметрами(Истина)
				.СПараметрами(Ложь)
			.ДобавитьТест("ПолучитьПользователяВнешнегоСервиса")
			.ДобавитьТест("ПолучитьПарольВнешнегоСервиса")
			.ДобавитьТест("ПолучитьТаймаутВнешнегоСервиса")
			.ДобавитьТест("ПолучитьИмяФайлаСхемыМаршрута")
			.ДобавитьТест("ПолучитьТокенГитлаб")
			.ДобавитьТест("ПолучитьТаймаутГитлаб")
			.ДобавитьТест("ПолучитьНастройкиСервисаОбработкиЗапросаГитлаб")
			.ДобавитьТест("УстановитьНастройкиСервисаОбработкиЗапросаГитлаб")
	;
	
КонецПроцедуры

Процедура ОбработкаЗапросаВключенаВозвращаетУстановленноеЗначениеГитлабНастройки(Знач Параметр) Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Параметр);
	
	// when
	Результат = НастройкиСервисов.ОбработкаЗапросаВключена(Метаданные.HTTPСервисы.GitLab);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Параметр);
	
КонецПроцедуры

Процедура ОбработкаЗапросаВключенаВозвращаетУстановленноеЗначениеПользовательскойНастройки(Знач Параметр) Экспорт
	
	// given
	Константы.ОбрабатыватьПользовательскийЗапрос.Установить(Параметр);
	
	// when
	Результат = НастройкиСервисов.ОбработкаЗапросаВключена(Метаданные.HTTPСервисы.Custom);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Параметр);
	
КонецПроцедуры

Процедура ПолучитьСтатусКакОтветСервисаВозвращаетЗначениеГитлабНастройки(Знач Режим) Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Режим);
	
	// when
	Результат = НастройкиСервисов.ПолучитьСтатусКакОтветСервиса(Метаданные.HTTPСервисы.GitLab);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(200);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.Содержит("message")
		.Содержит(?(Режим, Логи.Сообщения().MESSAGE_ENABLED, Логи.Сообщения().MESSAGE_DISABLED));
		
КонецПроцедуры

Процедура ПолучитьСтатусКакОтветСервисаВозвращаетЗначениеПользовательскойНастройки(Знач Режим) Экспорт
	
	// given
	Константы.ОбрабатыватьПользовательскийЗапрос.Установить(Режим);
	
	// when
	Результат = НастройкиСервисов.ПолучитьСтатусКакОтветСервиса(Метаданные.HTTPСервисы.Custom);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(200);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.Содержит("message")
		.Содержит(?(Режим, Логи.Сообщения().MESSAGE_ENABLED, Логи.Сообщения().MESSAGE_DISABLED));
		
КонецПроцедуры

Процедура ПолучитьПользователяВнешнегоСервиса() Экспорт
	
	// given
	Пользователь = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256);
	Константы.ПользовательВнешнегоСервиса.Установить(Пользователь);
	
	// when
	Результат = НастройкиСервисов.ПолучитьПользователяВнешнегоСервиса();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(Пользователь);
		
КонецПроцедуры

Процедура ПолучитьПарольВнешнегоСервиса() Экспорт
	
	// given
	Пароль = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256);
	Константы.ПарольВнешнегоСервиса.Установить(Пароль);
	
	// when
	Результат = НастройкиСервисов.ПолучитьПарольВнешнегоСервиса();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(Пароль);
		
КонецПроцедуры

Процедура ПолучитьТаймаутВнешнегоСервиса() Экспорт
	
	// given
	Таймаут = ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(0, 9999);
	Константы.ТаймаутВнешнегоСервиса.Установить(Таймаут);
	
	// when
	Результат = НастройкиСервисов.ПолучитьТаймаутВнешнегоСервиса();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Число")
		.Равно(Таймаут);
		
КонецПроцедуры

Процедура ПолучитьИмяФайлаСхемыМаршрута() Экспорт
	
	// given
	ИмяФайла = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50);
	Константы.ИмяФайлаСхемыМаршрута.Установить(ИмяФайла);
	
	// when
	Результат = НастройкиСервисов.ПолучитьИмяФайлаСхемыМаршрута();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(ИмяФайла);
		
КонецПроцедуры

Процедура ПолучитьТокенГитлаб() Экспорт
	
	// given
	Токен = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50);
	Константы.ТокенГитлаб.Установить(Токен);
	
	// when
	Результат = НастройкиСервисов.ПолучитьТокенГитлаб();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(Токен);
		
КонецПроцедуры

Процедура ПолучитьТаймаутГитлаб() Экспорт
	
	// given
	Таймаут = ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(0, 9999);
	Константы.ТаймаутГитлаб.Установить(Таймаут);
	
	// when
	Результат = НастройкиСервисов.ПолучитьТаймаутГитлаб();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Число")
		.Равно(Таймаут);
		
КонецПроцедуры

Процедура ПолучитьНастройкиСервисаОбработкиЗапросаГитлаб() Экспорт
	
	// given
	Ожидание = Заглушка();
	
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Ожидание.ОбрабатыватьГитлабЗапрос);
	Константы.ИмяФайлаСхемыМаршрута.Установить(Ожидание.ИмяФайлаСхемыМаршрута);
	Константы.ТокенГитлаб.Установить(Ожидание.ТокенГитлаб);
	Константы.ТаймаутГитлаб.Установить(Ожидание.ТаймаутГитлаб);
	Константы.ПользовательВнешнегоСервиса.Установить(Ожидание.ПользовательВнешнегоСервиса);
	Константы.ПарольВнешнегоСервиса.Установить(Ожидание.ПарольВнешнегоСервиса);
	Константы.ТаймаутВнешнегоСервиса.Установить(Ожидание.ТаймаутВнешнегоСервиса);
	
	// when
	Результат = НастройкиСервисов.ПолучитьНастройкиСервисаОбработкиЗапросаГитлаб();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ФиксированнаяСтруктура")
		.ИмеетСвойстваРавные(Ожидание);

КонецПроцедуры

Процедура УстановитьНастройкиСервисаОбработкиЗапросаГитлаб() Экспорт
	
	// given
	Ожидание = Заглушка();
	
	// when
	НастройкиСервисов.УстановитьНастройкиСервисаОбработкиЗапросаГитлаб(Ожидание);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ОбрабатыватьГитлабЗапрос.Получить())
		.Равно(Ожидание.ОбрабатыватьГитлабЗапрос);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ИмяФайлаСхемыМаршрута.Получить())
		.Равно(Ожидание.ИмяФайлаСхемыМаршрута);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ТокенГитлаб.Получить())
		.Равно(Ожидание.ТокенГитлаб);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ТаймаутГитлаб.Получить())
		.Равно(Ожидание.ТаймаутГитлаб);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ПользовательВнешнегоСервиса.Получить())
		.Равно(Ожидание.ПользовательВнешнегоСервиса);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ПарольВнешнегоСервиса.Получить())
		.Равно(Ожидание.ПарольВнешнегоСервиса);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ТаймаутВнешнегоСервиса.Получить())
		.Равно(Ожидание.ТаймаутВнешнегоСервиса);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Заглушка()
	
	Результат = Новый Структура;
	Результат.Вставить("ОбрабатыватьГитлабЗапрос", ОМ_Тесты.ЮТест().Данные().СлучайноеБулево());
	Результат.Вставить("ИмяФайлаСхемыМаршрута", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50));
	Результат.Вставить("ТокенГитлаб", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50));
	Результат.Вставить("ТаймаутГитлаб", ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(0, 9999));
	Результат.Вставить("ПользовательВнешнегоСервиса", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256));
	Результат.Вставить("ПарольВнешнегоСервиса", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256));
	Результат.Вставить("ТаймаутВнешнегоСервиса", ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(0, 9999));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
