#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ВТранзакции()
			.ДобавитьТест("ОбработкаЗапросаВключенаВозвращаетУстановленноеЗначениеГитлабНастройки")
				.СПараметрами(Истина)
				.СПараметрами(Ложь)
			.ДобавитьТест("ОбработкаЗапросаВключенаВозвращаетУстановленноеЗначениеПользовательскойНастройки")
				.СПараметрами(Истина)
				.СПараметрами(Ложь)
			.ДобавитьТест("ПолучитьСтатусКакОтветСервисаВозвращаетВключеноДляГитлабНастройки")
			.ДобавитьТест("ПолучитьСтатусКакОтветСервисаВозвращаетОтключеноДляГитлабНастройки")
			.ДобавитьТест("ПолучитьСтатусКакОтветСервисаВозвращаетВключеноДляПользовательскойНастройки")
			.ДобавитьТест("ПолучитьСтатусКакОтветСервисаВозвращаетОтключеноДляПользовательскойНастройки")
			.ДобавитьТест("ПолучитьГлобальныеНастройкиВнешнегоСервиса")
			.ДобавитьТест("ПолучитьИмяФайлаСхемыМаршрута")
			.ДобавитьТест("ПолучитьТокенГитлаб")
			.ДобавитьТест("ПолучитьТаймаутГитлаб")
			.ДобавитьТест("ПолучитьНастройкиСервисаОбработкиЗапросаГитлаб")
			.ДобавитьТест("УстановитьНастройкиСервисаОбработкиЗапросаГитлаб")
			.ДобавитьТест("ПолучитьНастройкиПараметровСоединенияКПолучателямПоУмолчанию")
			.ДобавитьТест("УстановитьНастройкиПараметровСоединенияКПолучателямПоУмолчанию")
	;
	
КонецПроцедуры

Процедура ОбработкаЗапросаВключенаВозвращаетУстановленноеЗначениеГитлабНастройки(Знач Параметр) Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Параметр);
	
	// when
	Результат = НастройкиСервисов.ОбработкаЗапросаВключена(Метаданные.HTTPСервисы.GitLab);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Параметр);
	
КонецПроцедуры

Процедура ОбработкаЗапросаВключенаВозвращаетУстановленноеЗначениеПользовательскойНастройки(Знач Параметр) Экспорт
	
	// given
	Константы.ОбрабатыватьПользовательскийЗапрос.Установить(Параметр);
	
	// when
	Результат = НастройкиСервисов.ОбработкаЗапросаВключена(Метаданные.HTTPСервисы.Custom);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Параметр);
	
КонецПроцедуры

Процедура ПолучитьСтатусКакОтветСервисаВозвращаетВключеноДляГитлабНастройки() Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Истина);
	
	ОжидаемоеСообщение = НСтр("ru = 'обработка запросов включена';en = 'request handler enabled'");
	
	// when
	Результат = НастройкиСервисов.ПолучитьСтатусКакОтветСервиса(Метаданные.HTTPСервисы.GitLab);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(200);
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.Содержит("message")
		.Содержит(ОжидаемоеСообщение);
	
КонецПроцедуры

Процедура ПолучитьСтатусКакОтветСервисаВозвращаетОтключеноДляГитлабНастройки() Экспорт
	
	// given
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Ложь);
	
	ОжидаемоеСообщение = НСтр("ru = 'обработка запросов отключена';en = 'request handler disabled'");
	
	// when
	Результат = НастройкиСервисов.ПолучитьСтатусКакОтветСервиса(Метаданные.HTTPСервисы.GitLab);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(200);
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.Содержит("message")
		.Содержит(ОжидаемоеСообщение);
		
КонецПроцедуры

Процедура ПолучитьСтатусКакОтветСервисаВозвращаетВключеноДляПользовательскойНастройки() Экспорт
	
	// given
	Константы.ОбрабатыватьПользовательскийЗапрос.Установить(Истина);
	
	ОжидаемоеСообщение = НСтр("ru = 'обработка запросов включена';en = 'request handler enabled'");
	
	// when
	Результат = НастройкиСервисов.ПолучитьСтатусКакОтветСервиса(Метаданные.HTTPСервисы.Custom);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(200);
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.Содержит("message")
		.Содержит(ОжидаемоеСообщение);
	
КонецПроцедуры

Процедура ПолучитьСтатусКакОтветСервисаВозвращаетОтключеноДляПользовательскойНастройки() Экспорт
	
	// given
	Константы.ОбрабатыватьПользовательскийЗапрос.Установить(Ложь);
	
	ОжидаемоеСообщение = НСтр("ru = 'обработка запросов отключена';en = 'request handler disabled'");
	
	// when
	Результат = НастройкиСервисов.ПолучитьСтатусКакОтветСервиса(Метаданные.HTTPСервисы.Custom);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(200);
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.Содержит("message")
		.Содержит(ОжидаемоеСообщение);
	
КонецПроцедуры

Процедура ПолучитьГлобальныеНастройкиВнешнегоСервиса() Экспорт
	
	// given
	Пользователь = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256);
	Константы.ПользовательВнешнегоСервиса.Установить(Пользователь);
	
	Пароль = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256);
	Константы.ПарольВнешнегоСервиса.Установить(Пароль);
	
	Таймаут = ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(0, 9999);
	Константы.ТаймаутВнешнегоСервиса.Установить(Таймаут);
	
	// when
	Результат = НастройкиСервисов.ПолучитьГлобальныеНастройкиВнешнегоСервиса();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Пользователь")
			.ИмеетТип("Строка")
			.Равно(Пользователь)
		.Свойство("Пароль")
			.ИмеетТип("Строка")
			.Равно(Пароль)
		.Свойство("Таймаут")
			.ИмеетТип("Число")
			.Равно(Таймаут);
	
КонецПроцедуры

Процедура ПолучитьИмяФайлаСхемыМаршрута() Экспорт
	
	// given
	ИмяФайла = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50);
	Константы.ИмяФайлаСхемыМаршрута.Установить(ИмяФайла);
	
	// when
	Результат = НастройкиСервисов.ПолучитьИмяФайлаСхемыМаршрута();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(ИмяФайла);
		
КонецПроцедуры

Процедура ПолучитьТокенГитлаб() Экспорт
	
	// given
	Токен = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50);
	Константы.ТокенГитлаб.Установить(Токен);
	
	// when
	Результат = НастройкиСервисов.ПолучитьТокенГитлаб();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(Токен);
		
КонецПроцедуры

Процедура ПолучитьТаймаутГитлаб() Экспорт
	
	// given
	Таймаут = ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(0, 9999);
	Константы.ТаймаутГитлаб.Установить(Таймаут);
	
	// when
	Результат = НастройкиСервисов.ПолучитьТаймаутГитлаб();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Число")
		.Равно(Таймаут);
		
КонецПроцедуры

Процедура ПолучитьНастройкиСервисаОбработкиЗапросаГитлаб() Экспорт
	
	// given
	Ожидание = Новый Структура;
	Ожидание.Вставить("ОбрабатыватьГитлабЗапрос", ОМ_Тесты.ЮТест().Данные().СлучайноеБулево());
	Ожидание.Вставить("ИмяФайлаСхемыМаршрута", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50));
	Ожидание.Вставить("ТокенГитлаб", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50));
	Ожидание.Вставить("ТаймаутГитлаб", ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(0, 9999));
	
	Константы.ОбрабатыватьГитлабЗапрос.Установить(Ожидание.ОбрабатыватьГитлабЗапрос);
	Константы.ИмяФайлаСхемыМаршрута.Установить(Ожидание.ИмяФайлаСхемыМаршрута);
	Константы.ТокенГитлаб.Установить(Ожидание.ТокенГитлаб);
	Константы.ТаймаутГитлаб.Установить(Ожидание.ТаймаутГитлаб);
	
	// when
	Результат = НастройкиСервисов.ПолучитьНастройкиСервисаОбработкиЗапросаГитлаб();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ФиксированнаяСтруктура")
		.ИмеетСвойстваРавные(Ожидание);

КонецПроцедуры

Процедура УстановитьНастройкиСервисаОбработкиЗапросаГитлаб() Экспорт
	
	// given
	Ожидание = Новый Структура;
	Ожидание.Вставить("ОбрабатыватьГитлабЗапрос", ОМ_Тесты.ЮТест().Данные().СлучайноеБулево());
	Ожидание.Вставить("ИмяФайлаСхемыМаршрута", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50));
	Ожидание.Вставить("ТокенГитлаб", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50));
	Ожидание.Вставить("ТаймаутГитлаб", ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(0, 9999));
	
	// when
	НастройкиСервисов.УстановитьНастройкиСервисаОбработкиЗапросаГитлаб(Ожидание);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ОбрабатыватьГитлабЗапрос.Получить())
		.Равно(Ожидание.ОбрабатыватьГитлабЗапрос);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ИмяФайлаСхемыМаршрута.Получить())
		.Равно(Ожидание.ИмяФайлаСхемыМаршрута);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ТокенГитлаб.Получить())
		.Равно(Ожидание.ТокенГитлаб);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ТаймаутГитлаб.Получить())
		.Равно(Ожидание.ТаймаутГитлаб);
		
КонецПроцедуры

Процедура ПолучитьНастройкиПараметровСоединенияКПолучателямПоУмолчанию() Экспорт
	
	// given
	Ожидание = Новый Структура;
	Ожидание.Вставить("ПользовательВнешнегоСервиса", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256));
	Ожидание.Вставить("ПарольВнешнегоСервиса", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256));
	Ожидание.Вставить("ТаймаутВнешнегоСервиса", ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(0, 9999));
	
	Константы.ПользовательВнешнегоСервиса.Установить(Ожидание.ПользовательВнешнегоСервиса);
	Константы.ПарольВнешнегоСервиса.Установить(Ожидание.ПарольВнешнегоСервиса);
	Константы.ТаймаутВнешнегоСервиса.Установить(Ожидание.ТаймаутВнешнегоСервиса);
	
	// when
	Результат = НастройкиСервисов.ПолучитьНастройкиПараметровСоединенияКПолучателямПоУмолчанию();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ФиксированнаяСтруктура")
		.ИмеетСвойстваРавные(Ожидание);
	
КонецПроцедуры

Процедура УстановитьНастройкиПараметровСоединенияКПолучателямПоУмолчанию() Экспорт
	
	// given
	Ожидание = Новый Структура;
	Ожидание.Вставить("ПользовательВнешнегоСервиса", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256));
	Ожидание.Вставить("ПарольВнешнегоСервиса", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256));
	Ожидание.Вставить("ТаймаутВнешнегоСервиса", ОМ_Тесты.ЮТест().Данные().СлучайноеЧисло(0, 9999));
	
	// when
	НастройкиСервисов.УстановитьНастройкиПараметровСоединенияКПолучателямПоУмолчанию(Ожидание);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ПользовательВнешнегоСервиса.Получить())
		.Равно(Ожидание.ПользовательВнешнегоСервиса);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ПарольВнешнегоСервиса.Получить())
		.Равно(Ожидание.ПарольВнешнегоСервиса);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Константы.ТаймаутВнешнегоСервиса.Получить())
		.Равно(Ожидание.ТаймаутВнешнегоСервиса);
	
КонецПроцедуры

#КонецОбласти
