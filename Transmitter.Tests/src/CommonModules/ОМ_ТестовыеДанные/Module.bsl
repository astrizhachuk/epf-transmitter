#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьИдентификаторКоммита() Экспорт
	
	Возврат ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(40, "", "abcdef1234567890");

КонецФункции

Функция ПолучитьТело(Знач ИмяФайла) Экспорт
	
	Результат = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	
	Возврат Результат.Прочитать();
	
КонецФункции

Функция ПолучитьФейковыйJSON() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Поле", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(40));
	
	Возврат КоннекторHTTP.ОбъектВJson(Результат);
	
КонецФункции

Функция ПолучитьФейковыйОбработчик() Экспорт
	
	Результат = Справочники.ОбработчикиВнешнихЗапросов.СоздатьЭлемент();
	Результат.УстановитьСсылкуНового(Справочники.ОбработчикиВнешнихЗапросов.ПолучитьСсылку());
	Результат = Результат.ПолучитьСсылкуНового();
	
	Возврат Результат;
	
КонецФункции

Функция JsonВОбъект(Знач Текст) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить( "ПрочитатьВСоответствие", Истина );
	Параметры.Вставить( "ИменаСвойствСоЗначениямиДата", "timestamp" );
		
	Возврат КоннекторHTTP.JsonВОбъект( Текст, , Параметры );
	
КонецФункции

Функция Десериализовать(Знач Текст) Экспорт
	
	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(Текст);

	Возврат СериализаторXDTO.ПрочитатьJSON(Чтение);
	
КонецФункции

Функция ПолучитьФейковыйВнешнийЗапрос(Данные) Экспорт
	
	Результат = Обработки.ВнешнийЗапрос.Создать();
	
	Заполнить(Результат, Данные);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИнформациюОбОшибке(Знач Текст) Экспорт
	
	Попытка
		ВызватьИсключение Текст;
	Исключение
		Возврат ИнформацияОбОшибке();
	КонецПопытки;
	
КонецФункции

#Область ВнешнийЗапрос

Функция ФейковоеСоединение(Знач АдресСервера = "", Знач Токен = "", Знач Таймаут = 5) Экспорт
	
	If IsBlankString(АдресСервера) Then
		АдресСервера = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(40, "http://");
	EndIf;
	
	If IsBlankString(Токен) Then
		Токен = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(50);
	EndIf;
	
	Результат = Новый Структура();
	Результат.Вставить("АдресСервера", АдресСервера);
	Результат.Вставить("Токен", Токен);
	Результат.Вставить("Таймаут", Таймаут);
	
	Возврат Результат;
	
КонецФункции

Функция КонечнаяТочка(Знач Имя, Знач Адрес, Знач Включено) Экспорт
	
	Результат = Новый Соответствие();
	Если Имя <> Неопределено Тогда
		Результат.Вставить("name", Имя);
	КонецЕсли;
	Результат.Вставить("url", Адрес);
	Результат.Вставить("enabled", Включено);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйКоммит(Знач НомерСтроки, Знач Идентификатор, Знач Дата, Знач Сообщение) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("НомерСтроки", НомерСтроки);
	Результат.Вставить("Идентификатор", Идентификатор);
	Результат.Вставить("Дата", Дата);
	Результат.Вставить("Заголовок", Сообщение);

	Возврат Результат;
	
КонецФункции

Функция СхемаМаршрутов(Знач НомерСтроки = Неопределено, Знач Идентификатор, Знач Представление, Знач Пользовательская) Экспорт
	
	Результат = Новый Структура();
	Если НомерСтроки <> Неопределено Тогда
		Результат.Вставить("НомерСтроки", НомерСтроки);
	КонецЕсли;
	Результат.Вставить("Идентификатор", Идентификатор);
	Результат.Вставить("Представление", Представление);
	Результат.Вставить("Пользовательская", Пользовательская);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДобавленныйФайл(Знач НомерСтроки, Знач Коммит, Знач Позиция) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("НомерСтроки", НомерСтроки);
	Результат.Вставить("Идентификатор", Коммит.Получить("id"));
	Результат.Вставить("ПутьКФайлу", Коммит.Получить("added")[Позиция]);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИзмененныйФайл(Знач НомерСтроки, Знач Коммит, Знач Позиция) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("НомерСтроки", НомерСтроки);
	Результат.Вставить("Идентификатор", Коммит.Получить("id"));
	Результат.Вставить("ПутьКФайлу", Коммит.Получить("modified")[Позиция]);
	
	Возврат Результат;
	
КонецФункции

Функция Маршрутизация(Знач ВебСервисы, Знач Файлы) Экспорт
	
	Результат = Новый Соответствие();
	Результат.Вставить("ws", ВебСервисы);
	Результат.Вставить("epf", Файлы);
	
	Возврат Результат;
	
КонецФункции

Функция МаршрутизацияJSON(Знач ВебСервисы, Знач Файлы) Экспорт
	
	Возврат КоннекторHTTP.ОбъектВJson(Маршрутизация(ВебСервисы, Файлы));
	
КонецФункции

Функция МаршрутизацияФайлаСДанными(Знач ПутьКФайлу, Знач Исключения = Неопределено) Экспорт
	
	Результат = Новый Соответствие();
	Результат.Вставить("name", ПутьКФайлу);
	Если Исключения <> Неопределено Then
		Результат.Вставить("exclude", Исключения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторКоммита(Знач Тест, Знач Позиция) Экспорт
	
	Возврат Тест.ДесериализованнаяСхема.Получить("commits")[Позиция].Получить("id");
	
КонецФункции

Функция ДатаВремяКоммита(Знач Тест, Знач Позиция) Экспорт

	Возврат Тест.ДесериализованнаяСхема.Получить("commits")[Позиция].Получить("timestamp");
	
КонецФункции

#КонецОбласти

#Область Файл

Функция ПолучитьОписаниеСлучайногоФайлаСДанными() Экспорт
	
	Возврат ПолучитьОписаниеФайла("Данные", "epf", "Путь/К/Файлу");

КонецФункции

Функция ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов() Экспорт
	
	Возврат ПолучитьОписаниеФайла(".ext-epf", "json");

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСлучайноеИмяФайла(ИмяФайла, Расширение, ДлинаИмени)
	
	Возврат ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(ДлинаИмени - 5, ИмяФайла + "-") + "." + Расширение;

КонецФункции

Функция ПолучитьОписаниеФайла(ИмяФайла, Расширение, ПутьКФайлу = "", ДлинаИмени = 50)
	
	Результат = Новый Структура();
	
	Результат.Вставить("ИмяФайла", ПолучитьСлучайноеИмяФайла(ИмяФайла, Расширение, ДлинаИмени));
	Результат.Вставить("ИмяФайлаISO_8859_1", СтрокиКлиентСервер.Конвертировать(Результат.ИмяФайла, "UTF-8", "ISO-8859-1"));	
	Результат.Вставить("ИмяФайлаEncoded", EncodeString(Результат.ИмяФайла, StringEncodingMethod.URLEncoding));
	If (IsBlankString(ПутьКФайлу)) Then
		Результат.Вставить("ПутьКФайлу", Результат.ИмяФайла);
	Else
		Результат.Вставить("ПутьКФайлу", ПутьКФайлу + "/" + Результат.ИмяФайла);
	EndIf;
	Результат.Вставить("ПутьКФайлуКодированный", EncodeString(Результат.ПутьКФайлу, StringEncodingMethod.URLEncoding));
	Результат.Вставить("Данные", "{""text"":""" + Результат.ПутьКФайлу + """}");
	Результат.Вставить("APIPath", "/api/v4/projects/.*/repository/files/"); //?	
	
	Возврат Результат;
	
КонецФункции

Процедура Заполнить(ФэйковыйЗапрос, Данные)

	ЗаполнитьЗначенияСвойств(ФэйковыйЗапрос, Данные);

	Если Данные.Свойство("Коммиты") Тогда	
		Для Каждого Коммит Из Данные.Коммиты Цикл
			НовыйКоммит = ФэйковыйЗапрос.Коммиты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйКоммит, Коммит);
		КонецЦикла;
	КонецЕсли;

	Если Данные.Свойство("ДобавленныеФайлы") Тогда
		Для Каждого ДобавленныйФайл Из Данные.ДобавленныеФайлы Цикл
			НовыйДобавленныйФайл = ФэйковыйЗапрос.ДобавленныеФайлы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйДобавленныйФайл, ДобавленныйФайл); 
		КонецЦикла;
	КонецЕсли;
	
	Если Данные.Свойство("ИзмененныеФайлы") Тогда
		Для Каждого ИзмененныйФайл Из Данные.ИзмененныеФайлы Цикл
			НовыйИзмененныйФайл = ФэйковыйЗапрос.ИзмененныеФайлы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйИзмененныйФайл, ИзмененныйФайл); 
		КонецЦикла;
	КонецЕсли;
	
	Если Данные.Свойство("СхемыМаршрутов") Тогда
		Для Каждого Маршрут Из Данные.СхемыМаршрутов Цикл
			НовыйМаршрут = ФэйковыйЗапрос.СхемыМаршрутов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйМаршрут, Маршрут); 
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти
