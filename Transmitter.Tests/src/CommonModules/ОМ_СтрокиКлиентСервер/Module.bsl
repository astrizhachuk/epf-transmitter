#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("Конвертировать", "Преобразовать UTF-8 в KOI8-R")
		.ДобавитьТест("КонвертироватьФорматПоУмолчанию", "Преобразовать KOI8-R в UTF-8 по-умолчанию")
		.ДобавитьТест("КонвертироватьСлучайнымОбразом", "Преобразовать случайный текст в KOI8-R в UTF-8 и обратно");
	
КонецПроцедуры

Процедура Конвертировать() Экспорт

	// given
	ИсходнаяСтрока = "тестовая строка";
	Ожидание = "я┌п╣я│я┌п╬п╡п╟я▐ я│я┌я─п╬п╨п╟";
	
	// when
	Результат = СтрокиКлиентСервер.Конвертировать(ИсходнаяСтрока, "UTF-8", "KOI8-R");

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Ожидание);

КонецПроцедуры

Процедура КонвертироватьФорматПоУмолчанию() Экспорт

	// given
	ИсходнаяСтрока = "я┌п╣я│я┌п╬п╡п╟я▐ я│я┌я─п╬п╨п╟";
	Ожидание = "тестовая строка";

	// when
	Результат = СтрокиКлиентСервер.Конвертировать(ИсходнаяСтрока, "KOI8-R");
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Ожидание);
	
КонецПроцедуры

Процедура КонвертироватьСлучайнымОбразом() Экспорт
	
	// given
	ИсходнаяСтрока = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(100);
	
	// when
	Результат = СтрокиКлиентСервер.Конвертировать(
		СтрокиКлиентСервер.Конвертировать(ИсходнаяСтрока, "UTF-8", "KOI8-R"),
		"KOI8-R", "UTF-8");

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(ИсходнаяСтрока);
	
КонецПроцедуры

#КонецОбласти
