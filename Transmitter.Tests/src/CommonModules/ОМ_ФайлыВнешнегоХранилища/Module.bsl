#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("ПолучитьИзХранилищаГитлабПриОтсутствииОписанийФайловВозвращаетПустоеЗначение")
		.ДобавитьТест("ПолучитьИзХранилищаГитлабПриОтсутствииИзмененныхФайловВозвращаетТолькоСхемы")
		.ДобавитьТест("ПолучитьИзХранилищаГитлабПриНаличииИзмененныхФайловВозвращаетИзмененныеФайлыИСхемы")
		.ДобавитьТест("ПолучитьИзХранилищаПриПустомИсточникеВозвращаетПустыеЗначенияСОписаниемОшибки")
		.ДобавитьТест("ПолучитьОшибкуЗагрузкиФайла")
		.ДобавитьТест("Сохранить")
		.ДобавитьТест("Восстановить")
		.ДобавитьТест("ВосстановитьВозвращаетНеопределеноПриОтсутствииДанных")
	;
	
КонецПроцедуры

Процедура ПолучитьИзХранилищаГитлабПриОтсутствииОписанийФайловВозвращаетПустоеЗначение() Экспорт
	
	// given
	Тест = Заглушка();
	
	// when
	Результат = ФайлыВнешнегоХранилища.ПолучитьИзХранилища(Новый Массив(),
					ПараметрыХранилища(Тест.ВнешнийЗапрос.ProjectId, Перечисления.ИсточникиЗапроса.Гитлаб));
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.НеЗаполнено();
		
КонецПроцедуры

Процедура ПолучитьИзХранилищаГитлабПриОтсутствииИзмененныхФайловВозвращаетТолькоСхемы() Экспорт
	
	// given
	Тест = Заглушка();
	
	ФайлСхемы = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов();
	
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
		ПолучитьОписаниеФайла(Тест, ФайлСхемы.ПутьКФайлу, 0, ""),
		ПолучитьОписаниеФайла(Тест, ФайлСхемы.ПутьКФайлу, 1, ""),
		ПолучитьОписаниеФайла(Тест, ФайлСхемы.ПутьКФайлу, 2, ""));
	
	ОМ_Тесты.Мокито().Обучение(КоннекторHTTP)
		.Когда("Get")
			.Вернуть(Ответ(200, ФайлСхемы));
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = ФайлыВнешнегоХранилища.ПолучитьИзХранилища(Файлы,
					ПараметрыХранилища(Тест.ВнешнийЗапрос.ProjectId, Перечисления.ИсточникиЗапроса.Гитлаб));
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(3)
		.Свойство("[0].RAWFilePath")
			.НеРавно(Файлы[0].RAWFilePath)
		.Свойство("[0].ДвоичныеДанные")
			.НеРавно(Файлы[0].ДвоичныеДанные);

	СодержитЭлемент(Результат, Тест, ФайлСхемы, 0, "");
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 1, "");
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 2, "");
	
КонецПроцедуры

Процедура ПолучитьИзХранилищаГитлабПриНаличииИзмененныхФайловВозвращаетИзмененныеФайлыИСхемы() Экспорт
	
	// given
	Тест = Заглушка();

	ФайлСхемы = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов();
	
	Файл1 = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Файл2 = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
		ПолучитьОписаниеФайла(Тест, Файл1.ПутьКФайлу, 0, "modified"),
		ПолучитьОписаниеФайла(Тест, Файл2.ПутьКФайлу, 1, "modified"),
		ПолучитьОписаниеФайла(Тест, ФайлСхемы.ПутьКФайлу, 0, ""),
		ПолучитьОписаниеФайла(Тест, ФайлСхемы.ПутьКФайлу, 1, ""),
		ПолучитьОписаниеФайла(Тест, ФайлСхемы.ПутьКФайлу, 2, ""));
	
	ОМ_Тесты.Мокито().Обучение(КоннекторHTTP)
		.Когда("Get", АдресСодержитСтрокуПоШаблону(Файл1.ИмяФайлаEncoded)).Вернуть(Ответ(200, Файл1))
		.Когда("Get", АдресСодержитСтрокуПоШаблону(Файл2.ИмяФайлаEncoded)).Вернуть(Ответ(200, Файл2))
		.Когда("Get", АдресСодержитСтрокуПоШаблону(ФайлСхемы.ИмяФайлаEncoded)).Вернуть(Ответ(200, ФайлСхемы));
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = ФайлыВнешнегоХранилища.ПолучитьИзХранилища(Файлы,
					ПараметрыХранилища(Тест.ВнешнийЗапрос.ProjectId, Перечисления.ИсточникиЗапроса.Гитлаб));
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(5)
		.Свойство("[0].RAWFilePath")
			.НеРавно(Файлы[0].RAWFilePath)
		.Свойство("[0].ДвоичныеДанные")
			.НеРавно(Файлы[0].ДвоичныеДанные);
		
	СодержитЭлемент(Результат, Тест, Файл1, 0, "modified");
	СодержитЭлемент(Результат, Тест, Файл2, 1, "modified");
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 0, "");
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 1, "");
	СодержитЭлемент(Результат, Тест, ФайлСхемы, 2, "");

КонецПроцедуры

Процедура ПолучитьИзХранилищаПриПустомИсточникеВозвращаетПустыеЗначенияСОписаниемОшибки() Экспорт
	
	// given
	Тест = Заглушка();
	
	ФайлСхемы = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов();
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
		ПолучитьОписаниеФайла(Тест, Файл.ПутьКФайлу, 0, "modified"),
		ПолучитьОписаниеФайла(Тест, ФайлСхемы.ПутьКФайлу, 0, ""));
	
	// when
	Результат = ФайлыВнешнегоХранилища.ПолучитьИзХранилища(Файлы,
					ПараметрыХранилища(Тест.ВнешнийЗапрос.ProjectId, Перечисления.ИсточникиЗапроса.ПустаяСсылка()));
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(2)
		.КаждыйЭлементСоответствуетПредикату(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("ДвоичныеДанные").Пусто()
				.Свойство("RAWFilePath").Пусто()
				.Свойство("ИнформацияОбОшибке.Описание")
					.Содержит(Логи.Сообщения().NO_RAWPATH));
		
КонецПроцедуры

Процедура ПолучитьОшибкуЗагрузкиФайла() Экспорт
	
	// given
	ТекстОшибки = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Адрес = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	// when
	Результат = ФайлыВнешнегоХранилища.ПолучитьОшибкуЗагрузкиФайла(ТекстОшибки, Адрес);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("ИнформацияОбОшибке"))
		.Свойство("Описание")
			.СодержитСтрокуПоШаблону("^(Ошибка загрузки файла|File download error): URL: " + Адрес + ": (Описание ошибки|Error description): " + ТекстОшибки);

КонецПроцедуры

Процедура Сохранить() Экспорт
	
	// given
	Тест = Заглушка();
	
	ФайлСхемы = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов();
	
	ФэйковыйОбработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ПолучитьОписаниеФайла(Тест, ФайлСхемы.ПутьКФайлу, 0, ""));
	
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеФайлы)
		.Когда("ЗаписатьДанные").Пропустить();
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	ФайлыВнешнегоХранилища.Сохранить(ФэйковыйОбработчик, Идентификатор, Файлы);
	
	Результат = ОМ_Тесты.Мокито()
		.Проверить(РегистрыСведений.ВнешниеФайлы)
			.Вызовы("ЗаписатьДанные");
			
	// then
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат[0].Параметры[0])
			.Равно(ФэйковыйОбработчик);
	
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат[0].Параметры[1])
			.Равно(Идентификатор);
			
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат[0].Параметры[2])
			.ИмеетТип("Массив")
			.Свойство("[0]")
				.ИмеетСвойстваРавные(Файлы[0]);
	
КонецПроцедуры

Процедура Восстановить() Экспорт
	
	// given
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	Данные = ОМ_Тесты.Мокито().МассивПараметров(Новый Структура("Ключ", ПолучитьДвоичныеДанныеИзСтроки("что-то")));
	
	ОМ_Тесты.Мокито()
		.Обучение(РегистрыСведений.ВнешниеФайлы)
			.Когда("НайтиДанные").Вернуть(Данные);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = ФайлыВнешнегоХранилища.Восстановить(ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(), Идентификатор);
	
	// then
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат)
			.ИмеетТип("Массив")
			.Заполнено()
			.ИмеетДлину(1)
			.Свойство("[0].Ключ")
				.Равно(Данные[0].Ключ);
	
КонецПроцедуры

Процедура ВосстановитьВозвращаетНеопределеноПриОтсутствииДанных() Экспорт
	
	// given
	
	// when
	Результат = ФайлыВнешнегоХранилища.Восстановить(Неопределено, Неопределено);
	
	// then
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(Результат)
			.ЭтоНеопределено();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Заглушка()
	
	Результат = Новый Структура();
	Результат.Вставить("Схема", ОМ_ТестовыеДанные.ПолучитьТело(ОМ_Тесты.ЮТНастройкиВыполнения().КаталогПроекта() + "/test/requests/push-repo1-req1.json"));
	Результат.Вставить("ДесериализованнаяСхема", ОМ_ТестовыеДанные.JsonВОбъект(Результат.Схема));
	
	ВнешнийЗапрос = Новый Структура();
	ВнешнийЗапрос.Вставить("ProjectId", Строка(Результат.ДесериализованнаяСхема.Получить("project").Получить("id")));
	
	Коммиты = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.НовыйКоммит(1, ИдентификаторКоммита(Результат, 0), ДатаВремяКоммита(Результат, 0), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)),
		ОМ_ТестовыеДанные.НовыйКоммит(2, ИдентификаторКоммита(Результат, 1), ДатаВремяКоммита(Результат, 1), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)),
		ОМ_ТестовыеДанные.НовыйКоммит(3, ИдентификаторКоммита(Результат, 2), ДатаВремяКоммита(Результат, 2), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)));
	ВнешнийЗапрос.Вставить("Коммиты", Коммиты);
	
	Результат.Вставить("ВнешнийЗапрос", ВнешнийЗапрос);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОписаниеФайла(Знач Тест, Знач ПутьКФайлу, Знач Позиция, Действие)
	
	Результат = Новый Структура();
	Результат.Вставить( "RAWFilePath", "" );
	Результат.Вставить( "ИмяФайла", "" );
	Результат.Вставить( "ПутьКФайлу", ПутьКФайлу );
	Результат.Вставить( "ДвоичныеДанные", Неопределено );
	Результат.Вставить( "Действие", Действие );
	Результат.Вставить( "Дата", Тест.ВнешнийЗапрос.Коммиты[Позиция].Дата );
	Результат.Вставить( "Идентификатор", Тест.ВнешнийЗапрос.Коммиты[Позиция].Идентификатор );
	Результат.Вставить( "ИнформацияОбОшибке", Неопределено );
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыХранилища(Знач Проект, Знач Сервис)
	
	Результат = Новый Структура();
	Результат.Вставить( "Сервис", Сервис );
	Результат.Вставить( "Проект", Проект );
	Результат.Вставить( "ПараметрыСоединения", Новый Структура("АдресСервера, Токен, Таймаут", "", "", 0) );
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторКоммита(Знач Тест, Знач Позиция)
	
	Возврат ОМ_ТестовыеДанные.ИдентификаторКоммита(Тест, Позиция);
	
КонецФункции

Функция ДатаВремяКоммита(Знач Тест, Знач Позиция)

	Возврат ОМ_ТестовыеДанные.ДатаВремяКоммита(Тест, Позиция);
	
КонецФункции

Функция ПолучитьПутьКИсходномуФайлу(Знач Проект, Знач Коммит, Знач ИмяФайла)
	
	Возврат "/api/v4/projects/" + Проект + "/repository/files/" + ИмяФайла + "/raw?ref=" + Коммит;
	
КонецФункции

Функция АдресСодержитСтрокуПоШаблону(Шаблон)
	
	Возврат ОМ_Тесты.Мокито().МассивПараметров(ОМ_Тесты.ЮТест().Предикат().СодержитСтрокуПоШаблону(Шаблон).Получить());
	
КонецФункции

Функция Ответ(Знач КодСостояния, Знач Файл)

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-Gitlab-File-Name", Файл.ИмяФайла);
	
	Возврат Новый Структура("КодСостояния, Заголовки, Тело", КодСостояния, Заголовки, ПолучитьДвоичныеДанныеИзСтроки(Файл.Данные));
	
КонецФункции

Процедура СодержитЭлемент(Результат, Тест, Файл, ПозицияВКоммитах, Действие)
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("RAWFilePath")
					.Равно(ПолучитьПутьКИсходномуФайлу(
						Тест.ВнешнийЗапрос.ProjectId, Тест.ВнешнийЗапрос.Коммиты[ПозицияВКоммитах].Идентификатор, Файл.ПутьКФайлуКодированный))
				.Свойство("ИмяФайла")
					.Равно(Файл.ИмяФайла)
				.Свойство("ПутьКФайлу")
					.Равно(Файл.ПутьКФайлу)
				.Свойство("Идентификатор")
					.Равно(Тест.ВнешнийЗапрос.Коммиты[ПозицияВКоммитах].Идентификатор)
				.Свойство("Дата")
					.Равно(Тест.ВнешнийЗапрос.Коммиты[ПозицияВКоммитах].Дата)
				.Свойство("Действие")
					.Равно(Действие)
				.Свойство("ДвоичныеДанные")
					.Равно(ПолучитьДвоичныеДанныеИзСтроки(Файл.Данные))
				.Получить())
				
КонецПроцедуры

#КонецОбласти
