#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("События")
		.ДобавитьТест("ПредставленияСобытий")
		.ДобавитьТест("Сообщения")
		.ДобавитьТест("КонтекстОтветаСервиса")
		.ДобавитьТест("КонтекстОбработкиСобытия")
		.ДобавитьТест("КонтекстОбработкиФайла")
		.ДобавитьТест("ИнформацияБезДополнительныхПараметров")
		.ДобавитьТест("ИнформацияСПустойСтруктуройПараметров")
		.ДобавитьТест("ИнформацияСКонтекстомОбработкиСобытия")
		.ДобавитьТест("ИнформацияСКонтекстомОбработкиФайла")
		.ДобавитьТест("ИнформацияСКонтекстомОтветаСервиса")
			.СПараметрами(200)
			.СПараметрами(401)
			.СПараметрами(404)
			.СПараметрами(423)
			.СПараметрами(400)
			.СПараметрами(500)
		.ДобавитьТест("ИнформацияЗаписываетСобытиеСВернымУровнем")
		.ДобавитьТест("ИнформацияСКонтекстомОтветаСервисаЗаписываетМетаданные")
		.ДобавитьТест("ПредупреждениеЗаписываетСобытиеСВернымУровнем")
		.ДобавитьТест("ОшибкаЗаписываетСобытиеСВернымУровнем")
		.ДобавитьТест("ПолучитьИсториюСобытийФильтруетПоСобытию")
		.ДобавитьТест("ПолучитьИсториюСобытийЗаполняетКодСостояния");
	
КонецПроцедуры

Процедура События() Экспорт
	
	// given
	
	// when
	Результат = Логи.События();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Заполнено();
	
КонецПроцедуры

Процедура ПредставленияСобытий() Экспорт
	
	// given
	
	// when
	Результат = Логи.ПредставленияСобытий();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.Заполнено()
		.Свойство("[0]")
			.ИмеетТип("Строка");
	
КонецПроцедуры

Процедура Сообщения() Экспорт
	
	// given
	
	// when
	Результат = Логи.Сообщения();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура");
	
КонецПроцедуры

Процедура КонтекстОтветаСервиса() Экспорт
	
	// given
	Ответ = Новый HTTPСервисОтвет(200);
	МетаданныеСервиса = Метаданные.Справочники.ОбработчикиВнешнихЗапросов;
	
	// when
	Результат = Логи.КонтекстОтветаСервиса(Ответ, МетаданныеСервиса);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.ИмеетСвойство("Ответ", Ответ)
		.ИмеетСвойство("МетаданныеСервиса", МетаданныеСервиса);
	
КонецПроцедуры

Процедура КонтекстОбработкиСобытия() Экспорт
	
	// given
	Объект = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	КлючСобытия = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	// when
	Результат = Логи.КонтекстОбработкиСобытия(Объект, КлючСобытия);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.ИмеетСвойство("Объект", Объект)
		.ИмеетСвойство("КлючСобытия", КлючСобытия);
	
КонецПроцедуры

Процедура КонтекстОбработкиФайла() Экспорт
	
	// given
	Объект = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	КлючСобытия = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	ХешКоммита = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	ИмяФайла = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	// when
	Результат = Логи.КонтекстОбработкиФайла(Объект, КлючСобытия, ХешКоммита, ИмяФайла);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.ИмеетСвойство("Объект", Объект)
		.ИмеетСвойство("КлючСобытия", КлючСобытия)
		.ИмеетСвойство("ХешКоммита", ХешКоммита)
		.ИмеетСвойство("ИмяФайла", ИмяФайла);
	
КонецПроцедуры

Процедура ИнформацияБезДополнительныхПараметров() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Параметры = Новый Структура("Объект, КлючСобытия, Ответ");
	
	// when
	Результат = Логи.Информация(Событие, Сообщение, Параметры);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Сообщение);
	
КонецПроцедуры

Процедура ИнформацияСПустойСтруктуройПараметров() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Параметры = Новый Структура;
	
	// when
	Результат = Логи.Информация(Событие, Сообщение, Параметры);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Сообщение);
	
КонецПроцедуры

Процедура ИнформацияСКонтекстомОбработкиСобытия() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	КлючСобытия = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Параметры = Новый Структура;
	Параметры.Вставить("Объект", ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик());
	Параметры.Вставить("КлючСобытия", КлючСобытия);
	Параметры.Вставить("Ответ", Неопределено);
	
	// when
	Результат = Логи.Информация(Событие, Сообщение, Параметры);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит("[ " + КлючСобытия + " ]")
		.Содержит(Сообщение)
		.НеРавно(Сообщение);
	
КонецПроцедуры

Процедура ИнформацияСКонтекстомОбработкиФайла() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Объект = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	КлючСобытия = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	ХешКоммита = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	ИмяФайла = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Объект", Объект);
	Параметры.Вставить("КлючСобытия", КлючСобытия);
	Параметры.Вставить("ХешКоммита", ХешКоммита);
	Параметры.Вставить("ИмяФайла", ИмяФайла);
	
	Разделитель = ПараметрыСеанса.РазделительСообщений;
	ОжидаемыйРезультат = СтрШаблон("[ %1 ]%2%3%2%4%2%5",
		КлючСобытия,
		Разделитель,
		ХешКоммита,
		ИмяФайла,
		Сообщение);
	
	// when
	Результат = Логи.Информация(Событие, Сообщение, Параметры);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат).Равно(ОжидаемыйРезультат);
	
КонецПроцедуры

Процедура ИнформацияСКонтекстомОтветаСервиса(Знач КодСостояния) Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	МетаданныеСервиса = Метаданные.HTTPСервисы.GitLab;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ответ", Ответ);
	Параметры.Вставить("МетаданныеСервиса", МетаданныеСервиса);

	Разделитель = ПараметрыСеанса.РазделительСообщений;
	ОжидаемыйРезультат = СтрШаблон("%1%2%3%2%4",
		НСтр("ru = 'Код состояния';en = 'Status code'"),
		Разделитель,
		КодСостояния,
		Сообщение);

	// when
	Результат = Логи.Информация(Событие, Сообщение, Параметры);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(ОжидаемыйРезультат);
	
КонецПроцедуры

Процедура ИнформацияСКонтекстомОтветаСервисаЗаписываетМетаданные() Экспорт
	
	// given
	Событие = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Ответ = Новый HTTPСервисОтвет(200);
	МетаданныеСервиса = Метаданные.HTTPСервисы.GitLab;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ответ", Ответ);
	Параметры.Вставить("МетаданныеСервиса", МетаданныеСервиса);
	
	ОМ_Тесты.Мокито().Обучение(Логи)
		.Наблюдать("ЗаписатьВЖурналРегистрации")
		.Прогон();
	
	// when
	Логи.Информация(Событие, Сообщение, Параметры);
	
	// then
	Вызовы = ОМ_Тесты.Мокито()
		.Проверить(Логи)
		.Вызовы("ЗаписатьВЖурналРегистрации");
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Вызовы.Количество()).Равно(1);
	ОМ_Тесты.ЮТест().ОжидаетЧто(Вызовы[0].Параметры[2]).Равно(МетаданныеСервиса);
	
КонецПроцедуры

Процедура ИнформацияЗаписываетСобытиеСВернымУровнем() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Параметры = Новый Структура("Объект, КлючСобытия, Ответ");
	
	ОМ_Тесты.Мокито().Обучение(Логи)
		.Наблюдать("ЗаписатьВЖурналРегистрации")
		.Прогон();
	
	// when
	Логи.Информация(Событие, Сообщение, Параметры);
	
	// then
	Вызовы = ОМ_Тесты.Мокито()
		.Проверить(Логи)
		.Вызовы("ЗаписатьВЖурналРегистрации");
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Вызовы.Количество()).Равно(1);
	ОМ_Тесты.ЮТест().ОжидаетЧто(Вызовы[0].Параметры[1]).Равно(УровеньЖурналаРегистрации.Информация);

КонецПроцедуры

Процедура ПредупреждениеЗаписываетСобытиеСВернымУровнем() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Параметры = Новый Структура("Объект, КлючСобытия, Ответ");
	
	ОМ_Тесты.Мокито().Обучение(Логи)
		.Наблюдать("ЗаписатьВЖурналРегистрации")
		.Прогон();
	
	// when
	Логи.Предупреждение(Событие, Сообщение, Параметры);
	
	// then
	Вызовы = ОМ_Тесты.Мокито()
		.Проверить(Логи)
		.Вызовы("ЗаписатьВЖурналРегистрации");
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Вызовы.Количество()).Равно(1);
	ОМ_Тесты.ЮТест().ОжидаетЧто(Вызовы[0].Параметры[1]).Равно(УровеньЖурналаРегистрации.Предупреждение);

КонецПроцедуры

Процедура ОшибкаЗаписываетСобытиеСВернымУровнем() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Параметры = Новый Структура("Объект, КлючСобытия, Ответ");
	
	ОМ_Тесты.Мокито().Обучение(Логи)
		.Наблюдать("ЗаписатьВЖурналРегистрации")
		.Прогон();
	
	// when
	Логи.Ошибка(Событие, Сообщение, Параметры);
	
	// then
	Вызовы = ОМ_Тесты.Мокито()
		.Проверить(Логи)
		.Вызовы("ЗаписатьВЖурналРегистрации");
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Вызовы.Количество()).Равно(1);
	ОМ_Тесты.ЮТест().ОжидаетЧто(Вызовы[0].Параметры[1]).Равно(УровеньЖурналаРегистрации.Ошибка);

КонецПроцедуры

Процедура ПолучитьИсториюСобытийФильтруетПоСобытию() Экспорт
	
	// given
	ИскомоеСобытие = "Нужное.Событие";
	СобытияДляОтбора = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ИскомоеСобытие);
	
	// Создаем "сырые" данные, которые якобы вернулись из журнала регистрации
	ДанныеЖурнала = Новый ТаблицаЗначений;
	ДанныеЖурнала.Колонки.Добавить("Событие", Новый ОписаниеТипов("Строка"));
	ДанныеЖурнала.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	
	// Добавляем две записи: одну с нужным событием, другую с посторонним
	ДанныеЖурнала.Добавить().Событие = ИскомоеСобытие;
	ДанныеЖурнала.Добавить().Событие = "Постороннее.Событие";
	
	ОМ_Тесты.Мокито().Обучение(Логи)
		.Когда("ПолучитьДанныеЖурналаРегистрации")
		.Вернуть(ДанныеЖурнала)
		.Прогон();
	
	// when
	Результат = Логи.ПолучитьИсториюСобытий(СобытияДляОтбора, Новый Структура());
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(1); // Ожидаем, что вернется только одна, отфильтрованная запись
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат[0].Событие).Равно(ИскомоеСобытие);

КонецПроцедуры

Процедура ПолучитьИсториюСобытийЗаполняетКодСостояния() Экспорт
	
	// given
	КодСостояния = 200;
	Событие = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	События = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(Событие);
	КомментарийБезКодаСостояния = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
		
	// Формируем комментарий вручную, чтобы тест проверял именно логику парсинга,
	// а не зависел от логики формирования строки в другом методе.
	Разделитель = ПараметрыСеанса.РазделительСообщений;
	ПолныйКомментарий = СтрШаблон("%1%2%3%2%4", "Код состояния", Разделитель, КодСостояния, КомментарийБезКодаСостояния);
		
	// Создаем "сырые" данные, которые якобы вернулись из журнала регистрации
	ДанныеЖурнала = Новый ТаблицаЗначений;
	ДанныеЖурнала.Колонки.Добавить("Событие", Новый ОписаниеТипов("Строка"));
	ДанныеЖурнала.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = ДанныеЖурнала.Добавить();
	НоваяСтрока.Событие = Событие;
	НоваяСтрока.Комментарий = ПолныйКомментарий;
	
	ОМ_Тесты.Мокито().Обучение(Логи)
		.Когда("ПолучитьДанныеЖурналаРегистрации")
		.Вернуть(ДанныеЖурнала)
		.Прогон();
	
	// when
	Результат = Логи.ПолучитьИсториюСобытий(События, Новый Структура());
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(1)
		.ИмеетСвойство("[0].Комментарий", КомментарийБезКодаСостояния)
		.Свойство("[0].КодСостояния")
			.ИмеетТип("Число")
			.Равно(КодСостояния);

КонецПроцедуры

#КонецОбласти
