#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("События")
		.ДобавитьТест("ПредставленияСобытий")
		.ДобавитьТест("Сообщения")
		.ДобавитьТест("Параметры")
			.СПараметрами()
			.СПараметрами("")
			.СПараметрами("", Неопределено)
			.СПараметрами("", Неопределено, Неопределено)
			.СПараметрами("23", , Неопределено)
			.СПараметрами("пар1", "пар2")
			.СПараметрами("пар1", "пар2", "пар3")
		.ДобавитьТест("ИнформацияПриПередачеСобытияСообщения")
		.ДобавитьТест("ИнформацияПриПередачеСобытияСообщенияИдентификатора")
		.ДобавитьТест("ИнформацияПриПередачеСобытияСообщенияОбъекта")
		.ДобавитьТест("ИнформацияПриПередачеСобытияСообщенияИдентификатораОтветаБезТелаСообщения")
			.СПараметрами(200)
			.СПараметрами(401)
			.СПараметрами(404)
			.СПараметрами(423)
			.СПараметрами(400)
			.СПараметрами(500)
		.ДобавитьТест("ОшибкаПриПередачеСобытияСообщения")
		.ДобавитьТест("ОшибкаПриПередачеСобытияСообщенияИдентификатора")
		.ДобавитьТест("ОшибкаПриПередачеСобытияСообщенияОбъекта")
		.ДобавитьТест("ОшибкаПриПередачеСобытияСообщенияИдентификатораОтветаБезТелаСообщения")
			.СПараметрами(200)
			.СПараметрами(401)
			.СПараметрами(404)
			.СПараметрами(423)
			.СПараметрами(400)
			.СПараметрами(500)
		.ДобавитьТест("ПолучитьИсториюСобытий")
		.ДобавитьТест("ПолучитьИсториюСобытийЗаполняетКодСостояния");
	
КонецПроцедуры

Процедура События() Экспорт
	
	// given
	
	// when
	Результат = Логи.События();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.ИмеетДлину(2);
	
КонецПроцедуры

Процедура ПредставленияСобытий() Экспорт
	
	// given
	
	// when
	Результат = Логи.ПредставленияСобытий();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(2)
		.Содержит(Логи.События().ВебСервис)
		.Свойство("[0]")
			.ИмеетТип("Строка");
	
КонецПроцедуры

Процедура Сообщения() Экспорт
	
	// given
	
	// when
	Результат = Логи.Сообщения();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура");
	
КонецПроцедуры

Процедура Параметры(Знач Параметр1 = "", Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено) Экспорт
	
	// given
	
	// when
	Результат = Логи.Параметры(Параметр1, Параметр2, Параметр3);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Идентификатор")
			.ИмеетТип("Строка")
			.Равно(Параметр1)
		.Свойство("Объект")
			.Равно(Параметр2)
		.Свойство("Ответ")
			.Равно(Параметр3);
	
КонецПроцедуры

Процедура ИнформацияПриПередачеСобытияСообщения() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	// when
	Результат = Логи.Информация(Событие, Сообщение);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(Сообщение);
	
КонецПроцедуры

Процедура ИнформацияПриПередачеСобытияСообщенияИдентификатора() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Идентификатор", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	
	// when
	Результат = Логи.Информация(Событие, Сообщение, Дополнительно);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит("[ " + Дополнительно.Идентификатор + " ]")
		.Содержит(Сообщение)
		.НеРавно(Сообщение);
	
КонецПроцедуры

Процедура ИнформацияПриПередачеСобытияСообщенияОбъекта() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Объект", ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик());
	
	// when
	Результат = Логи.Информация(Событие, Сообщение, Дополнительно);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Сообщение);
	
КонецПроцедуры

Процедура ИнформацияПриПередачеСобытияСообщенияИдентификатораОтветаБезТелаСообщения(Знач КодСостояния) Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Идентификатор", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	Дополнительно.Вставить("Ответ", Новый HTTPСервисОтвет(КодСостояния));
	
	// when
	Результат = Логи.Информация(Событие, Сообщение, Дополнительно);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит(Сообщение)
		.Содержит("[ " + Дополнительно.Идентификатор + " ]")
		.Содержит(НСтр("ru = 'код состояния';en = 'status code'") + ": ")
		.Содержит(КодСостояния);
	
КонецПроцедуры

Процедура ОшибкаПриПередачеСобытияСообщения() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	// when
	Результат = Логи.Ошибка(Событие, Сообщение);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(Сообщение);
	
КонецПроцедуры

Процедура ОшибкаПриПередачеСобытияСообщенияИдентификатора() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Идентификатор", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	
	// when
	Результат = Логи.Ошибка(Событие, Сообщение, Дополнительно);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит("[ " + Дополнительно.Идентификатор + " ]")
		.Содержит(Сообщение)
		.НеРавно(Сообщение);
	
КонецПроцедуры

Процедура ОшибкаПриПередачеСобытияСообщенияОбъекта() Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Объект", ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик());
	
	// when
	Результат = Логи.Ошибка(Событие, Сообщение, Дополнительно);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Сообщение);
	
КонецПроцедуры

Процедура ОшибкаПриПередачеСобытияСообщенияИдентификатораОтветаБезТелаСообщения(Знач КодСостояния) Экспорт
	
	// given
	Событие =  ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Сообщение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Идентификатор", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	Дополнительно.Вставить("Ответ", Новый HTTPСервисОтвет(КодСостояния));
	
	// when
	Результат = Логи.Ошибка(Событие, Сообщение, Дополнительно);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Содержит(Сообщение)
		.Содержит("[ " + Дополнительно.Идентификатор + " ]")
		.Содержит(НСтр("ru = 'код состояния';en = 'status code'") + ": ")
		.Содержит(КодСостояния);
	
КонецПроцедуры

Процедура ПолучитьИсториюСобытий() Экспорт
	
	// given
	Событие = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока() + "." + ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	События = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(Событие);
	Уровень = УровеньЖурналаРегистрации.Ошибка;
	Комментарий = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()));
	Отбор.Вставить("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));

	ЗаписьЖурналаРегистрации(Событие, Уровень, , , Комментарий);
	ЗаписьЖурналаРегистрации(ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(), Уровень, , , Комментарий);
	ОМ_Тесты.ЮТест().Пауза(3);
	
	// when
	Результат = Логи.ПолучитьИсториюСобытий(События, Отбор);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(1)
		.Свойство("[0].КодСостояния")
			.ИмеетТип("Число")
			.НеЗаполнено();

КонецПроцедуры

Процедура ПолучитьИсториюСобытийЗаполняетКодСостояния() Экспорт
	
	// given
	КодСостояния = 200;
	Событие = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока() + "." + ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	События = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(Событие);
	Уровень = УровеньЖурналаРегистрации.Информация;
	Объект = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	КомментарийБезКодаСостояния = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	НадписьКодаСостояния = НСтр("ru = 'код состояния';en = 'status code'");
	Комментарий =  НадписьКодаСостояния + ": " + КодСостояния + ": " + КомментарийБезКодаСостояния;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()));
	Отбор.Вставить("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));
	Отбор.Вставить("Данные", Объект);

	ЗаписьЖурналаРегистрации(Событие, Уровень, , Объект, Комментарий);
	ОМ_Тесты.ЮТест().Пауза(3);
	
	// when
	Результат = Логи.ПолучитьИсториюСобытий(События, Отбор);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(1)
		.ИмеетСвойство("[0].Дата")
		.ИмеетСвойство("[0].ИмяПользователя")
		.ИмеетСвойство("[0].ПредставлениеПриложения")
		.Свойство("[0].Уровень")
			.Равно(УровеньЖурналаРегистрации.Информация)
		.Свойство("[0].Событие")
			.Равно(Событие)
		.Свойство("[0].Данные")
			.Равно(Объект)
		.Свойство("[0].ПредставлениеДанных")
			.Заполнено()
		.Свойство("[0].Комментарий")
			.Равно(КомментарийБезКодаСостояния)
		.Свойство("[0].КодСостояния")
			.ИмеетТип("Число")
			.Равно(КодСостояния);

КонецПроцедуры

#КонецОбласти
