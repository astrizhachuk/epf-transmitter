#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("Заполнить")
		.ДобавитьТест("ЗаполнитьВыбрасываетИсключениеПриНеверномТипеПараметра")
		.ДобавитьТест("ПроверитьЗаполнение")
		.ДобавитьТест("ПроверитьЗаполнениеПриПустомJSON")
		.ДобавитьТест("ПроверитьЗаполнениеПриПустомProjectId")
		.ДобавитьТест("ПроверитьЗаполнениеПриПустомАдресеПроекта")
		.ДобавитьТест("ПроверитьЗаполнениеПриПустомServerURL")
		.ДобавитьТест("ПроверитьЗаполнениеПриПустомИдентификаторе")
		.ДобавитьТест("УстановитьИсточникЗапроса")
		.ДобавитьТест("УстановитьИсточникЗапросаВозвращаетПустоеЗначениеПриНеверномТипеПараметра")
			.СПараметрами(1)
			.СПараметрами("что-то")
		.ДобавитьТест("ПолучитьТело")
		.ДобавитьТест("ПолучитьИдентификаторПроекта")
		.ДобавитьТест("ПолучитьАдресПроекта")
		.ДобавитьТест("ПолучитьАдресСервера")
		.ДобавитьТест("ПолучитьДатуСобытия")
		.ДобавитьТест("ПолучитьИдентификаторСобытия")
		.ДобавитьТест("ПолучитьСообщениеСобытия")
		.ДобавитьТест("ПолучитьКоммиты")
		.ДобавитьТест("ПолучитьКоммитыВыбрасываетИсключениеПриОтсутствииКоммитов")
		.ДобавитьТест("ПолучитьКоммит")
		.ДобавитьТест("ПолучитьКоммитВыбрасываетИсключениеПриОтсутствииКоммитов")
		.ДобавитьТест("ПолучитьКоммитВыбрасываетИсключениеПриОтсутствииКоммита")
		.ДобавитьТест("ПолучитьМодифицированныеФайлы")
		.ДобавитьТест("ПолучитьМодифицированныеФайлыПриИхОтстутствииВозвращаетПустуюКоллекцию")
		.ДобавитьТест("ПолучитьМодифицированныеФайлыВыбрасываетИсключениеПриОтсутствииИсходногоКоммита")
		.ДобавитьТест("Сериализовать")
		.ДобавитьТестовыйНабор("Маршрутизация")
			.ДобавитьТест("ПолучитьПредставленияСхемМаршрутовКИсполнению")
			.ДобавитьТест("ПолучитьПредставленияСхемМаршрутовКИсполнениюВозвращаетПустуюКоллекциюПриОтсутствииДанных")
			.ДобавитьТест("ПолучитьПредставленияСхемМаршрутовКИсполнениюВозвращаетМаршрутыСПриоритетомПользовательскойСхемы")
			.ДобавитьТест("ПолучитьПредставленияСхемМаршрутовКИсполнениюВозвращаетТолькоОднуСхемуМаршрутовДляКоммита")
			.ДобавитьТест("ПолучитьПредставлениеСхемыМаршрутов")
			.ДобавитьТест("ПолучитьПредставлениеСхемыМаршрутовВозвращаетПользовательскийВариант")		
			.ДобавитьТест("ПолучитьПредставлениеСхемыМаршрутовВозвращаетПустоеПредставлениеПриОтсутствииСхемы")
			.ДобавитьТест("ПолучитьОписанияСхемМаршрутовКИсполнению")
			.ДобавитьТест("ПолучитьОписанияСхемМаршрутовКИсполнениюВозвращаетПустуюКоллекциюПриОтсутствииДанных")
			.ДобавитьТест("ПолучитьОписанияСхемМаршрутовКИсполнениюВозвращаетМаршрутыСПриоритетомПользовательскойСхемы")
			.ДобавитьТест("ДобавитьСхемуМаршрутов")
			.ДобавитьТест("ДобавитьСхемуМаршрутовСПараметрамиПоУмолчанию")
			.ДобавитьТест("ДобавитьСхемуМаршрутовОбновляетДанныеПриСовпаденииУсловийОтбора")
			.ДобавитьТест("УдалитьСхемуМаршрутов")
			.ДобавитьТест("УдалитьСхемуМаршрутовСПараметрамиПоУмолчанию")
			.ДобавитьТест("УдалитьСхемуМаршрутовУдаляетВсеСовпаденияПоУсловиямОтбора")
			.ДобавитьТест("УдалитьСхемуМаршрутовУдаляетПользовательскуюСхему")
			.ДобавитьТест("УдалитьПользовательскиеСхемыМаршрутов")
			.ДобавитьТест("УдалитьПользовательскиеСхемыМаршрутовНеИзменяетКоллекциюЕслиНетПользовательскихСхем")
			.ДобавитьТест("УдалитьПользовательскиеСхемыМаршрутовОчищаетКоллекциюЕслиВсеСхемыПользовательские")
			.ДобавитьТест("УдалитьПользовательскиеСхемыМаршрутовНеВыбрасываетИсключениеЕслиКоллекцияПуста")
			.ДобавитьТест("ЗаполнитьСхемыМаршрутов")
			.ДобавитьТест("ЗаполнитьСхемыМаршрутовПриОтсутствииДанныхНичегоНеСоздает")
			.ДобавитьТест("ЗаполнитьСхемыМаршрутовПриОтсутствииНастройкиСИменемФайлаСхемНичегоНеСоздает")
		;
	
КонецПроцедуры

Процедура Заполнить() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Новый Структура());
	
	// when
	ВнешнийЗапрос.Заполнить(Тест.ВнешнийЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("Type").Равно(Тест.ВнешнийЗапрос.Type)
		.Свойство("JSON").Равно(Тест.ВнешнийЗапрос.JSON)
		.Свойство("ProjectId").Равно(Тест.ВнешнийЗапрос.ProjectId)
		.Свойство("АдресПроекта").Равно(Тест.ВнешнийЗапрос.АдресПроекта)
		.Свойство("ServerURL").Равно(Тест.ВнешнийЗапрос.ServerURL)
		.Свойство("Идентификатор").Равно(Тест.ВнешнийЗапрос.Идентификатор)
		.Свойство("Коммиты").ИмеетДлину(Тест.ВнешнийЗапрос.Коммиты.Количество())
			.Свойство("Коммиты[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
			.Свойство("Коммиты[0].Дата").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Дата)
			.Свойство("Коммиты[0].Идентификатор").НеРавно(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор)
		.Свойство("ModifiedFiles").ИмеетДлину(Тест.ВнешнийЗапрос.ModifiedFiles.Количество())
			.Свойство("ModifiedFiles[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[0].Идентификатор)
			.Свойство("ModifiedFiles[0].ПутьКФайлу").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[0].ПутьКФайлу)
			.Свойство("ModifiedFiles[0].Идентификатор").НеРавно(Тест.ВнешнийЗапрос.ModifiedFiles[1].Идентификатор)
		.Свойство("СхемыМаршрутов").ИмеетДлину(Тест.ВнешнийЗапрос.СхемыМаршрутов.Количество())
			.Свойство("СхемыМаршрутов[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Идентификатор)
			.Свойство("СхемыМаршрутов[0].Представление").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Представление)
			.Свойство("СхемыМаршрутов[0].Пользовательская").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Пользовательская)
			.Свойство("СхемыМаршрутов[1].Идентификатор").НеРавно(Тест.ВнешнийЗапрос.СхемыМаршрутов[2].Идентификатор);
	
КонецПроцедуры

Процедура ЗаполнитьВыбрасываетИсключениеПриНеверномТипеПараметра() Экспорт
	
	// given
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Новый Структура());
	
	Параметры = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве("Это обычный текст");
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Метод("Заполнить", Параметры)
		.ВыбрасываетИсключение(Логи.Сообщения().INVALID_DATA_TYPE);
	
КонецПроцедуры

Процедура ПроверитьЗаполнение() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПроверитьЗаполнение();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ЭтоИстина();
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПриПустомJSON() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.JSON = "";
	
	// when
	Результат = ВнешнийЗапрос.ПроверитьЗаполнение();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ЭтоЛожь();
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПриПустомProjectId() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.ProjectId = "";
	
	// when
	Результат = ВнешнийЗапрос.ПроверитьЗаполнение();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ЭтоЛожь();
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПриПустомАдресеПроекта() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.АдресПроекта = "";
	
	// when
	Результат = ВнешнийЗапрос.ПроверитьЗаполнение();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ЭтоЛожь();
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПриПустомServerURL() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.ServerURL = "";
	
	// when
	Результат = ВнешнийЗапрос.ПроверитьЗаполнение();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ЭтоЛожь();
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПриПустомИдентификаторе() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.Идентификатор = "";
	
	// when
	Результат = ВнешнийЗапрос.ПроверитьЗаполнение();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ЭтоЛожь();
	
КонецПроцедуры

Процедура УстановитьИсточникЗапроса() Экспорт
	
	// given
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Новый Структура());

	// when
	ВнешнийЗапрос.УстановитьИсточникЗапроса(Перечисления.ИсточникЗапроса.Гитлаб);

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("Type")
			.Равно(Перечисления.ИсточникЗапроса.Гитлаб);
	
КонецПроцедуры

Процедура УстановитьИсточникЗапросаВозвращаетПустоеЗначениеПриНеверномТипеПараметра(Знач Параметр) Экспорт
	
	// given
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Новый Структура());

	// when
	ВнешнийЗапрос.УстановитьИсточникЗапроса(Параметр);

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("Type")
			.ИмеетТип("ПеречислениеСсылка.ИсточникЗапроса")
			.НеЗаполнено();
	
КонецПроцедуры

Процедура ПолучитьТело() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);

	// when
	Результат = ВнешнийЗапрос.ПолучитьТело();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(Тест.Схема);
	
КонецПроцедуры

Процедура ПолучитьИдентификаторПроекта() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьИдентификаторПроекта();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)))
		.Равно(Тест.ВнешнийЗапрос.ProjectId);
	
КонецПроцедуры

Процедура ПолучитьАдресПроекта() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьАдресПроекта();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)))
		.Равно(Тест.ВнешнийЗапрос.АдресПроекта);
	
КонецПроцедуры

Процедура ПолучитьАдресСервера() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьАдресСервера();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)))
		.Равно(Тест.ВнешнийЗапрос.ServerURL);
	
КонецПроцедуры

Процедура ПолучитьДатуСобытия() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьДатуСобытия();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)))
		.Равно(Тест.ВнешнийЗапрос.Дата);
	
КонецПроцедуры

Процедура ПолучитьИдентификаторСобытия() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьИдентификаторСобытия();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)))
		.Равно(Тест.ВнешнийЗапрос.Идентификатор);
	
КонецПроцедуры

Процедура ПолучитьСообщениеСобытия() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьСообщениеСобытия();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)))
		.Равно(Тест.ВнешнийЗапрос.Сообщение);
	
КонецПроцедуры

Процедура ПолучитьКоммиты() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьКоммиты();

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.Заполнено()
		.Свойство("[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
		.Свойство("[0].Дата").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Дата)
		.Свойство("[0].Заголовок").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Заголовок)
		.Свойство("[1].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор)
		.Свойство("[1].Дата").Равно(Тест.ВнешнийЗапрос.Коммиты[1].Дата)
		.Свойство("[1].Заголовок").Равно(Тест.ВнешнийЗапрос.Коммиты[1].Заголовок)
		.Свойство("[2].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[2].Идентификатор)
		.Свойство("[2].Дата").Равно(Тест.ВнешнийЗапрос.Коммиты[2].Дата)
		.Свойство("[2].Заголовок").Равно(Тест.ВнешнийЗапрос.Коммиты[2].Заголовок);
	
КонецПроцедуры

Процедура ПолучитьКоммитыВыбрасываетИсключениеПриОтсутствииКоммитов() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.Коммиты.Очистить();
	
	// when

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Метод("ПолучитьКоммиты")
		.ВыбрасываетИсключение(Логи.Сообщения().NO_COMMITS);
	
КонецПроцедуры

Процедура ПолучитьКоммит() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьКоммит(ВнешнийЗапрос.Коммиты[0].Идентификатор);

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Заполнено()
		.Свойство("Идентификатор")
			.Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
		.Свойство("Дата")
			.Равно(Тест.ВнешнийЗапрос.Коммиты[0].Дата)
		.Свойство("Заголовок")
			.Равно(Тест.ВнешнийЗапрос.Коммиты[0].Заголовок);
	
КонецПроцедуры

Процедура ПолучитьКоммитВыбрасываетИсключениеПриОтсутствииКоммитов() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	Параметры = Новый Массив();
   	Параметры.Добавить(ВнешнийЗапрос.Коммиты[0].Идентификатор);
   	
	ВнешнийЗапрос.Коммиты.Очистить();
	
	// when

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Метод("ПолучитьКоммит", Параметры)
		.ВыбрасываетИсключение(Логи.Сообщения().NO_COMMITS);
	
КонецПроцедуры

Процедура ПолучитьКоммитВыбрасываетИсключениеПриОтсутствииКоммита() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	Параметры = Новый Массив();
   	Параметры.Добавить(ВнешнийЗапрос.Коммиты[0].Идентификатор);
	
	ВнешнийЗапрос.Коммиты.Удалить(0);
		
	// when

	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Метод("ПолучитьКоммит", Параметры)
		.ВыбрасываетИсключение(Логи.Сообщения().NO_COMMIT);
	
КонецПроцедуры

Процедура ПолучитьМодифицированныеФайлы() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьМодифицированныеФайлы();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(3)
		.Свойство("[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[0].Идентификатор)
		.Свойство("[0].Дата").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Дата)
		.Свойство("[0].ПутьКФайлу").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[0].ПутьКФайлу)
		.Свойство("[1].Идентификатор").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[1].Идентификатор)
		.Свойство("[1].Дата").Равно(Тест.ВнешнийЗапрос.Коммиты[1].Дата)
		.Свойство("[1].ПутьКФайлу").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[1].ПутьКФайлу)
		.Свойство("[2].Идентификатор").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[2].Идентификатор)
		.Свойство("[2].Дата").Равно(Тест.ВнешнийЗапрос.Коммиты[2].Дата)
		.Свойство("[2].ПутьКФайлу").Равно(Тест.ВнешнийЗапрос.ModifiedFiles[2].ПутьКФайлу);
	
КонецПроцедуры

Процедура ПолучитьМодифицированныеФайлыПриИхОтстутствииВозвращаетПустуюКоллекцию() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.ModifiedFiles.Очистить();
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьМодифицированныеФайлы();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(0);
	
КонецПроцедуры

Процедура ПолучитьМодифицированныеФайлыВыбрасываетИсключениеПриОтсутствииИсходногоКоммита() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.Коммиты.Очистить();
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Метод("ПолучитьМодифицированныеФайлы")
		.ВыбрасываетИсключение(Логи.Сообщения().NO_COMMIT);
	
КонецПроцедуры

Процедура ПолучитьПредставленияСхемМаршрутовКИсполнению() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьПредставленияСхемМаршрутовКИсполнению();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Соответствие")
		.ИмеетДлину(2)
		.Свойство(ПутьКСвойству(Тест, 0)).Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[1].Представление)
		.Свойство(ПутьКСвойству(Тест, 1)).Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[2].Представление);
		
КонецПроцедуры

Процедура ПолучитьПредставленияСхемМаршрутовКИсполнениюВозвращаетПустуюКоллекциюПриОтсутствииДанных() Экспорт
	
	// given
	Тест = Заглушка();
	Тест.ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьПредставленияСхемМаршрутовКИсполнению();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Соответствие")
		.НеЗаполнено();
		
КонецПроцедуры

Процедура ПолучитьПредставленияСхемМаршрутовКИсполнениюВозвращаетМаршрутыСПриоритетомПользовательскойСхемы() Экспорт
	
	// given
	Тест = Заглушка();
	
	Схемы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.СхемаМаршрутов(1, ИдентификаторКоммита(Тест, 0), ПолучитьФейковыйJSON(), Истина),
		ОМ_ТестовыеДанные.СхемаМаршрутов(2, ИдентификаторКоммита(Тест, 0), ПолучитьФейковыйJSON(), Ложь),
		ОМ_ТестовыеДанные.СхемаМаршрутов(3, ИдентификаторКоммита(Тест, 1), ПолучитьФейковыйJSON(), Ложь));
		
	Тест.ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	Тест.ВнешнийЗапрос.Вставить("СхемыМаршрутов", Схемы);
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьПредставленияСхемМаршрутовКИсполнению();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(2)
		.Свойство(ПутьКСвойству(Тест, 0)).Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Представление)
		.Свойство(ПутьКСвойству(Тест, 1)).Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[2].Представление);
		
КонецПроцедуры

Процедура ПолучитьПредставленияСхемМаршрутовКИсполнениюВозвращаетТолькоОднуСхемуМаршрутовДляКоммита() Экспорт
	
	// given
	Тест = Заглушка();
	
	Схемы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.СхемаМаршрутов(1, ИдентификаторКоммита(Тест, 0), ПолучитьФейковыйJSON(), Истина),
		ОМ_ТестовыеДанные.СхемаМаршрутов(2, ИдентификаторКоммита(Тест, 0), ПолучитьФейковыйJSON(), Ложь),
		ОМ_ТестовыеДанные.СхемаМаршрутов(3, ИдентификаторКоммита(Тест, 0), ПолучитьФейковыйJSON(), Истина),
		ОМ_ТестовыеДанные.СхемаМаршрутов(4, ИдентификаторКоммита(Тест, 0), ПолучитьФейковыйJSON(), Ложь));
		
	Тест.ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	Тест.ВнешнийЗапрос.Вставить("СхемыМаршрутов", Схемы);
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьПредставленияСхемМаршрутовКИсполнению();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(1)
		.Свойство(ПутьКСвойству(Тест, 0)).Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[2].Представление);
		
КонецПроцедуры

Процедура ПолучитьПредставлениеСхемыМаршрутов() Экспорт

	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьПредставлениеСхемыМаршрутов(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, Ложь);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Представление);
	
КонецПроцедуры

Процедура ПолучитьПредставлениеСхемыМаршрутовВозвращаетПользовательскийВариант() Экспорт

	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьПредставлениеСхемыМаршрутов(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, Истина);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[1].Представление);
	
КонецПроцедуры

Процедура ПолучитьПредставлениеСхемыМаршрутовВозвращаетПустоеПредставлениеПриОтсутствииСхемы() Экспорт

	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьПредставлениеСхемыМаршрутов(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор, Ложь);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка")
		.Равно(ПустаяСхемаМаршрута());
	
КонецПроцедуры

Процедура ПолучитьОписанияСхемМаршрутовКИсполнению() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьОписанияСхемМаршрутовКИсполнению();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Соответствие")
		.ИмеетДлину(2)
		.Свойство(ПутьКСвойству(Тест, 0, "Представление")).Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[1].Представление)
		.НетСвойства(ПутьКСвойству(Тест, 0, "Данные"))
		.Свойство(ПутьКСвойству(Тест, 0, "Пользовательская")).ЭтоИстина()
		.Свойство(ПутьКСвойству(Тест, 1, "Представление")).Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[2].Представление)
		.НетСвойства(ПутьКСвойству(Тест, 1, "Данные"))
		.Свойство(ПутьКСвойству(Тест, 1, "Пользовательская")).ЭтоИстина();
		
КонецПроцедуры

Процедура ПолучитьОписанияСхемМаршрутовКИсполнениюВозвращаетПустуюКоллекциюПриОтсутствииДанных() Экспорт
	
	// given
	Тест = Заглушка();
	Тест.ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьОписанияСхемМаршрутовКИсполнению();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Соответствие")
		.НеЗаполнено();
		
КонецПроцедуры

Процедура ПолучитьОписанияСхемМаршрутовКИсполнениюВозвращаетМаршрутыСПриоритетомПользовательскойСхемы() Экспорт
	
	// given
	Тест = Заглушка();
	
	Схемы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.СхемаМаршрутов(1, ИдентификаторКоммита(Тест, 0), ПолучитьФейковыйJSON(), Истина),
		ОМ_ТестовыеДанные.СхемаМаршрутов(2, ИдентификаторКоммита(Тест, 0), ПолучитьФейковыйJSON(), Ложь),
		ОМ_ТестовыеДанные.СхемаМаршрутов(3, ИдентификаторКоммита(Тест, 1), ПолучитьФейковыйJSON(), Ложь));
		
	Тест.ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	Тест.ВнешнийЗапрос.Вставить("СхемыМаршрутов", Схемы);
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	Результат = ВнешнийЗапрос.ПолучитьОписанияСхемМаршрутовКИсполнению();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(2)
		.Свойство(ПутьКСвойству(Тест, 0, "Представление")).Равно(Схемы[0].Представление)
		.НетСвойства(ПутьКСвойству(Тест, 0, "Данные"))
		.Свойство(ПутьКСвойству(Тест, 0, "Пользовательская")).ЭтоИстина()
		.Свойство(ПутьКСвойству(Тест, 1, "Представление")).Равно(Схемы[2].Представление)
		.НетСвойства(ПутьКСвойству(Тест, 1, "Данные"))
		.Свойство(ПутьКСвойству(Тест, 1, "Пользовательская")).ЭтоЛожь();
		
КонецПроцедуры

Процедура ДобавитьСхемуМаршрутов() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	Ожидание = ПолучитьФейковыйJSON();
	
	// when
	ВнешнийЗапрос.ДобавитьСхемуМаршрутов(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор, Ожидание, Ложь);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов").ИмеетДлину(4)
		.Свойство("СхемыМаршрутов[0].Представление").Неравно(Ожидание)
		.Свойство("СхемыМаршрутов[1].Представление").Неравно(Ожидание)
		.Свойство("СхемыМаршрутов[2].Представление").Неравно(Ожидание)
		.Свойство("СхемыМаршрутов[3].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор)
		.Свойство("СхемыМаршрутов[3].Представление").Равно(Ожидание)
		.Свойство("СхемыМаршрутов[3].Пользовательская").ЭтоЛожь();
	
КонецПроцедуры

Процедура ДобавитьСхемуМаршрутовСПараметрамиПоУмолчанию() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	Ожидание = ПолучитьФейковыйJSON();
	
	// when
	ВнешнийЗапрос.ДобавитьСхемуМаршрутов(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор, Ожидание);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов").ИмеетДлину(4)
		.Свойство("СхемыМаршрутов[0].Представление").Неравно(Ожидание)
		.Свойство("СхемыМаршрутов[1].Представление").Неравно(Ожидание)
		.Свойство("СхемыМаршрутов[2].Представление").Неравно(Ожидание)
		.Свойство("СхемыМаршрутов[3].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор)
		.Свойство("СхемыМаршрутов[3].Представление").Равно(Ожидание)
		.Свойство("СхемыМаршрутов[3].Пользовательская").ЭтоЛожь();
	
КонецПроцедуры

Процедура ДобавитьСхемуМаршрутовОбновляетДанныеПриСовпаденииУсловийОтбора() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	Ожидание = ПолучитьФейковыйJSON();
	ДубльПервойСтрокиСоСхемой = ВнешнийЗапрос.СхемыМаршрутов.Добавить();
	ЗаполнитьЗначенияСвойств(ДубльПервойСтрокиСоСхемой, ВнешнийЗапрос.СхемыМаршрутов[0]);
	
	// when
	ВнешнийЗапрос.ДобавитьСхемуМаршрутов(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, Ожидание, Ложь);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов").ИмеетДлину(4)
		.Свойство("СхемыМаршрутов[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
		.Свойство("СхемыМаршрутов[0].Представление").Равно(Ожидание)
		.Свойство("СхемыМаршрутов[0].Пользовательская").ЭтоЛожь()
		.Свойство("СхемыМаршрутов[1].Представление").Неравно(Ожидание)
		.Свойство("СхемыМаршрутов[2].Представление").Неравно(Ожидание)
		.Свойство("СхемыМаршрутов[3].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
		.Свойство("СхемыМаршрутов[3].Представление").Равно(Ожидание)
		.Свойство("СхемыМаршрутов[3].Пользовательская").ЭтоЛожь();
	
КонецПроцедуры

Процедура УдалитьСхемуМаршрутов() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	ВнешнийЗапрос.УдалитьСхемуМаршрутов(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, Ложь);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
		.Свойство("СхемыМаршрутов[1].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор)
		.Свойство("СхемыМаршрутов")
			.ИмеетДлину(2)
			.НеСодержит(
				ОМ_Тесты.ЮТест().Предикат()
					.Реквизит("Пользовательская").Равно(Ложь));
	
КонецПроцедуры

Процедура УдалитьСхемуМаршрутовСПараметрамиПоУмолчанию() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	ВнешнийЗапрос.УдалитьСхемуМаршрутов(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
		.Свойство("СхемыМаршрутов[1].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор)
		.Свойство("СхемыМаршрутов")
			.ИмеетДлину(2)
			.НеСодержит(
				ОМ_Тесты.ЮТест().Предикат()
					.Реквизит("Пользовательская").Равно(Ложь));
	
КонецПроцедуры

Процедура УдалитьСхемуМаршрутовУдаляетВсеСовпаденияПоУсловиямОтбора() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ДубльПервойСтрокиСоСхемой = ВнешнийЗапрос.СхемыМаршрутов.Добавить();
	ЗаполнитьЗначенияСвойств(ДубльПервойСтрокиСоСхемой, ВнешнийЗапрос.СхемыМаршрутов[0]);
	
	// when
	ВнешнийЗапрос.УдалитьСхемуМаршрутов(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, Ложь);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
		.Свойство("СхемыМаршрутов[1].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор)
		.Свойство("СхемыМаршрутов")
			.ИмеетДлину(2)
			.НеСодержит(
				ОМ_Тесты.ЮТест().Предикат()
					.Реквизит("Пользовательская").Равно(Ложь));

КонецПроцедуры

Процедура УдалитьСхемуМаршрутовУдаляетПользовательскуюСхему() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	ВнешнийЗапрос.УдалитьСхемуМаршрутов(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, Истина);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов").ИмеетДлину(2)
		.Свойство("СхемыМаршрутов[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
		.Свойство("СхемыМаршрутов[0].Представление").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Представление)
		.Свойство("СхемыМаршрутов[0].Пользовательская").ЭтоЛожь()
		.Свойство("СхемыМаршрутов[1].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор)
		.Свойство("СхемыМаршрутов[1].Представление").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[2].Представление)
		.Свойство("СхемыМаршрутов[1].Пользовательская").ЭтоИстина();
	
КонецПроцедуры

Процедура УдалитьПользовательскиеСхемыМаршрутов() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	ВнешнийЗапрос.УдалитьПользовательскиеСхемыМаршрутов();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов").ИмеетДлину(1)
		.Свойство("СхемыМаршрутов[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
		.Свойство("СхемыМаршрутов[0].Представление").Равно(Тест.ВнешнийЗапрос.СхемыМаршрутов[0].Представление)
		.Свойство("СхемыМаршрутов[0].Пользовательская").ЭтоЛожь();
	
КонецПроцедуры

Процедура УдалитьПользовательскиеСхемыМаршрутовНеИзменяетКоллекциюЕслиНетПользовательскихСхем() Экспорт
	
	// given
	Тест = Заглушка();
	
	Схемы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.СхемаМаршрутов(1, ИдентификаторКоммита(Тест, 0), ПолучитьФейковыйJSON(), Ложь),
		ОМ_ТестовыеДанные.СхемаМаршрутов(2, ИдентификаторКоммита(Тест, 1), ПолучитьФейковыйJSON(), Ложь));
		
	Тест.ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	Тест.ВнешнийЗапрос.Вставить("СхемыМаршрутов", Схемы);
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	ВнешнийЗапрос.УдалитьПользовательскиеСхемыМаршрутов();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов").ИмеетДлину(2);
	
КонецПроцедуры

Процедура УдалитьПользовательскиеСхемыМаршрутовОчищаетКоллекциюЕслиВсеСхемыПользовательские() Экспорт
	
	// given
	Тест = Заглушка();
	
	Схемы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.СхемаМаршрутов(1, ИдентификаторКоммита(Тест, 0), ПолучитьФейковыйJSON(), Истина),
		ОМ_ТестовыеДанные.СхемаМаршрутов(2, ИдентификаторКоммита(Тест, 1), ПолучитьФейковыйJSON(), Истина));
		
	Тест.ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	Тест.ВнешнийЗапрос.Вставить("СхемыМаршрутов", Схемы);
	
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	ВнешнийЗапрос.УдалитьПользовательскиеСхемыМаршрутов();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов").ИмеетДлину(0);
	
КонецПроцедуры

Процедура УдалитьПользовательскиеСхемыМаршрутовНеВыбрасываетИсключениеЕслиКоллекцияПуста() Экспорт
	
	// given
	Тест = Заглушка();
	Тест.ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	
	// when
	ВнешнийЗапрос.УдалитьПользовательскиеСхемыМаршрутов();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов").ИмеетДлину(0);
	
КонецПроцедуры

Процедура ЗаполнитьСхемыМаршрутов() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	
	ФайлСхемы = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов();
	
	Файл = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСДанными();
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
		ПолучитьОписаниеФайла(Тест, Файл, Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, "added"),
		ПолучитьОписаниеФайла(Тест, ФайлСхемы, Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, ""),
		ПолучитьОписаниеФайла(Тест, ФайлСхемы, "какой-то идентификатор коммита", ""),
		ПолучитьОписаниеФайла(Тест, ФайлСхемы, Тест.ВнешнийЗапрос.Коммиты[1].Идентификатор, "", "тут была ошибка"));
	
	// when
	ВнешнийЗапрос.ЗаполнитьСхемыМаршрутов(Файлы, ФайлСхемы.ИмяФайла);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов")
			.Заполнено()
			.ИмеетДлину(1)
		.Свойство("СхемыМаршрутов[0].Идентификатор").Равно(Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор)
		.Свойство("СхемыМаршрутов[0].Представление").Равно(ФайлСхемы.Data)
		.Свойство("СхемыМаршрутов[0].Пользовательская").ЭтоЛожь();
		
КонецПроцедуры

Процедура ЗаполнитьСхемыМаршрутовПриОтсутствииДанныхНичегоНеСоздает() Экспорт
	
	// given
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	
	// when
	ВнешнийЗапрос.ЗаполнитьСхемыМаршрутов(Новый Массив(), "");
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов")
			.НеЗаполнено();
	
КонецПроцедуры

Процедура ЗаполнитьСхемыМаршрутовПриОтсутствииНастройкиСИменемФайлаСхемНичегоНеСоздает() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.СхемыМаршрутов.Очистить();
	
	ФайлСхемы = ОМ_ТестовыеДанные.ПолучитьОписаниеСлучайногоФайлаСоСхемамиМаршрутов();
	
	Файлы = ОМ_Тесты.Мокито().МассивПараметров(
			ПолучитьОписаниеФайла(Тест, ФайлСхемы, Тест.ВнешнийЗапрос.Коммиты[0].Идентификатор, ""));
	
	// when
	ВнешнийЗапрос.ЗаполнитьСхемыМаршрутов(Файлы, "");
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ВнешнийЗапрос)
		.Свойство("СхемыМаршрутов")
			.НеЗаполнено();
			
КонецПроцедуры

Процедура Сериализовать() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);

	// when
	Результат = ВнешнийЗапрос.Сериализовать();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Строка");

	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Результат);	
	ДесериализованныйРезультат = СериализаторXDTO.ПрочитатьJSON(Чтение);
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(ДесериализованныйРезультат)
		.ИмеетТип("Структура")
		.ИмеетСвойстваРавные(Тест.ВнешнийЗапрос);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Заглушка()
	
	Результат = Новый Структура();
	Результат.Вставить("Схема", ОМ_ТестовыеДанные.ПолучитьТело(ОМ_Тесты.ЮТНастройкиВыполнения().КаталогПроекта() + "/test/requests/push-repo1-req1.json"));
	Результат.Вставить("ДесериализованнаяСхема", ОМ_ТестовыеДанные.JsonВОбъект(Результат.Схема));
	
	ВнешнийЗапрос = Новый Структура();
	ВнешнийЗапрос.Вставить("Type", Перечисления.ИсточникЗапроса.Гитлаб);
	ВнешнийЗапрос.Вставить("JSON", Результат.Схема);
	ВнешнийЗапрос.Вставить("ProjectId", Строка(Результат.ДесериализованнаяСхема.Получить("project").Получить("id")));
	ВнешнийЗапрос.Вставить("АдресПроекта", Результат.ДесериализованнаяСхема.Получить("project").Получить("web_url"));
	ВнешнийЗапрос.Вставить("ServerURL", "http://mockserver:1080");
	ВнешнийЗапрос.Вставить("Идентификатор", Результат.ДесериализованнаяСхема.Получить("checkout_sha"));
	ВнешнийЗапрос.Вставить("Сообщение", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256));
	ВнешнийЗапрос.Вставить("Дата", Дата(2023, 10, 27, 12, 30, 0));

	Коммиты = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.НовыйКоммит(1, ИдентификаторКоммита(Результат, 0), ДатаВремяКоммита(Результат, 0), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)),
		ОМ_ТестовыеДанные.НовыйКоммит(2, ИдентификаторКоммита(Результат, 1), ДатаВремяКоммита(Результат, 1), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)),
		ОМ_ТестовыеДанные.НовыйКоммит(3, ИдентификаторКоммита(Результат, 2), ДатаВремяКоммита(Результат, 2), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)));
	ВнешнийЗапрос.Вставить("Коммиты", Коммиты);
	
	МодифицированныеФайлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		НовыйИзмененныйФайл(1, Результат.ДесериализованнаяСхема.Получить("commits")[0], 3),
		НовыйИзмененныйФайл(2, Результат.ДесериализованнаяСхема.Получить("commits")[1], 3),
		НовыйИзмененныйФайл(3, Результат.ДесериализованнаяСхема.Получить("commits")[2], 2));
	ВнешнийЗапрос.Вставить("ModifiedFiles", МодифицированныеФайлы);
	
	СхемыМаршрутов = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.СхемаМаршрутов(1, ИдентификаторКоммита(Результат, 0), ПолучитьФейковыйJSON(), Ложь),
		ОМ_ТестовыеДанные.СхемаМаршрутов(2, ИдентификаторКоммита(Результат, 0), ПолучитьФейковыйJSON(), Истина),
		ОМ_ТестовыеДанные.СхемаМаршрутов(3, ИдентификаторКоммита(Результат, 1), ПолучитьФейковыйJSON(), Истина));
	ВнешнийЗапрос.Вставить("СхемыМаршрутов", СхемыМаршрутов);
	
	Результат.Вставить("ВнешнийЗапрос", ВнешнийЗапрос);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИзмененныйФайл(Знач НомерСтроки, Знач Коммит, Знач Позиция)
	
	Возврат ОМ_ТестовыеДанные.НовыйИзмененныйФайл(НомерСтроки, Коммит, Позиция);
	
КонецФункции

Функция ПустаяСхемаМаршрута()
	
	Возврат "";
	
КонецФункции

Функция ИдентификаторКоммита(Знач Тест, Знач Позиция)
	
	Возврат ОМ_ТестовыеДанные.ИдентификаторКоммита(Тест, Позиция);
	
КонецФункции

Функция ДатаВремяКоммита(Знач Тест, Знач Позиция)

	Возврат ОМ_ТестовыеДанные.ДатаВремяКоммита(Тест, Позиция);
	
КонецФункции

Функция ПутьКСвойству(Знач Тест, Знач Позиция, Знач Поле = Неопределено)
	
	Если Поле = Неопределено Тогда
		
		Возврат ИдентификаторКоммита(Тест, Позиция);
		
	КонецЕсли;
	
	Возврат ИдентификаторКоммита(Тест, Позиция) + "." + Поле;
	
КонецФункции

Функция ПолучитьФейковыйJSON()

	Возврат ОМ_ТестовыеДанные.ПолучитьФейковыйJSON();

КонецФункции

Функция ПолучитьОписаниеФайла(Знач Тест, Знач Файл, Знач Коммит, Знач Действие, Знач Ошибка = Неопределено)
	
	Результат = Новый Структура();
	Результат.Вставить( "ПутьКФайлу", Файл.ПутьКФайлу );
	Результат.Вставить( "BinaryData", ПолучитьДвоичныеДанныеИзСтроки(Файл.Data) );
	Результат.Вставить( "Действие", Действие );
	Результат.Вставить( "Идентификатор", Коммит );
	Результат.Вставить( "ИнформацияОбОшибке", Ошибка );
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
