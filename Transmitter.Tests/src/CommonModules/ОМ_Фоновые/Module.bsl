#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("ПолучитьФоновыеЗаданияПоИдентификатору")
		.ДобавитьТест("ПолучитьФоновыеЗаданияПоИдентификаторуОтбираетПоПрефиксуКлюча")
		.ДобавитьТест("ПолучитьПредставлениеЗадания")
		.ДобавитьТест("ПолучитьПредставлениеЗаданияДляНесуществующегоЗаданияВозвращаетНеопределено")
		.ДобавитьТест("ОтменитьЗадание")
		.ДобавитьТест("ОтменитьЗаданиеДляНесуществующегоЗаданияВозвращаетНеопределено")
		.ДобавитьТест("ЗаполнитьСписокЗаданий")
	;
	
КонецПроцедуры

Процедура ПолучитьФоновыеЗаданияПоИдентификатору() Экспорт
	
	// given
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Ключ = Лев(Идентификатор, 8);
	Префикс = Ключ + " | ";
	
	// Задания, которые должны быть найдены
	Задание1 = ФоновыеЗадания.Выполнить("ОМ_Фоновые.Заглушка", , Ключ);
	Задание2 = ФоновыеЗадания.Выполнить("ОМ_Фоновые.Заглушка", , Префикс + ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	// Задание, которое не должно попасть в выборку
	ФоновыеЗадания.Выполнить("ОМ_Фоновые.Заглушка", , "ДругойКлюч" + ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());

	Отборы = Новый Массив();
	Отборы.Добавить(Новый Структура("ИмяМетода, Ключ, Префикс", "ОМ_Фоновые.Заглушка", Ключ, ""));
	Отборы.Добавить(Новый Структура("ИмяМетода, Ключ, Префикс", "ОМ_Фоновые.Заглушка", "", Префикс));

	// when
	Результат = Фоновые.ПолучитьФоновыеЗаданияПоИдентификатору(Отборы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(2)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("УникальныйИдентификатор").Равно(Задание1.УникальныйИдентификатор)
				.Получить()
		).Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("УникальныйИдентификатор").Равно(Задание2.УникальныйИдентификатор)
				.Получить()
		);

КонецПроцедуры

Процедура ПолучитьФоновыеЗаданияПоИдентификаторуОтбираетПоПрефиксуКлюча() Экспорт
	
	// given
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Ключ = Лев(Идентификатор, 8);
	ПрефиксКлюча = Ключ + " | ";
	
	// Это задание не должно попасть в выборку, т.к. ключ не начинается с префикса
	ФоновыеЗадания.Выполнить( "ОМ_Фоновые.Заглушка", , Ключ + ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока() );
	// Это задание не должно попасть в выборку, т.к. ключ не начинается с префикса
	ФоновыеЗадания.Выполнить( "ОМ_Фоновые.Заглушка", , ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока() + Ключ );
	// Это задание должно попасть в выборку
	Задание1 = ФоновыеЗадания.Выполнить( "ОМ_Фоновые.Заглушка", , ПрефиксКлюча );
	// Это задание должно попасть в выборку
	Задание2 = ФоновыеЗадания.Выполнить( "ОМ_Фоновые.Заглушка", , ПрефиксКлюча + ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока() );
	
	Отборы = Новый Массив();
	Отборы.Добавить(Новый Структура("ИмяМетода, Ключ, Префикс", "ОМ_Фоновые.Заглушка", "", ПрефиксКлюча));
	
	// when
	Результат = Фоновые.ПолучитьФоновыеЗаданияПоИдентификатору(Отборы);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетДлину(2)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("УникальныйИдентификатор").Равно(Задание1.УникальныйИдентификатор)
				.Получить()
		)
		.Содержит(
			ОМ_Тесты.ЮТест().Предикат()
				.Свойство("УникальныйИдентификатор").Равно(Задание2.УникальныйИдентификатор)
				.Получить()
		);
		
КонецПроцедуры

Процедура ПолучитьПредставлениеЗадания() Экспорт
	
	// given
	ИмяМетода = "ОМ_Фоновые.Заглушка";
	Ключ = "ТестСостояния";
	Параметры = Новый Массив();
	Параметры.Добавить(1);
	
	Задание = ФоновыеЗадания.Выполнить(ИмяМетода, Параметры, Ключ);
	Задание.ОжидатьЗавершенияВыполнения();
	
	// when
	Результат = Фоновые.ПолучитьПредставлениеЗадания(Задание.УникальныйИдентификатор);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("УникальныйИдентификатор")
			.ИмеетТип("УникальныйИдентификатор")
			.Равно(Задание.УникальныйИдентификатор)
		.Свойство("ИмяМетода")
			.Равно(ИмяМетода)
		.Свойство("Ключ")
			.ИмеетТип("Строка")
			.Равно(Ключ)
		.Свойство("Начало")
			.ИмеетТип("Дата")
			.Заполнено()
		.Свойство("Конец")
			.ИмеетТип("Дата")
			.Заполнено()
		.Свойство("Начало")
			.МеньшеИлиРавно(Результат.Конец)
		.Свойство("Состояние")
			.ИмеетТип("Строка")
			.Равно(Строка(СостояниеФоновогоЗадания.Завершено))
		.Свойство("ПредставлениеОшибки")
			.ИмеетТип("Строка")
			.НеЗаполнено();
	
КонецПроцедуры

Процедура ПолучитьПредставлениеЗаданияДляНесуществующегоЗаданияВозвращаетНеопределено() Экспорт
	
	// given
	
	// when
	Результат = Фоновые.ПолучитьПредставлениеЗадания(Новый УникальныйИдентификатор);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ЭтоНеопределено();
	
КонецПроцедуры

Процедура ОтменитьЗадание() Экспорт
	
	// given
	Задание = ФоновыеЗадания.Выполнить("ОМ_Фоновые.Заглушка", , "ТестОтмены");
	
	// when
	Результат = Фоновые.ОтменитьЗадание(Задание.УникальныйИдентификатор);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("Состояние")
			.ИмеетТип("Строка")
			.Равно(Строка(СостояниеФоновогоЗадания.Отменено))
		.Свойство("ПредставлениеОшибки")
			.Содержит("Сеанс работы завершен администратором");
	
КонецПроцедуры

Процедура ОтменитьЗаданиеДляНесуществующегоЗаданияВозвращаетНеопределено() Экспорт
	
	// when
	Результат = Фоновые.ОтменитьЗадание(Новый УникальныйИдентификатор);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ЭтоНеопределено();
	
КонецПроцедуры

Процедура ЗаполнитьСписокЗаданий() Экспорт
	
	// given
	Задание1 = ФоновыеЗадания.Выполнить("ОМ_Фоновые.Заглушка", , ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	Задание2 = ФоновыеЗадания.Выполнить("ОМ_Фоновые.Заглушка", , ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	
	МассивЗаданий = Новый Массив;
	МассивЗаданий.Добавить(Задание1);
	МассивЗаданий.Добавить(Задание2);
	
	Список = НовыйСписок();
	
	// when
	Фоновые.ЗаполнитьСписокЗаданий(Список, МассивЗаданий);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Список)
		.ИмеетТип("ТаблицаЗначений")
		.ИмеетДлину(2);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Список.ВыгрузитьКолонку("УникальныйИдентификатор"))
		.Содержит(Задание1.УникальныйИдентификатор)
		.Содержит(Задание2.УникальныйИдентификатор);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйСписок()
	
	Список = Новый ТаблицаЗначений;
	Список.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Список.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	Список.Колонки.Добавить("ИмяМетода", Новый ОписаниеТипов("Строка"));
	Список.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	Список.Колонки.Добавить("Конец", Новый ОписаниеТипов("Дата"));
	Список.Колонки.Добавить("Состояние", Новый ОписаниеТипов("Строка"));
	Список.Колонки.Добавить("ПредставлениеОшибки", Новый ОписаниеТипов("Строка"));
	
	Возврат Список;
	
КонецФункции

Процедура Заглушка(Знач Ожидание = 5) Экспорт
	
	ОМ_Тесты.ЮТест().Пауза(Ожидание);
	
КонецПроцедуры

#КонецОбласти
