#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("ОбработатьЗапрос")
		.ДобавитьТест("ОбработатьЗапросВыбрасываетИсключение")
		.ДобавитьТест("ОбработатьЗапросВыбрасываетИсключениеПриЗапускеЗаданийСОдинаковымКлючом")
		.ДобавитьТест("ОтправитьФайлыВыбрасываетИсключениеПриОтсутствииФайловКОтправке")
		.ДобавитьТест("ОтправитьФайлыИсключаетИзОтправкиНераспределенныеФайлы")
		.ДобавитьТест("ЗагрузитьИОтправитьФайлыВыполняетЗаписьВнешнегоЗапросаВИнформационнуюБазу")
		.ДобавитьТест("ЗагрузитьИОтправитьФайлыПриЗаписиВнешнегоЗапросаВИнформационнуюБазуВыбрасываетИсключение")
		.ДобавитьТест("ЗагрузитьИОтправитьФайлыВыполняетЗаписьВнешнихФайловВИнформационнуюБазу")
		.ДобавитьТест("ЗагрузитьИОтправитьФайлыПриЗаписиВнешнихФайловВИнформационнуюБазуВыбрасываетИсключение")
		.ДобавитьТест("ЗагрузитьИОтправитьФайлыИсключаетИзОтправкиНераспределенныеФайлы")
		.ДобавитьТест("ОбработатьЗагруженныеДанныеВозвращаетНеопределеноПриОтсутствииСохраненногоВнешнегоЗапроса")
		.ДобавитьТест("ОбработатьЗагруженныеДанныеВозвращаетНеопределеноПриОтсутствииСохраненныхФайлов")
		.ДобавитьТест("ОбработатьЗагруженныеДанныеВозвращаетЗапущенноеФоновое")
		.ДобавитьТест("ПолучитьОтборыФоновыхЗаданийВозвращаетКорректныеОтборы")
	;
	
КонецПроцедуры

Процедура ОбработатьЗапрос() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	// when
	Результат = ОбработкаДанных.ОбработатьЗапрос(ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(), ВнешнийЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ФоновоеЗадание");
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Состояние)
		.Равно(СостояниеФоновогоЗадания.Активно);
			
КонецПроцедуры

Процедура ОбработатьЗапросВыбрасываетИсключение() Экспорт
	
	// given
	Параметры = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		Обработки.ВнешнийЗапрос.Создать(), Обработки.ВнешнийЗапрос.Создать());
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ОбработкаДанных)
		.Метод("ОбработатьЗапрос", Параметры)
		.ВыбрасываетИсключение("Параметр фонового задания не поддерживает сериализацию");
			
КонецПроцедуры

Процедура ОбработатьЗапросВыбрасываетИсключениеПриЗапускеЗаданийСОдинаковымКлючом() Экспорт
	
	// given
	Тест = Заглушка();
	ВнешнийЗапрос = ОМ_ТестовыеДанные.ПолучитьФейковыйВнешнийЗапрос(Тест.ВнешнийЗапрос);
	ВнешнийЗапрос.Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	Обработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	
	Параметры = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(Обработчик, ВнешнийЗапрос);
	
	// when
	Результат = ОбработкаДанных.ОбработатьЗапрос(Обработчик, ВнешнийЗапрос);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ОбработкаДанных)
		.Метод("ОбработатьЗапрос", Параметры)
		.ВыбрасываетИсключение("Задание с таким значением ключа уже выполняется");
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Состояние)
		.Равно(СостояниеФоновогоЗадания.Активно);
		
КонецПроцедуры

Процедура ОтправитьФайлыВыбрасываетИсключениеПриОтсутствииФайловКОтправке() Экспорт
	
	// given
	Тест = Заглушка();
	
	Параметры = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик(),
		ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита(),
		Тест.СериализованныйВнешнийЗапрос,
		Новый Массив());
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ОбработкаДанных)
		.Метод("ОтправитьФайлы", Параметры)
		.ВыбрасываетИсключение(Логи.Сообщения().NO_UPLOAD_DATA);
	
КонецПроцедуры

Процедура ОтправитьФайлыИсключаетИзОтправкиНераспределенныеФайлы() Экспорт
	
	// given
	Тест = Заглушка();
	
	Обработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ОписаниеФайла());
	ФайлыКОтправке = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОписаниеФайлаКОтправке(), ОписаниеФайлаКОтправке() );
	ФайлыКОтправке[0].Маршруты = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	
	ОМ_Тесты.Мокито().Обучение(Маршрутизация)
		.Когда("РаспределитьФайлыПоМаршрутам").Вернуть(ФайлыКОтправке);
	ОМ_Тесты.Мокито().Обучение(Получатели)
		.Когда("ОтправитьФайлыВФоне").Вернуть(Новый Массив());
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	ОбработкаДанных.ОтправитьФайлы(Обработчик, Идентификатор, Тест.СериализованныйВнешнийЗапрос, Файлы);
	
	Результат = ОМ_Тесты.Мокито().Проверить(Получатели).Вызовы("ОтправитьФайлыВФоне");
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат[0].Параметры[0])
		.ИмеетДлину(1)
		.Свойство("[0].Маршруты").Заполнено();

КонецПроцедуры

Процедура ЗагрузитьИОтправитьФайлыВыполняетЗаписьВнешнегоЗапросаВИнформационнуюБазу() Экспорт
	
	// given
	Тест = Заглушка();
	
	Обработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ОписаниеФайла());
	
	ОМ_Тесты.Мокито().Обучение(ФайлыВнешнегоХранилища)
		.Когда("ПолучитьИзХранилища").Вернуть(Файлы);
	ОМ_Тесты.Мокито().Обучение(Обработки.ВнешнийЗапрос)
		.Когда("ЗаполнитьСхемыМаршрутов").Пропустить();	
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеЗапросы)
		.Когда("ЗаписатьДанные").Пропустить();
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеФайлы)
		.Когда("ЗаписатьДанные").Пропустить();
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	ОбработкаДанных.ЗагрузитьИОтправитьФайлы(Обработчик, Идентификатор, Тест.СериализованныйВнешнийЗапрос);
	
	// then
	СохраняемыйЗапрос = ОМ_Тесты.Мокито()
		.Проверить(РегистрыСведений.ВнешниеЗапросы)
			.Вызовы("ЗаписатьДанные");
			
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(СохраняемыйЗапрос[0].Параметры[0])
			.Равно(Обработчик);
	
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(СохраняемыйЗапрос[0].Параметры[1])
			.Равно(Идентификатор);
			
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(СохраняемыйЗапрос[0].Параметры[2])
			.ИмеетТип("Строка")
			.Содержит("#type");
			
КонецПроцедуры

Процедура ЗагрузитьИОтправитьФайлыПриЗаписиВнешнегоЗапросаВИнформационнуюБазуВыбрасываетИсключение() Экспорт

	// given
	Тест = Заглушка();
	
	Обработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ОписаниеФайла());

	Параметры = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		Обработчик, Идентификатор, Тест.СериализованныйВнешнийЗапрос);
		
	ТекстОшибкиЗаписи = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	ОМ_Тесты.Мокито().Обучение(Обработки.ВнешнийЗапрос)
		.Когда("ЗаполнитьСхемыМаршрутов").Пропустить();
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеЗапросы)
		.Когда("ЗаписатьДанные").ВыброситьИсключение(ТекстОшибкиЗаписи);
	ОМ_Тесты.Мокито().Обучение(ФайлыВнешнегоХранилища)
		.Когда("ПолучитьИзХранилища").Вернуть(Файлы);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ОбработкаДанных)
		.Метод("ЗагрузитьИОтправитьФайлы", Параметры)
			.ВыбрасываетИсключение(ТекстОшибкиЗаписи);
			
КонецПроцедуры

Процедура ЗагрузитьИОтправитьФайлыВыполняетЗаписьВнешнихФайловВИнформационнуюБазу() Экспорт
	
	// given
	Тест = Заглушка();
	
	Обработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ОписаниеФайла());
	
	ОМ_Тесты.Мокито().Обучение(ФайлыВнешнегоХранилища)
		.Когда("ПолучитьИзХранилища").Вернуть(Файлы);
	ОМ_Тесты.Мокито().Обучение(Обработки.ВнешнийЗапрос)
		.Когда("ЗаполнитьСхемыМаршрутов").Пропустить();	
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеЗапросы)
		.Когда("ЗаписатьДанные").Пропустить();
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеФайлы)
		.Когда("ЗаписатьДанные").Пропустить();
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	ОбработкаДанных.ЗагрузитьИОтправитьФайлы(Обработчик, Идентификатор, Тест.СериализованныйВнешнийЗапрос);
	
	// then
	СохраняемыйЗапрос = ОМ_Тесты.Мокито()
		.Проверить(РегистрыСведений.ВнешниеФайлы)
			.Вызовы("ЗаписатьДанные");
			
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(СохраняемыйЗапрос[0].Параметры[0])
			.Равно(Обработчик);
	
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(СохраняемыйЗапрос[0].Параметры[1])
			.Равно(Идентификатор);
			
	ОМ_Тесты.ЮТест()
		.ОжидаетЧто(СохраняемыйЗапрос[0].Параметры[2])
			.ИмеетТип("Массив")
			.Заполнено();
	
КонецПроцедуры

Процедура ЗагрузитьИОтправитьФайлыПриЗаписиВнешнихФайловВИнформационнуюБазуВыбрасываетИсключение() Экспорт

	// given
	Тест = Заглушка();
	
	Обработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ОписаниеФайла());
	
	Параметры = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		Обработчик, Идентификатор, Тест.СериализованныйВнешнийЗапрос);
		
	ТекстОшибкиЗаписи = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	ОМ_Тесты.Мокито().Обучение(ФайлыВнешнегоХранилища)
		.Когда("ПолучитьИзХранилища").Вернуть(Файлы);
	ОМ_Тесты.Мокито().Обучение(Обработки.ВнешнийЗапрос)
		.Когда("ЗаполнитьСхемыМаршрутов").Пропустить();
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеЗапросы)
		.Когда("ЗаписатьДанные").Пропустить();
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеФайлы)
		.Когда("ЗаписатьДанные").ВыброситьИсключение(ТекстОшибкиЗаписи);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(ОбработкаДанных)
		.Метод("ЗагрузитьИОтправитьФайлы", Параметры)
			.ВыбрасываетИсключение(ТекстОшибкиЗаписи);
			
КонецПроцедуры

Процедура ЗагрузитьИОтправитьФайлыИсключаетИзОтправкиНераспределенныеФайлы() Экспорт
	
	// given
	Тест = Заглушка();
	
	Обработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	Файлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ОписаниеФайла());
	ФайлыКОтправке = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОписаниеФайлаКОтправке(), ОписаниеФайлаКОтправке() );
	ФайлыКОтправке[0].Маршруты = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока());
	
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеЗапросы)
		.Когда("ЗаписатьДанные").Пропустить();
	ОМ_Тесты.Мокито().Обучение(РегистрыСведений.ВнешниеФайлы)
		.Когда("ЗаписатьДанные").Пропустить();
	ОМ_Тесты.Мокито().Обучение(Маршрутизация)
		.Когда("РаспределитьФайлыПоМаршрутам").Вернуть(ФайлыКОтправке);
	ОМ_Тесты.Мокито().Обучение(ФайлыВнешнегоХранилища)
		.Когда("ПолучитьИзХранилища").Вернуть(Файлы);
	ОМ_Тесты.Мокито().Обучение(Обработки.ВнешнийЗапрос)
		.Когда("ЗаполнитьСхемыМаршрутов").Пропустить();
	ОМ_Тесты.Мокито().Обучение(Получатели)
		.Когда("ОтправитьФайлыВФоне").Вернуть(Новый Массив());
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	ОбработкаДанных.ЗагрузитьИОтправитьФайлы(Обработчик, Идентификатор, Тест.СериализованныйВнешнийЗапрос);
	
	Результат = ОМ_Тесты.Мокито().Проверить(Получатели).Вызовы("ОтправитьФайлыВФоне");
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат[0].Параметры[0])
		.ИмеетДлину(1)
		.Свойство("[0].Маршруты").Заполнено();

КонецПроцедуры

Процедура ОбработатьЗагруженныеДанныеВозвращаетНеопределеноПриОтсутствииСохраненногоВнешнегоЗапроса() Экспорт
	
	// given
	Обработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	ОМ_Тесты.Мокито().Обучение(ВнешниеЗапросы)
		.Когда("Восстановить").Вернуть(Неопределено);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = ОбработкаДанных.ОбработатьЗагруженныеДанные(Обработчик, Идентификатор);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ЭтоНеопределено();
		
КонецПроцедуры

Процедура ОбработатьЗагруженныеДанныеВозвращаетНеопределеноПриОтсутствииСохраненныхФайлов() Экспорт
	
	// given
	Обработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	ОМ_Тесты.Мокито().Обучение(ВнешниеЗапросы)
		.Когда("Восстановить").Вернуть(Обработки.ВнешнийЗапрос.Создать());
	ОМ_Тесты.Мокито().Обучение(ФайлыВнешнегоХранилища)
		.Когда("Восстановить").Вернуть(Неопределено);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = ОбработкаДанных.ОбработатьЗагруженныеДанные(Обработчик, Идентификатор);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ЭтоНеопределено();
		
КонецПроцедуры

Процедура ОбработатьЗагруженныеДанныеВозвращаетЗапущенноеФоновое() Экспорт
	
	// given
	Обработчик = ОМ_ТестовыеДанные.ПолучитьФейковыйОбработчик();
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	
	ОМ_Тесты.Мокито().Обучение(ВнешниеЗапросы)
		.Когда("Восстановить").Вернуть(Обработки.ВнешнийЗапрос.Создать());
	ОМ_Тесты.Мокито().Обучение(ФайлыВнешнегоХранилища)
		.Когда("Восстановить").Вернуть(Новый Массив());
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = ОбработкаДанных.ОбработатьЗагруженныеДанные(Обработчик, Идентификатор);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("ФоновоеЗадание");
	
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Состояние)
		.Равно(СостояниеФоновогоЗадания.Активно);
			
КонецПроцедуры

Процедура ПолучитьОтборыФоновыхЗаданийВозвращаетКорректныеОтборы() Экспорт
	
	// given
	Идентификатор = ОМ_ТестовыеДанные.ПолучитьИдентификаторКоммита();
	КраткийИдентификатор = Лев(Идентификатор, 8);
	
	ОМ_Тесты.Мокито().Обучение(СистемаУправленияВерсиями)
		.Когда("ПолучитьКраткийИдентификатор").Вернуть(КраткийИдентификатор);
	ОМ_Тесты.Мокито().Прогон();
	
	// when
	Результат = ОбработкаДанных.ПолучитьОтборыФоновыхЗаданий(Идентификатор);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Массив")
		.ИмеетДлину(3);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат[0])
		.Свойство("ИмяМетода").Равно("ОбработкаДанных.ОтправитьФайлы")
		.Свойство("Ключ").Равно(КраткийИдентификатор)
		.Свойство("Префикс").Равно("");
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат[1])
		.Свойство("ИмяМетода").Равно("ОбработкаДанных.ЗагрузитьИОтправитьФайлы")
		.Свойство("Ключ").Равно(КраткийИдентификатор)
		.Свойство("Префикс").Равно("");
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат[2])
		.Свойство("ИмяМетода").Равно("Получатели.ОтправитьФайл")
		.Свойство("Ключ").Равно("")
		.Свойство("Префикс").Равно(КраткийИдентификатор + ПараметрыСеанса.РазделительКлюча);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Заглушка(Знач СхемыМаршрутов = Неопределено)
	
	Результат = Новый Структура();
	Результат.Вставить("Схема", ОМ_ТестовыеДанные.ПолучитьТело(ОМ_Тесты.ЮТНастройкиВыполнения().КаталогПроекта() + "/test/requests/push-repo1-req1.json"));
	Результат.Вставить("ДесериализованнаяСхема", ОМ_ТестовыеДанные.JsonВОбъект(Результат.Схема));
	
	ВнешнийЗапрос = Новый Структура();
	ВнешнийЗапрос.Вставить("ТипИсточника", Перечисления.ИсточникиЗапроса.Гитлаб);
	ВнешнийЗапрос.Вставить("JSON", Результат.Схема);
	ВнешнийЗапрос.Вставить("ProjectId", Строка(Результат.ДесериализованнаяСхема.Получить("project").Получить("id")));
	ВнешнийЗапрос.Вставить("АдресПроекта", Результат.ДесериализованнаяСхема.Получить("project").Получить("web_url"));
	ВнешнийЗапрос.Вставить("ServerURL", "http://mockserver:1080");
	ВнешнийЗапрос.Вставить("Идентификатор", Результат.ДесериализованнаяСхема.Получить("checkout_sha"));

	Коммиты = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		ОМ_ТестовыеДанные.НовыйКоммит(1, ИдентификаторКоммита(Результат, 0), ДатаВремяКоммита(Результат, 0), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)),
		ОМ_ТестовыеДанные.НовыйКоммит(2, ИдентификаторКоммита(Результат, 1), ДатаВремяКоммита(Результат, 1), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256)),
		ОМ_ТестовыеДанные.НовыйКоммит(3, ИдентификаторКоммита(Результат, 2), ДатаВремяКоммита(Результат, 2), ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(256))
		);
	ВнешнийЗапрос.Вставить("Коммиты", Коммиты);

	ВнешнийЗапрос.Вставить("ДобавленныеФайлы", Новый Массив());
	
	ИзмененныеФайлы = ОМ_Тесты.ЮТКоллекции().ЗначениеВМассиве(
		НовыйИзмененныйФайл(1, Результат.ДесериализованнаяСхема.Получить("commits")[0], 3),
		НовыйИзмененныйФайл(2, Результат.ДесериализованнаяСхема.Получить("commits")[1], 3),
		НовыйИзмененныйФайл(3, Результат.ДесериализованнаяСхема.Получить("commits")[2], 2));
	ВнешнийЗапрос.Вставить("ИзмененныеФайлы", ИзмененныеФайлы);
	
	ВнешнийЗапрос.Вставить("СхемыМаршрутов", Новый Массив());
	
	Результат.Вставить("ВнешнийЗапрос", ВнешнийЗапрос);
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(Запись, ВнешнийЗапрос, НазначениеТипаXML.Явное);
	
	Результат.Вставить("СериализованныйВнешнийЗапрос", Запись.Закрыть());
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторКоммита(Знач Тест, Знач Позиция)
	
	Возврат ОМ_ТестовыеДанные.ИдентификаторКоммита(Тест, Позиция);
	
КонецФункции

Функция ДатаВремяКоммита(Знач Тест, Знач Позиция)
	
	Возврат ОМ_ТестовыеДанные.ДатаВремяКоммита(Тест, Позиция);
	
КонецФункции

Функция НовыйИзмененныйФайл(Знач НомерСтроки, Знач Коммит, Знач Позиция)
	
	Возврат ОМ_ТестовыеДанные.НовыйИзмененныйФайл(НомерСтроки, Коммит, Позиция);
	
КонецФункции

Функция ОписаниеФайла()
	
	Результат = Новый Структура();
	Результат.Вставить( "Действие", Перечисления.ВидыИзмененийФайла.ПустаяСсылка() );
	Результат.Вставить( "ИнформацияОбОшибке", Неопределено );
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеФайлаКОтправке()
	
	Результат = Новый Структура();
	Результат.Вставить( "Идентификатор", "" );
	Результат.Вставить( "ИмяФайла", "" );
	Результат.Вставить( "ДвоичныеДанные", Неопределено );
	Результат.Вставить( "Маршруты", Новый Массив() );
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
