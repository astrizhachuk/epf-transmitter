#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ВТранзакции()
			.ДобавитьТест("ПроверитьУникальностьПоРеквизитуПередЗаписьюОтсутствуютДубликатыПриУникальныхАдресах")
			.ДобавитьТест("ПроверитьУникальностьПоРеквизитуПередЗаписьюЕстьДубликатыПриОдинаковыхАдресах")
			.ДобавитьТест("ПроверитьУникальностьПоРеквизитуПередЗаписьюОтсутствуютДубликатыПриПерезаписиОбъекта")
			.ДобавитьТест("ПроверитьУникальностьПоРеквизитуПередЗаписьюОтсутствуютДубликатыПриНаличииПометкиУдаления")
	;
	
КонецПроцедуры

Процедура ПроверитьУникальностьПоРеквизитуПередЗаписьюОтсутствуютДубликатыПриУникальныхАдресах() Экспорт
	
	// given
	Отказ = Ложь;
	Объект = ОМ_Тесты.ЮТест().Данные()
		.КонструкторОбъекта(Справочники.Получатели)
		.Установить("АдресИнформационнойБазы", ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока())
		.НовыйОбъект();
	
	// when
	ОбщегоНазначения.ПроверитьУникальностьПоРеквизитуПередЗаписью(
		Объект,
		Метаданные.Справочники.Получатели.Реквизиты.АдресИнформационнойБазы,
		ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока(),
		Отказ);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Отказ).ЭтоЛожь();
	
КонецПроцедуры

Процедура ПроверитьУникальностьПоРеквизитуПередЗаписьюЕстьДубликатыПриОдинаковыхАдресах() Экспорт
	
	// given
	Отказ = Ложь;
	Адрес = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	ОМ_Тесты.ЮТест().Данные()
		.КонструкторОбъекта(Справочники.Получатели)
		.Установить("АдресИнформационнойБазы", Адрес)
		.Записать( , Истина);
		
	Объект = ОМ_Тесты.ЮТест().Данные()
		.КонструкторОбъекта(Справочники.Получатели)
		.Установить("АдресИнформационнойБазы", Адрес)
		.НовыйОбъект();
	
	// when
	ОбщегоНазначения.ПроверитьУникальностьПоРеквизитуПередЗаписью(
		Объект,
		Метаданные.Справочники.Получатели.Реквизиты.АдресИнформационнойБазы,
		Адрес,
		Отказ);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Отказ).ЭтоИстина();
	
КонецПроцедуры

Процедура ПроверитьУникальностьПоРеквизитуПередЗаписьюОтсутствуютДубликатыПриПерезаписиОбъекта() Экспорт
	
	// given
	Отказ = Ложь;
	Адрес = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Объект = ОМ_Тесты.ЮТест().Данные()
		.КонструкторОбъекта(Справочники.Получатели)
		.Установить("АдресИнформационнойБазы", Адрес)
		.Записать( , Истина);
	
	// when
	ОбщегоНазначения.ПроверитьУникальностьПоРеквизитуПередЗаписью(
		Объект,
		Метаданные.Справочники.Получатели.Реквизиты.АдресИнформационнойБазы,
		Адрес,
		Отказ);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Отказ).ЭтоЛожь();
	
КонецПроцедуры

Процедура ПроверитьУникальностьПоРеквизитуПередЗаписьюОтсутствуютДубликатыПриНаличииПометкиУдаления() Экспорт
	
	// given
	Отказ = Ложь;
	Адрес = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	ОМ_Тесты.ЮТест().Данные()
		.КонструкторОбъекта(Справочники.Получатели)
		.Установить("ПометкаУдаления", Истина)
		.Установить("АдресИнформационнойБазы", Адрес)
		.Записать( , Истина);
	Объект = ОМ_Тесты.ЮТест().Данные()
		.КонструкторОбъекта(Справочники.Получатели)
		.Установить("АдресИнформационнойБазы", Адрес)
		.НовыйОбъект();
	
	// when
	ОбщегоНазначения.ПроверитьУникальностьПоРеквизитуПередЗаписью(
		Объект,
		Метаданные.Справочники.Получатели.Реквизиты.АдресИнформационнойБазы,
		Адрес,
		Отказ);
		
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Отказ).ЭтоЛожь();
	
КонецПроцедуры

#КонецОбласти
