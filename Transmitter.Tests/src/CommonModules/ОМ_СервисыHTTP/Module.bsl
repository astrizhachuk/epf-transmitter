#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	//@skip-check undefined-variable
	ЮТТесты
		.ДобавитьТест("КодыСостояния")
		.ДобавитьТест("СоздатьОтветЕслиОшибкаНеправильныйЗапрос")
		.ДобавитьТест("СоздатьОтветЕслиОшибкаНеправильныйЗапросПриОтсутствииСообщения")
		.ДобавитьТест("СоздатьОтветЕслиОшибкаЗаблокировано")
		.ДобавитьТест("СоздатьОтветЕслиОшибкаЗаблокированоПриОтсутствииСообщения")
		.ДобавитьТест("СоздатьОтветЕслиОшибкаСервера")
		.ДобавитьТест("СоздатьОтветЕслиОшибкаСервераПриОтсутствииСообщения")
		.ДобавитьТест("СоздатьОтветБезСообщения")
			.СПараметрами(200)
			.СПараметрами(401)
			.СПараметрами(404)
			.СПараметрами(423)
		.ДобавитьТест("СоздатьОтветВФорматеJSON")
		.ДобавитьТест("НайтиЗаголовок")
		.ДобавитьТест("НайтиЗаголовокВозвращаетЗаголовокПриКлючеВНижнемРегистре")
		.ДобавитьТест("НайтиЗаголовокВозвращаетЗаголовокПриКлючеВВерхнемРегистре")
		.ДобавитьТест("ПолучитьСхемуСообщения")

		.ДобавитьТест("GetMultipartMessageByType") //TODO сделать
	;
	
КонецПроцедуры

Процедура КодыСостояния() Экспорт
	
	// given
	
	// when
	Результат = СервисыHTTP.КодыСостояния();
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("ОбщийМодуль"));
	
КонецПроцедуры

Процедура СоздатьОтветЕслиОшибкаНеправильныйЗапрос() Экспорт
	
	// given
	КодСостояния = 400;
	ТипКонтента = "application/json";
	Текст = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	// when
	Результат = СервисыHTTP.СоздатьОтвет(КодСостояния, Текст);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(КодСостояния);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки.Получить("Content-Type"))
		.Равно(ТипКонтента);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НачинаетсяС("{")
		.Содержит("""message"":")
		.Содержит(Текст)
		.ЗаканчиваетсяНа("}");
	
КонецПроцедуры

Процедура СоздатьОтветЕслиОшибкаНеправильныйЗапросПриОтсутствииСообщения() Экспорт
	
	// given
	КодСостояния = 400;
	ТипКонтента = "application/json";
	
	// when
	Результат = СервисыHTTP.СоздатьОтвет(КодСостояния);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(КодСостояния);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки.Получить("Content-Type"))
		.Равно(ТипКонтента);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НачинаетсяС("{")
		.Содержит("""message"":")
		.Содержит("null")
		.ЗаканчиваетсяНа("}");
	
КонецПроцедуры

Процедура СоздатьОтветЕслиОшибкаЗаблокировано() Экспорт
	
	// given
	КодСостояния = 423;
	Текст = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	// when
	Результат = СервисыHTTP.СоздатьОтвет(КодСостояния, Текст);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(КодСостояния);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.Равно(Текст);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НеЗаполнено();
	
КонецПроцедуры

Процедура СоздатьОтветЕслиОшибкаЗаблокированоПриОтсутствииСообщения() Экспорт
	
	// given
	КодСостояния = 423;
	
	// when
	Результат = СервисыHTTP.СоздатьОтвет(КодСостояния);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(КодСостояния);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НеЗаполнено();
	
КонецПроцедуры

Процедура СоздатьОтветЕслиОшибкаСервера() Экспорт
	
	// given
	КодСостояния = 500;
	ТипКонтента = "text/plain";
	Текст = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	// when
	Результат = СервисыHTTP.СоздатьОтвет(КодСостояния, Текст);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(КодСостояния);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки.Получить("Content-Type"))
		.Равно(ТипКонтента);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.Равно(Текст);
	
КонецПроцедуры

Процедура СоздатьОтветЕслиОшибкаСервераПриОтсутствииСообщения() Экспорт
	
	// given
	КодСостояния = 500;
	ТипКонтента = "text/plain";
	
	// when
	Результат = СервисыHTTP.СоздатьОтвет(КодСостояния);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(КодСостояния);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки.Получить("Content-Type"))
		.Равно(ТипКонтента);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НеЗаполнено();
	
КонецПроцедуры

Процедура СоздатьОтветБезСообщения(Знач КодСостояния) Экспорт
	
	// given
	
	// when
	Результат = СервисыHTTP.СоздатьОтвет(КодСостояния);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
		.Равно(КодСостояния);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
		.НеЗаполнено();
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НеЗаполнено();
		
КонецПроцедуры

// TODO методы ушли в приват, в конце рефакторинга проверить приватность и удалить

//Процедура УстановитьТипКонтента() Экспорт
//	
//	// given
//	Ответ = Новый HTTPСервисОтвет(200);
//	ТипКонтента = "application/json";
//	
//	// when
//	СервисыHTTP.УстановитьТипКонтента(Ответ, ТипКонтента);
//	
//	// then
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Ответ)
//		.ИмеетТип(Тип("HTTPСервисОтвет"));
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Ответ.Заголовки.Получить("Content-Type"))
//		.Равно(ТипКонтента);
//	
//КонецПроцедуры
//
//Процедура УстановитьТелоИзJSON() Экспорт
//	
//	// given
//	Ответ = Новый HTTPСервисОтвет(200);
//	Значение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
//	Структура = Новый Структура();
//	Структура.Вставить("Ключ", Значение);
//	
//	// when
//	СервисыHTTP.УстановитьТелоИзJSON(Ответ, Структура);
//	
//	// then
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Ответ)
//		.ИмеетТип(Тип("HTTPСервисОтвет"));
//		
//	
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Ответ.ПолучитьТелоКакСтроку())
//		.НачинаетсяС("{")
//		.Содержит("""Ключ"":")
//		.Содержит(Значение)
//		.ЗаканчиваетсяНа("}");
//		
//КонецПроцедуры

Процедура СоздатьОтветВФорматеJSON() Экспорт
	
	// given
	ТипКонтента = "application/json";
	Значение = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	Структура = Новый Структура();
	Структура.Вставить("Ключ", Значение);
	
	// when
	Результат = СервисыHTTP.СоздатьОтветВФорматеJSON(Структура);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип(Тип("HTTPСервисОтвет"));
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки.Получить("Content-Type"))
		.Равно(ТипКонтента);
		
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
		.НачинаетсяС("{")
		.Содержит("""Ключ"":")
		.Содержит(Значение)
		.ЗаканчиваетсяНа("}");
		
КонецПроцедуры



Процедура НайтиЗаголовок() Экспорт
	
	// given
	Текст = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();

	СервисЗапрос = ОМ_Тесты.ЮТест().Данные().HTTPСервисЗапрос();
	СервисЗапрос.ДобавитьЗаголовок("Content-Type", Текст);
	
	// when
	Результат = СервисыHTTP.НайтиЗаголовок(СервисЗапрос, "Content-Type");
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Текст);
	
КонецПроцедуры

Процедура НайтиЗаголовокВозвращаетЗаголовокПриКлючеВНижнемРегистре() Экспорт
	
	// given
	Текст = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();

	СервисЗапрос = ОМ_Тесты.ЮТест().Данные().HTTPСервисЗапрос();
	СервисЗапрос.ДобавитьЗаголовок("content-type", Текст);
	
	// when
	Результат = СервисыHTTP.НайтиЗаголовок(СервисЗапрос, "Content-Type");
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Текст);
	
КонецПроцедуры

Процедура НайтиЗаголовокВозвращаетЗаголовокПриКлючеВВерхнемРегистре() Экспорт
	
	// given
	Текст = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();

	Запрос = ОМ_Тесты.ЮТест().Данные().HTTPСервисЗапрос();
	Запрос.ДобавитьЗаголовок("CONTENT-TYPE", Текст);
	
	// when
	Результат = СервисыHTTP.НайтиЗаголовок(Запрос, "Content-Type");
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.Равно(Текст);
	
КонецПроцедуры

Процедура ПолучитьСхемуСообщения() Экспорт
	
	// given
	Текст = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
	
	// when
	Результат = СервисыHTTP.ПолучитьСхемуСообщения(Текст);
	
	// then
	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
		.ИмеетТип("Структура")
		.Свойство("message")
			.Равно(Текст);
	
КонецПроцедуры

////TODO к удалению
//Процедура НоваяОшибкаНеправильныйЗапрос() Экспорт
//	
//	// given
//	ТипКонтента = "application/json";
//	Текст = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
//	
//	// when
//	Результат = СервисыHTTP.НоваяОшибкаНеправильныйЗапрос(Текст);
//	
//	// then
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
//		.ИмеетТип(Тип("HTTPСервисОтвет"));
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
//		.Равно(400);
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки.Получить("Content-Type"))
//		.Равно(ТипКонтента);
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
//		.НеЗаполнено();
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
//		.НачинаетсяС("{")
//		.Содержит("""message"":")
//		.Содержит(Текст)
//		.ЗаканчиваетсяНа("}");
//	
//КонецПроцедуры

//Процедура НоваяОшибкаЗаблокировано() Экспорт
//	
//	// given
//	Текст = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
//	
//	// when
//	Результат = СервисыHTTP.НоваяОшибкаЗаблокировано(Текст);
//	
//	// then
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
//		.ИмеетТип(Тип("HTTPСервисОтвет"));
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
//		.Равно(423);
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки)
//		.НеЗаполнено();
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
//		.Равно(Текст);
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
//		.НеЗаполнено();
//	
//КонецПроцедуры

//Процедура НоваяОшибкаСервера() Экспорт
//	
//	// given
//	ТипКонтента = "text/plain";
//	Текст = ОМ_Тесты.ЮТест().Данные().СлучайнаяСтрока();
//	
//	// when
//	Результат = СервисыHTTP.НоваяОшибкаСервера(Текст);
//	
//	// then
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат)
//		.ИмеетТип(Тип("HTTPСервисОтвет"));
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.КодСостояния)
//		.Равно(500);
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Заголовки.Получить("Content-Type"))
//		.Равно(ТипКонтента);
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.Причина)
//		.НеЗаполнено();
//		
//	ОМ_Тесты.ЮТест().ОжидаетЧто(Результат.ПолучитьТелоКакСтроку())
//		.Равно(Текст);
//	
//КонецПроцедуры



//// @unit-test
//// Params:
//// 	Framework - TestFramework - Test framework
////
//Procedure GetMultipartMessageByTypeNoBoundary(Framework) Export
//
//	// given
//	Headers = New Map;
//	Headers.Insert("Content-Type", "multipart/form-data");	
//	Request = New HTTPRequest("localhost", Headers);
//	
//	// when
//	Result = СервисыHTTP.GetMultipartMessageByType( Request );
//	
//	// then
//	Framework.AssertEqual(Result, Undefined);
//	
//EndProcedure
//
//// @unit-test
//// Params:
//// 	Framework - TestFramework - Test framework
////
//Procedure GetMultipartMessageByType(Framework) Export
//
//	// given
//	Boundary = "--------------------------546144342224614890333197";
//	
//	Headers = New Map;
//	Headers.Insert("Content-Type", "multipart/form-data; boundary=" + Boundary);	
//	Request = New HTTPRequest("localhost", Headers);
//	
//	Test = New MemoryStream();
//	DataWriter = New DataWriter(Test);
//	DataWriter.WriteLine(Boundary);
//	DataWriter.Write(GetContentDisposition("desc", "{""key"":""value""}"));             
//	DataWriter.WriteLine(Boundary);
//	DataWriter.Write(GetContentDisposition("data", GetBinaryDataFromString("content"), "test.txt"));        
//	DataWriter.WriteLine(Boundary);
//	DataWriter.Close();
//	
//	Request.SetBodyFromBinaryData(Test.CloseAndGetBinaryData());
//	
//	// when
//	Result = СервисыHTTP.GetMultipartMessageByType(Request);
//	
//	// then
//	Framework.AssertNotEqual(Result.Get("String"), Undefined);
//	Framework.AssertNotEqual(Result.Get("BinaryData"), Undefined);
//	
//EndProcedure

Процедура GetMultipartMessageByType() Экспорт
	
	ВызватьИсключение "Тест не реализован";
	
КонецПроцедуры









#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Function GetContentDisposition(Val Name, Val Content, Val ИмяФайла = Undefined)
	
	Stream = New MemoryStream();
	DataWriter = New DataWriter(Stream);
	ContentDisposition = "Content-Disposition: form-data; name=" + Name;
	If ИмяФайла <> Undefined Then
		ContentDisposition = ContentDisposition + "; filename=" + ИмяФайла;
	EndIf;
	DataWriter.WriteLine(ContentDisposition);
	If TypeOf(Content) = Type("BinaryData") Then
		DataWriter.WriteLine("Content-Type: application/octet-stream");
		DataWriter.WriteLine("");
		DataWriter.Write(Content);
	Else
		DataWriter.WriteLine("");
		DataWriter.WriteLine(Content);
	EndIf;
	DataWriter.Close();


	Return Stream.CloseAndGetBinaryData();
	
EndFunction

#КонецОбласти
